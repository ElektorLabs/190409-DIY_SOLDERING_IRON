
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620/Soldering-Station.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:83
      44:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_17>
../../../../crt1/gcrt1.S:84
      48:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:86
      50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
      64:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_25>
../../../../crt1/gcrt1.S:92
      68:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_36>
../../../../crt1/gcrt1.S:103
      94:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>

000000a0 <__trampolines_end>:
__trampolines_start():
      a0:	00 5e       	subi	r16, 0xE0	; 224
      a2:	bc e2       	ldi	r27, 0x2C	; 44
      a4:	61 3f       	cpi	r22, 0xF1	; 241
      a6:	dd 83       	std	Y+5, r29	; 0x05
      a8:	c2 9c       	mul	r12, r2
      aa:	7e 20       	and	r7, r14
      ac:	a3 fd       	sbrc	r26, 3
      ae:	1f 41       	sbci	r17, 0x1F	; 31
      b0:	00 9d       	mul	r16, r0
      b2:	23 be       	out	0x33, r2	; 51
      b4:	46 db       	rcall	.-2420   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      b6:	65 f8       	bld	r6, 5
      b8:	8c 11       	cpse	r24, r12
      ba:	af 32       	cpi	r26, 0x2F	; 47
      bc:	ca 57       	subi	r28, 0x7A	; 122
      be:	e9 74       	andi	r30, 0x49	; 73

000000c0 <_ZZ23SerialConsoleParseInputvE3__c__13_>:
      c0:	57 52 54 00                                         WRT.

000000c4 <_ZZ23SerialConsoleParseInputvE3__c__12_>:
      c4:	48 4b 4f 00                                         HKO.

000000c8 <_ZZ23SerialConsoleParseInputvE3__c__11_>:
      c8:	4a 42 43 00                                         JBC.

000000cc <_ZZ23SerialConsoleParseInputvE3__c__10_>:
      cc:	4f 46 46 00                                         OFF.

000000d0 <SerialConsoleParseInput()::__c>:
      d0:	4f 4e 00                                            ON.

000000d3 <SerialConsoleParseInput()::__c>:
      d3:	69 72 6f 6e 74 79 70 65 00                          irontype.

000000dc <SerialConsoleParseInput()::__c>:
      dc:	65 72 72 6f 72 00                                   error.

000000e2 <SerialConsoleParseInput()::__c>:
      e2:	6f 6e 65 77 69 72 65 74 65 6d 70 00                 onewiretemp.

000000ee <SerialConsoleParseInput()::__c>:
      ee:	6f 6e 63 68 69 70 74 65 6d 70 00                    onchiptemp.

000000f9 <SerialConsoleParseInput()::__c>:
      f9:	74 65 6d 70 65 72 61 74 75 72 65 00                 temperature.

00000105 <SerialConsoleParseInput()::__c>:
     105:	73 65 74 70 6f 69 6e 74 00                          setpoint.

0000010e <SerialConsoleParseInput()::__c>:
     10e:	63 6c 65 61 72 00                                   clear.

00000114 <SerialConsoleParseInput()::__c>:
     114:	68 65 6c 70 00                                      help.

00000119 <SerialConsoleParseInput()::__c>:
     119:	67 65 74 00                                         get.

0000011d <SerialConsoleParseInput()::__c>:
     11d:	73 65 74 00 00                                      set..

00000122 <__ctors_start>:
__ctors_start():
     122:	f1 0f       	add	r31, r17

00000124 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     124:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     126:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     128:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     12a:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     12c:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     12e:	de bf       	out	0x3e, r29	; 62

00000130 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     130:	18 e2       	ldi	r17, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     132:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     134:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     136:	ef e2       	ldi	r30, 0x2F	; 47
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     138:	fd e3       	ldi	r31, 0x3D	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     13c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     13e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     140:	a4 32       	cpi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     142:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     146:	29 e2       	ldi	r18, 0x29	; 41
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     148:	a4 e2       	ldi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     14a:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     150:	a9 37       	cpi	r26, 0x79	; 121
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     152:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>

00000156 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     156:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     158:	c2 e9       	ldi	r28, 0x92	; 146
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     15a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     15c:	04 c0       	rjmp	.+8      	; 0x166 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     15e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     160:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     162:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     166:	c1 39       	cpi	r28, 0x91	; 145
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     168:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     16a:	c9 f7       	brne	.-14     	; 0x15e <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     16c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <main>
../../../../crt1/gcrt1.S:315
     170:	0c 94 95 1b 	jmp	0x372a	; 0x372a <_exit>

00000174 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <TEMP_190409::GetOnchipTempKelvin() [clone .constprop.45]>:
_ZN11TEMP_19040919GetOnchipTempKelvinEv.constprop.45():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:155
    return GetOnchipTempKelvin();
  }
}

int16_t TEMP_190409::GetOnchipTempKelvin(){
   uint8_t RegTempCTRLC = ADC0.CTRLC;
     178:	e0 91 02 06 	lds	r30, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:156
   uint8_t RegTempCTRLD = ADC0.CTRLD;
     17c:	70 91 03 06 	lds	r23, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:157
   uint8_t RegTempSAMPLECTRL = ADC0.SAMPCTRL; 
     180:	60 91 05 06 	lds	r22, 0x0605	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f4605>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:158
   uint8_t RegTempMUXPOS = ADC0.MUXPOS;
     184:	50 91 06 06 	lds	r21, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:160

   uint8_t RegTempVREFCrtA =  VREF.CTRLA;
     188:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:161
   uint8_t RegTempVREFCrtB =  VREF.CTRLB;
     18c:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f40a1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:163
 
   VREF.CTRLA = 0x10;
     190:	80 e1       	ldi	r24, 0x10	; 16
     192:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:164
   VREF.CTRLB = 0x02;
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f40a1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:166

   ADC0.CTRLC = 0x40 | 0x00 | 0x04;
     19c:	84 e4       	ldi	r24, 0x44	; 68
     19e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:167
   ADC0.CTRLD = ADC0.CTRLD | 0x40 ; //32us * 0.625MHz = 20 , setting 32
     1a2:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     1a6:	80 64       	ori	r24, 0x40	; 64
     1a8:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:168
   ADC0.SAMPCTRL = 24;
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f4605>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:169
   ADC0.MUXPOS = 0x1E;
     1b2:	8e e1       	ldi	r24, 0x1E	; 30
     1b4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:172

   /* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:175

	/* Wait for result ready */
	while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     1be:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     1c2:	80 ff       	sbrs	r24, 0
     1c4:	fc cf       	rjmp	.-8      	; 0x1be <TEMP_190409::GetOnchipTempKelvin() [clone .constprop.45]+0x46>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:178

	/* Save state */
	uint8_t status = SREG;
     1c6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:179
	cli();
     1c8:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:182
   uint8_t low, high;
	/* Read result */
	low = ADC0.RESL;
     1ca:	90 91 10 06 	lds	r25, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:183
	high = ADC0.RESH;
     1ce:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:186

	/* Restore state */
	SREG = status;
     1d2:	8f bf       	out	0x3f, r24	; 63
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:188

   ADC0.CTRLC = RegTempCTRLC;
     1d4:	e0 93 02 06 	sts	0x0602, r30	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:189
   ADC0.CTRLD = RegTempCTRLD;
     1d8:	70 93 03 06 	sts	0x0603, r23	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:190
   ADC0.SAMPCTRL = RegTempSAMPLECTRL;
     1dc:	60 93 05 06 	sts	0x0605, r22	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f4605>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:191
   ADC0.MUXPOS = RegTempMUXPOS;
     1e0:	50 93 06 06 	sts	0x0606, r21	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:193

    VREF.CTRLA = RegTempVREFCrtA;
     1e4:	40 93 a0 00 	sts	0x00A0, r20	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:194
    VREF.CTRLB = RegTempVREFCrtB;
     1e8:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f40a1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:196
   
   int8_t sigrow_offset = SIGROW.TEMPSENSE1; // Read signed value from signature row
     1ec:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <__TEXT_REGION_LENGTH__+0x7f5121>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:197
   uint8_t sigrow_gain = SIGROW.TEMPSENSE0;  // Read unsigned value from signature row
     1f0:	a0 91 20 11 	lds	r26, 0x1120	; 0x801120 <__TEXT_REGION_LENGTH__+0x7f5120>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:198
   uint16_t adc_reading = (high << 8) | low; // ADC conversion result with 1.1 V internal reference 
     1f4:	32 2f       	mov	r19, r18
     1f6:	29 2f       	mov	r18, r25
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:199
   uint32_t temp = adc_reading - sigrow_offset;temp *= sigrow_gain; // Result might overflow 16 bit variable (10bit+8bit)
     1f8:	28 1b       	sub	r18, r24
     1fa:	31 09       	sbc	r19, r1
     1fc:	87 fd       	sbrc	r24, 7
     1fe:	33 95       	inc	r19
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__umulhisi3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:200
   temp += 0x80; // Add 1/2 to get correct rounding on division below
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	80 58       	subi	r24, 0x80	; 128
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	af 4f       	sbci	r26, 0xFF	; 255
     210:	bf 4f       	sbci	r27, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:201
   temp >>= 8; // Divide result to get Kelvin
     212:	89 2f       	mov	r24, r25
     214:	9a 2f       	mov	r25, r26
     216:	ab 2f       	mov	r26, r27
     218:	bb 27       	eor	r27, r27
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:206
   uint16_t temperature_in_K = temp;
   return temperature_in_K;
   //The value deliverd is about 7 degree about surrounding ....
   
}
     21a:	08 95       	ret

0000021c <OneWire::reset_search() [clone .constprop.43]>:
_ZN7OneWire12reset_searchEv.constprop.43():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:330
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
     21c:	ec e4       	ldi	r30, 0x4C	; 76
     21e:	f9 e2       	ldi	r31, 0x29	; 41
     220:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:331
  LastDeviceFlag = false;
     222:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:332
  LastFamilyDiscrepancy = 0;
     224:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:334
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
     226:	12 86       	std	Z+10, r1	; 0x0a
     228:	11 86       	std	Z+9, r1	; 0x09
     22a:	10 86       	std	Z+8, r1	; 0x08
     22c:	17 82       	std	Z+7, r1	; 0x07
     22e:	16 82       	std	Z+6, r1	; 0x06
     230:	15 82       	std	Z+5, r1	; 0x05
     232:	14 82       	std	Z+4, r1	; 0x04
     234:	13 82       	std	Z+3, r1	; 0x03
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:337
    if ( i == 0) break;
  }
}
     236:	08 95       	ret

00000238 <FE_190409::display_dim(bool)>:
_ZN9FE_19040914display_invertEb():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:126
 Output:      None
 Discription: inverts the display
**********************************************************************************************************/
void FE_190409::display_invert( bool invert ) {

}
     238:	08 95       	ret

0000023a <PWM_190409::On(unsigned int)>:
_ZN10PWM_1904092OnEj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:13
 Input:       uint16_t value
 Output:      None
 Discription: Sets the PWM to the given value, is the value is zero, this turns the PWM off
**********************************************************************************************************/
void PWM_190409::On( uint16_t value ){
    if(value ==0)
     23a:	61 15       	cp	r22, r1
     23c:	71 05       	cpc	r23, r1
     23e:	39 f4       	brne	.+14     	; 0x24e <PWM_190409::On(unsigned int)+0x14>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:15
    {
      Off();
     240:	dc 01       	movw	r26, r24
     242:	ed 91       	ld	r30, X+
     244:	fc 91       	ld	r31, X
     246:	02 80       	ldd	r0, Z+2	; 0x02
     248:	f3 81       	ldd	r31, Z+3	; 0x03
     24a:	e0 2d       	mov	r30, r0
     24c:	09 94       	ijmp
     24e:	61 15       	cp	r22, r1
     250:	b8 e0       	ldi	r27, 0x08	; 8
     252:	7b 07       	cpc	r23, r27
     254:	10 f0       	brcs	.+4      	; 0x25a <PWM_190409::On(unsigned int)+0x20>
     256:	6f ef       	ldi	r22, 0xFF	; 255
     258:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:22
    } else {
    
      if(value >= 0x800 ){
        value = 0x07FF;
      }
      TCA0.SINGLE.CMP0BUF = value&0x07FF; //Clip value to 11Bit
     25a:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
     25e:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:25
     
    }
}
     262:	08 95       	ret

00000264 <PWM_190409::Off()>:
_ZN10PWM_1904093OffEv():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:38
 Discription: Turns the PWM off
**********************************************************************************************************/
void PWM_190409::Off( void ) {

  //Disable PWM
  TCA0.SINGLE.CMP0BUF=0;
     264:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
     268:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:40

}  
     26c:	08 95       	ret

0000026e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	6c 01       	movw	r12, r24
     284:	7b 01       	movw	r14, r22
     286:	8b 01       	movw	r16, r22
     288:	04 0f       	add	r16, r20
     28a:	15 1f       	adc	r17, r21
     28c:	eb 01       	movw	r28, r22
     28e:	5e 01       	movw	r10, r28
     290:	ae 18       	sub	r10, r14
     292:	bf 08       	sbc	r11, r15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:32
  size_t n = 0;
  while (size--)
     294:	c0 17       	cp	r28, r16
     296:	d1 07       	cpc	r29, r17
     298:	59 f0       	breq	.+22     	; 0x2b0 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:34
  {
    if (write(*buffer++))
     29a:	69 91       	ld	r22, Y+
     29c:	d6 01       	movw	r26, r12
     29e:	ed 91       	ld	r30, X+
     2a0:	fc 91       	ld	r31, X
     2a2:	01 90       	ld	r0, Z+
     2a4:	f0 81       	ld	r31, Z
     2a6:	e0 2d       	mov	r30, r0
     2a8:	c6 01       	movw	r24, r12
     2aa:	09 95       	icall
     2ac:	89 2b       	or	r24, r25
     2ae:	79 f7       	brne	.-34     	; 0x28e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:40
      n++;
    else
      break;
  }
  return n;
}
     2b0:	c5 01       	movw	r24, r10
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	08 95       	ret

000002c8 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:295
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = _tx_buffer_head;
     2c8:	fc 01       	movw	r30, r24
     2ca:	50 8d       	ldd	r21, Z+24	; 0x18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:296
    tail = _tx_buffer_tail;
     2cc:	41 8d       	ldd	r20, Z+25	; 0x19
     2ce:	25 2f       	mov	r18, r21
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	84 2f       	mov	r24, r20
     2d4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:298
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2d6:	82 1b       	sub	r24, r18
     2d8:	93 0b       	sbc	r25, r19
     2da:	54 17       	cp	r21, r20
     2dc:	10 f0       	brcs	.+4      	; 0x2e2 <UartClass::availableForWrite()+0x1a>
     2de:	cf 96       	adiw	r24, 0x3f	; 63
     2e0:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:299
  return tail - head - 1;
     2e2:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:300
}
     2e4:	08 95       	ret

000002e6 <UartClass::read()>:
_ZN9UartClass4readEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:274
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void)
{
     2e6:	fc 01       	movw	r30, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:276
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
     2e8:	96 89       	ldd	r25, Z+22	; 0x16
     2ea:	87 89       	ldd	r24, Z+23	; 0x17
     2ec:	98 17       	cp	r25, r24
     2ee:	61 f0       	breq	.+24     	; 0x308 <UartClass::read()+0x22>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:282
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2f0:	a7 89       	ldd	r26, Z+23	; 0x17
     2f2:	ae 0f       	add	r26, r30
     2f4:	bf 2f       	mov	r27, r31
     2f6:	b1 1d       	adc	r27, r1
     2f8:	5d 96       	adiw	r26, 0x1d	; 29
     2fa:	8c 91       	ld	r24, X
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:283
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2fc:	97 89       	ldd	r25, Z+23	; 0x17
     2fe:	9f 5f       	subi	r25, 0xFF	; 255
     300:	9f 73       	andi	r25, 0x3F	; 63
     302:	97 8b       	std	Z+23, r25	; 0x17
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:284
    return c;
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:278
int UartClass::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:286
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     30c:	08 95       	ret

0000030e <UartClass::peek()>:
_ZN9UartClass4peekEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:262
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void)
{
     30e:	fc 01       	movw	r30, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:263
  if (_rx_buffer_head == _rx_buffer_tail)
     310:	96 89       	ldd	r25, Z+22	; 0x16
     312:	87 89       	ldd	r24, Z+23	; 0x17
     314:	98 17       	cp	r25, r24
     316:	31 f0       	breq	.+12     	; 0x324 <UartClass::peek()+0x16>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:269
  {
    return -1;
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
     318:	87 89       	ldd	r24, Z+23	; 0x17
     31a:	e8 0f       	add	r30, r24
     31c:	f1 1d       	adc	r31, r1
     31e:	85 8d       	ldd	r24, Z+29	; 0x1d
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:265

int UartClass::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:271
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     328:	08 95       	ret

0000032a <UartClass::available()>:
_ZN9UartClass9availableEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:257
  // Note: Does not change output pins
  _written = false;
}

int UartClass::available(void)
{
     32a:	fc 01       	movw	r30, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:258
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     32c:	96 89       	ldd	r25, Z+22	; 0x16
     32e:	27 89       	ldd	r18, Z+23	; 0x17
     330:	89 2f       	mov	r24, r25
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	80 5c       	subi	r24, 0xC0	; 192
     336:	9f 4f       	sbci	r25, 0xFF	; 255
     338:	82 1b       	sub	r24, r18
     33a:	91 09       	sbc	r25, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:259
}
     33c:	8f 73       	andi	r24, 0x3F	; 63
     33e:	99 27       	eor	r25, r25
     340:	08 95       	ret

00000342 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:65

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available()
{
  return Serial.available();
     342:	87 ea       	ldi	r24, 0xA7	; 167
     344:	98 e2       	ldi	r25, 0x28	; 40
     346:	0e 94 95 01 	call	0x32a	; 0x32a <UartClass::available()>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	89 2b       	or	r24, r25
     34e:	09 f4       	brne	.+2      	; 0x352 <Serial0_available()+0x10>
     350:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:66
}
     352:	82 2f       	mov	r24, r18
     354:	08 95       	ret

00000356 <UartClass::end()>:
_ZN9UartClass3endEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:240
  // Restore SREG content
  SREG = oldSREG;
}

void UartClass::end()
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	ec 01       	movw	r28, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:242
  // wait for transmission of outgoing data
  flush();
     35c:	e8 81       	ld	r30, Y
     35e:	f9 81       	ldd	r31, Y+1	; 0x01
     360:	06 80       	ldd	r0, Z+6	; 0x06
     362:	f7 81       	ldd	r31, Z+7	; 0x07
     364:	e0 2d       	mov	r30, r0
     366:	09 95       	icall
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:246

  // Disable receiver and transmitter as well as the RX complete and
  // data register empty interrupts.
  (*_hwserial_module).CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     368:	ec 85       	ldd	r30, Y+12	; 0x0c
     36a:	fd 85       	ldd	r31, Y+13	; 0x0d
     36c:	86 81       	ldd	r24, Z+6	; 0x06
     36e:	8f 73       	andi	r24, 0x3F	; 63
     370:	86 83       	std	Z+6, r24	; 0x06
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:247
  (*_hwserial_module).CTRLA &= ~(USART_RXCIE_bm | USART_DREIE_bm);
     372:	ec 85       	ldd	r30, Y+12	; 0x0c
     374:	fd 85       	ldd	r31, Y+13	; 0x0d
     376:	85 81       	ldd	r24, Z+5	; 0x05
     378:	8f 75       	andi	r24, 0x5F	; 95
     37a:	85 83       	std	Z+5, r24	; 0x05
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:250

  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     37c:	8f 89       	ldd	r24, Y+23	; 0x17
     37e:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:253

  // Note: Does not change output pins
  _written = false;
     380:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:254
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <UartClass::swap(unsigned char)>:
_ZN9UartClass4swapEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:161
  _pin_set = 0; // Default to standard
  return false;
}

bool UartClass::swap(uint8_t state)
{
     388:	fc 01       	movw	r30, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:162
  if (state == 1) // Use alternative pin position
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	19 f4       	brne	.+6      	; 0x394 <UartClass::swap(unsigned char)+0xc>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:164
  {
    _pin_set = state;
     38e:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:170
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
    return true;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:169
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
     394:	14 8a       	std	Z+20, r1	; 0x14
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:167
  if (state == 1) // Use alternative pin position
  {
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
     396:	66 23       	and	r22, r22
     398:	d9 f3       	breq	.-10     	; 0x390 <UartClass::swap(unsigned char)+0x8>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:175
    return true;
  }
  else // Invalid swap value. Use default position
  {
    _pin_set = 0;
    return false;
     39a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:177
  }
}
     39c:	08 95       	ret

0000039e <UartClass::pins(unsigned char, unsigned char)>:
_ZN9UartClass4pinsEhh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:147

// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
     39e:	dc 01       	movw	r26, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:148
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     3a0:	54 96       	adiw	r26, 0x14	; 20
     3a2:	1c 92       	st	X, r1
     3a4:	54 97       	sbiw	r26, 0x14	; 20
     3a6:	54 96       	adiw	r26, 0x14	; 20
     3a8:	8c 91       	ld	r24, X
     3aa:	54 97       	sbiw	r26, 0x14	; 20
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	a0 f4       	brcc	.+40     	; 0x3d8 <UartClass::pins(unsigned char, unsigned char)+0x3a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:150
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
     3b0:	28 2f       	mov	r18, r24
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	e2 0f       	add	r30, r18
     3bc:	f3 1f       	adc	r31, r19
     3be:	ea 0f       	add	r30, r26
     3c0:	fb 1f       	adc	r31, r27
     3c2:	97 85       	ldd	r25, Z+15	; 0x0f
     3c4:	96 13       	cpse	r25, r22
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <UartClass::pins(unsigned char, unsigned char)+0x30>
     3c8:	96 85       	ldd	r25, Z+14	; 0x0e
     3ca:	94 17       	cp	r25, r20
     3cc:	49 f0       	breq	.+18     	; 0x3e0 <UartClass::pins(unsigned char, unsigned char)+0x42>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:148
// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	54 96       	adiw	r26, 0x14	; 20
     3d2:	8c 93       	st	X, r24
     3d4:	54 97       	sbiw	r26, 0x14	; 20
     3d6:	e7 cf       	rjmp	.-50     	; 0x3a6 <UartClass::pins(unsigned char, unsigned char)+0x8>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:156
    {
      // We are good, this set of pins is supported
      return true;
    }
  }
  _pin_set = 0; // Default to standard
     3d8:	54 96       	adiw	r26, 0x14	; 20
     3da:	1c 92       	st	X, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:157
  return false;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:153
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
    {
      // We are good, this set of pins is supported
      return true;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:158
    }
  }
  _pin_set = 0; // Default to standard
  return false;
}
     3e2:	08 95       	ret

000003e4 <UartClass::_tx_data_empty_irq()>:
_ZN9UartClass18_tx_data_empty_irqEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:89
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_tx_data_empty_irq(void)
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	fc 01       	movw	r30, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:91
  // Check if tx buffer already empty.
  if (_tx_buffer_head == _tx_buffer_tail)
     3ea:	90 8d       	ldd	r25, Z+24	; 0x18
     3ec:	81 8d       	ldd	r24, Z+25	; 0x19
     3ee:	c4 85       	ldd	r28, Z+12	; 0x0c
     3f0:	d5 85       	ldd	r29, Z+13	; 0x0d
     3f2:	98 13       	cpse	r25, r24
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:94
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     3f6:	8d 81       	ldd	r24, Y+5	; 0x05
     3f8:	8f 7d       	andi	r24, 0xDF	; 223
     3fa:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:122
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
      _hwserial_dre_interrupt_elevated = 0;
    }
  }
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:100
    return;
  }

  // There must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     402:	a1 8d       	ldd	r26, Z+25	; 0x19
     404:	ae 0f       	add	r26, r30
     406:	bf 2f       	mov	r27, r31
     408:	b1 1d       	adc	r27, r1
     40a:	a3 5a       	subi	r26, 0xA3	; 163
     40c:	bf 4f       	sbci	r27, 0xFF	; 255
     40e:	2c 91       	ld	r18, X
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:101
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     410:	81 8d       	ldd	r24, Z+25	; 0x19
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	8f 73       	andi	r24, 0x3F	; 63
     418:	99 27       	eor	r25, r25
     41a:	81 8f       	std	Z+25, r24	; 0x19
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:106

  // clear the TXCIF flag -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  (*_hwserial_module).STATUS = USART_TXCIF_bm;
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:108

  (*_hwserial_module).TXDATAL = c;
     420:	a4 85       	ldd	r26, Z+12	; 0x0c
     422:	b5 85       	ldd	r27, Z+13	; 0x0d
     424:	12 96       	adiw	r26, 0x02	; 2
     426:	2c 93       	st	X, r18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:110

  if (_tx_buffer_head == _tx_buffer_tail)
     428:	90 8d       	ldd	r25, Z+24	; 0x18
     42a:	81 8d       	ldd	r24, Z+25	; 0x19
     42c:	98 13       	cpse	r25, r24
     42e:	e6 cf       	rjmp	.-52     	; 0x3fc <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:113
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     430:	a4 85       	ldd	r26, Z+12	; 0x0c
     432:	b5 85       	ldd	r27, Z+13	; 0x0d
     434:	15 96       	adiw	r26, 0x05	; 5
     436:	8c 91       	ld	r24, X
     438:	15 97       	sbiw	r26, 0x05	; 5
     43a:	8f 7d       	andi	r24, 0xDF	; 223
     43c:	15 96       	adiw	r26, 0x05	; 5
     43e:	8c 93       	st	X, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:116

    //Take the DRE interrupt back no normal priority level if it has been elevated
    if (_hwserial_dre_interrupt_elevated)
     440:	83 8d       	ldd	r24, Z+27	; 0x1b
     442:	88 23       	and	r24, r24
     444:	d9 f2       	breq	.-74     	; 0x3fc <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:118
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
     446:	84 8d       	ldd	r24, Z+28	; 0x1c
     448:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:119
      _hwserial_dre_interrupt_elevated = 0;
     44c:	13 8e       	std	Z+27, r1	; 0x1b
     44e:	d6 cf       	rjmp	.-84     	; 0x3fc <UartClass::_tx_data_empty_irq()+0x18>

00000450 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:126
  }
}

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void)
{
     450:	dc 01       	movw	r26, r24
     452:	1c 96       	adiw	r26, 0x0c	; 12
     454:	ed 91       	ld	r30, X+
     456:	fc 91       	ld	r31, X
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:127
  if ((!(SREG & CPU_I_bm)) || (!((*_hwserial_module).CTRLA & USART_DREIE_bm)))
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	07 fe       	sbrs	r0, 7
     45c:	03 c0       	rjmp	.+6      	; 0x464 <UartClass::_poll_tx_data_empty()+0x14>
     45e:	25 81       	ldd	r18, Z+5	; 0x05
     460:	25 fd       	sbrc	r18, 5
     462:	04 c0       	rjmp	.+8      	; 0x46c <UartClass::_poll_tx_data_empty()+0x1c>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:135
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.

    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm)
     464:	24 81       	ldd	r18, Z+4	; 0x04
     466:	25 fd       	sbrc	r18, 5
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:137
    {
      _tx_data_empty_irq();
     468:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <UartClass::_tx_data_empty_irq()>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:141
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
}
     46c:	08 95       	ret

0000046e <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:336
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}

size_t UartClass::write(uint8_t c)
{
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:337
  _written = true;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8d 8b       	std	Y+21, r24	; 0x15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:343

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm))
     480:	98 8d       	ldd	r25, Y+24	; 0x18
     482:	89 8d       	ldd	r24, Y+25	; 0x19
     484:	98 13       	cpse	r25, r24
     486:	1c c0       	rjmp	.+56     	; 0x4c0 <UartClass::write(unsigned char)+0x52>
     488:	ac 85       	ldd	r26, Y+12	; 0x0c
     48a:	bd 85       	ldd	r27, Y+13	; 0x0d
     48c:	14 96       	adiw	r26, 0x04	; 4
     48e:	8c 91       	ld	r24, X
     490:	14 97       	sbiw	r26, 0x04	; 4
     492:	85 ff       	sbrs	r24, 5
     494:	15 c0       	rjmp	.+42     	; 0x4c0 <UartClass::write(unsigned char)+0x52>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:345
  {
    (*_hwserial_module).TXDATAL = c;
     496:	12 96       	adiw	r26, 0x02	; 2
     498:	6c 93       	st	X, r22
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:346
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     49a:	ac 85       	ldd	r26, Y+12	; 0x0c
     49c:	bd 85       	ldd	r27, Y+13	; 0x0d
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	14 96       	adiw	r26, 0x04	; 4
     4a2:	8c 93       	st	X, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:350

    // Make sure data register empty interrupt is disabled to avoid
    // that the interrupt handler is called in this situation
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     4a4:	ec 85       	ldd	r30, Y+12	; 0x0c
     4a6:	fd 85       	ldd	r31, Y+13	; 0x0d
     4a8:	85 81       	ldd	r24, Z+5	; 0x05
     4aa:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:380

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     4ac:	85 83       	std	Z+5, r24	; 0x05
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:383

  return 1;
}
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:357
    return 1;
  }

  //Check if we are inside an ISR already (could be from by a source other than UART),
  // in which case the UART ISRs will be blocked.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     4c0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     4c4:	80 ff       	sbrs	r24, 0
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <UartClass::write(unsigned char)+0x6a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:361
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     4c8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     4cc:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:362
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     4ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:364

    _hwserial_dre_interrupt_elevated = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	8b 8f       	std	Y+27, r24	; 0x1b
     4d8:	f6 2e       	mov	r15, r22
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:367
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     4da:	08 8d       	ldd	r16, Y+24	; 0x18
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	0f 5f       	subi	r16, 0xFF	; 255
     4e0:	1f 4f       	sbci	r17, 0xFF	; 255
     4e2:	0f 73       	andi	r16, 0x3F	; 63
     4e4:	11 27       	eor	r17, r17
     4e6:	e0 2e       	mov	r14, r16
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:371

  //If the output buffer is full, there's nothing for it other than to
  //wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail)
     4e8:	89 8d       	ldd	r24, Y+25	; 0x19
     4ea:	8e 11       	cpse	r24, r14
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <UartClass::write(unsigned char)+0x88>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:373
  {
    _poll_tx_data_empty();
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 28 02 	call	0x450	; 0x450 <UartClass::_poll_tx_data_empty()>
     4f4:	f9 cf       	rjmp	.-14     	; 0x4e8 <UartClass::write(unsigned char)+0x7a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:376
  }

  _tx_buffer[_tx_buffer_head] = c;
     4f6:	e8 8d       	ldd	r30, Y+24	; 0x18
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 2f       	mov	r31, r29
     4fc:	f1 1d       	adc	r31, r1
     4fe:	e3 5a       	subi	r30, 0xA3	; 163
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	f0 82       	st	Z, r15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:377
  _tx_buffer_head = i;
     504:	08 8f       	std	Y+24, r16	; 0x18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:380

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     506:	ec 85       	ldd	r30, Y+12	; 0x0c
     508:	fd 85       	ldd	r31, Y+13	; 0x0d
     50a:	85 81       	ldd	r24, Z+5	; 0x05
     50c:	80 62       	ori	r24, 0x20	; 32
     50e:	ce cf       	rjmp	.-100    	; 0x4ac <UartClass::write(unsigned char)+0x3e>

00000510 <UartClass::flush()>:
_ZN9UartClass5flushEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:303
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void UartClass::flush()
{
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:307
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     514:	fc 01       	movw	r30, r24
     516:	25 89       	ldd	r18, Z+21	; 0x15
     518:	22 23       	and	r18, r18
     51a:	c9 f0       	breq	.+50     	; 0x54e <UartClass::flush()+0x3e>
     51c:	ec 01       	movw	r28, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:314
    return;
  }

  //Check if we are inside an ISR already (e.g. connected to a different peripheral then UART), in which case the UART ISRs will not be called.
  //Temporarily elevate the DRE interrupt to allow it to run.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     51e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     522:	80 ff       	sbrs	r24, 0
     524:	08 c0       	rjmp	.+16     	; 0x536 <UartClass::flush()+0x26>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:318
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     526:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     52a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:319
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     52c:	82 8d       	ldd	r24, Z+26	; 0x1a
     52e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:321

    _hwserial_dre_interrupt_elevated = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	83 8f       	std	Z+27, r24	; 0x1b
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:325
  }

  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm)))
     536:	ec 85       	ldd	r30, Y+12	; 0x0c
     538:	fd 85       	ldd	r31, Y+13	; 0x0d
     53a:	85 81       	ldd	r24, Z+5	; 0x05
     53c:	85 fd       	sbrc	r24, 5
     53e:	03 c0       	rjmp	.+6      	; 0x546 <UartClass::flush()+0x36>
     540:	84 81       	ldd	r24, Z+4	; 0x04
     542:	86 fd       	sbrc	r24, 6
     544:	04 c0       	rjmp	.+8      	; 0x54e <UartClass::flush()+0x3e>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:329
  {
    // If interrupts are globally disabled or the and DR empty interrupt is disabled,
    // poll the "data register empty" interrupt flag to prevent deadlock
    _poll_tx_data_empty();
     546:	ce 01       	movw	r24, r28
     548:	0e 94 28 02 	call	0x450	; 0x450 <UartClass::_poll_tx_data_empty()>
     54c:	f4 cf       	rjmp	.-24     	; 0x536 <UartClass::flush()+0x26>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:333
  }
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	89 2b       	or	r24, r25
     55a:	29 f0       	breq	.+10     	; 0x566 <serialEventRun()+0x12>
     55c:	0e 94 a1 01 	call	0x342	; 0x342 <Serial0_available()>
     560:	81 11       	cpse	r24, r1
     562:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	89 2b       	or	r24, r25
     56c:	49 f0       	breq	.+18     	; 0x580 <serialEventRun()+0x2c>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	89 2b       	or	r24, r25
     574:	29 f0       	breq	.+10     	; 0x580 <serialEventRun()+0x2c>
     576:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     57a:	81 11       	cpse	r24, r1
     57c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	49 f0       	breq	.+18     	; 0x59a <serialEventRun()+0x46>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	89 2b       	or	r24, r25
     58e:	29 f0       	breq	.+10     	; 0x59a <serialEventRun()+0x46>
     590:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     594:	81 11       	cpse	r24, r1
     596:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:75
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <serialEventRun()+0x60>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	89 2b       	or	r24, r25
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <serialEventRun()+0x60>
     5aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5ae:	81 11       	cpse	r24, r1
     5b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:77
#endif
}
     5b4:	08 95       	ret

000005b6 <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.h:174
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() { return true; }
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret

000005ba <pinMode.part.1>:
pinMode.part.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:29

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:31
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	fc 01       	movw	r30, r24
     5c2:	e0 5c       	subi	r30, 0xC0	; 192
     5c4:	f7 48       	sbci	r31, 0x87	; 135
     5c6:	20 81       	ld	r18, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP))
     5c8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ca:	69 f0       	breq	.+26     	; 0x5e6 <pinMode.part.1+0x2c>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:36
    return;

  PORT_t *port = digitalPinToPortStruct(pin);
     5cc:	fc 01       	movw	r30, r24
     5ce:	e9 5e       	subi	r30, 0xE9	; 233
     5d0:	f7 48       	sbci	r31, 0x87	; 135
     5d2:	a0 81       	ld	r26, Z
     5d4:	30 e2       	ldi	r19, 0x20	; 32
     5d6:	a3 9f       	mul	r26, r19
     5d8:	d0 01       	movw	r26, r0
     5da:	11 24       	eor	r1, r1
     5dc:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:40
  if (port == NULL)
    return;

  if (mode == OUTPUT)
     5de:	61 30       	cpi	r22, 0x01	; 1
     5e0:	29 f4       	brne	.+10     	; 0x5ec <pinMode.part.1+0x32>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:43
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
     5e2:	11 96       	adiw	r26, 0x01	; 1
     5e4:	2c 93       	st	X, r18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:48
    port->DIRSET = bit_mask;
  }
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
     5ec:	89 5a       	subi	r24, 0xA9	; 169
     5ee:	98 48       	sbci	r25, 0x88	; 136
     5f0:	ec 01       	movw	r28, r24
     5f2:	e8 81       	ld	r30, Y
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:50
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     5f4:	ef 3f       	cpi	r30, 0xFF	; 255
     5f6:	81 f0       	breq	.+32     	; 0x618 <pinMode.part.1+0x5e>
     5f8:	cd 01       	movw	r24, r26
     5fa:	40 96       	adiw	r24, 0x10	; 16
     5fc:	e8 0f       	add	r30, r24
     5fe:	f9 2f       	mov	r31, r25
     600:	f1 1d       	adc	r31, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:53

    /* Save state */
    uint8_t status = SREG;
     602:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:54
    cli();
     604:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:57

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
     606:	12 96       	adiw	r26, 0x02	; 2
     608:	2c 93       	st	X, r18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:63

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     60a:	80 81       	ld	r24, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:60

    /* Configure direction as input */
    port->DIRCLR = bit_mask;

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
     60c:	62 30       	cpi	r22, 0x02	; 2
     60e:	39 f4       	brne	.+14     	; 0x61e <pinMode.part.1+0x64>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:63
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     610:	88 60       	ori	r24, 0x08	; 8
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     612:	80 83       	st	Z, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:73
    }

    /* Restore state */
    SREG = status;
     614:	9f bf       	out	0x3f, r25	; 63
     616:	e7 cf       	rjmp	.-50     	; 0x5e6 <pinMode.part.1+0x2c>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:50
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	e0 e0       	ldi	r30, 0x00	; 0
     61c:	f2 cf       	rjmp	.-28     	; 0x602 <pinMode.part.1+0x48>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     61e:	87 7f       	andi	r24, 0xF7	; 247
     620:	f8 cf       	rjmp	.-16     	; 0x612 <pinMode.part.1+0x58>

00000622 <pinMode>:
pinMode():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     622:	89 32       	cpi	r24, 0x29	; 41
     624:	10 f4       	brcc	.+4      	; 0x62a <pinMode+0x8>
     626:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <pinMode.part.1>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     62a:	08 95       	ret

0000062c <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	e2 5d       	subi	r30, 0xD2	; 210
     632:	f8 48       	sbci	r31, 0x88	; 136
     634:	e0 81       	ld	r30, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:98
  if (timer == NOT_ON_TIMER)
     636:	ee 23       	and	r30, r30
     638:	19 f1       	breq	.+70     	; 0x680 <turnOffPWM.part.0+0x54>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:104
    return;

  uint8_t bit_pos;
  TCB_t *timerB;

  switch (timer)
     63a:	e1 30       	cpi	r30, 0x01	; 1
     63c:	21 f0       	breq	.+8      	; 0x646 <turnOffPWM.part.0+0x1a>
     63e:	00 f1       	brcs	.+64     	; 0x680 <turnOffPWM.part.0+0x54>
     640:	e6 30       	cpi	r30, 0x06	; 6
     642:	a8 f0       	brcs	.+42     	; 0x66e <turnOffPWM.part.0+0x42>
     644:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:109
  {
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);
     646:	89 5a       	subi	r24, 0xA9	; 169
     648:	98 48       	sbci	r25, 0x88	; 136
     64a:	fc 01       	movw	r30, r24
     64c:	20 81       	ld	r18, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:112

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
     64e:	23 30       	cpi	r18, 0x03	; 3
     650:	08 f0       	brcs	.+2      	; 0x654 <turnOffPWM.part.0+0x28>
     652:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:113
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     654:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	01 c0       	rjmp	.+2      	; 0x660 <turnOffPWM.part.0+0x34>
     65e:	88 0f       	add	r24, r24
     660:	2a 95       	dec	r18
     662:	ea f7       	brpl	.-6      	; 0x65e <turnOffPWM.part.0+0x32>
     664:	80 95       	com	r24
     666:	83 23       	and	r24, r19
     668:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     66c:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:123
    case TIMERB0:
    case TIMERB1:
    case TIMERB2:
    case TIMERB3:

      timerB = (TCB_t *)&TCB0 + (timer - TIMERB0);
     66e:	80 e1       	ldi	r24, 0x10	; 16
     670:	e8 9f       	mul	r30, r24
     672:	f0 01       	movw	r30, r0
     674:	11 24       	eor	r1, r1
     676:	e0 5a       	subi	r30, 0xA0	; 160
     678:	f5 4f       	sbci	r31, 0xF5	; 245
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:126

      /* Disable TCB compare channel */
      timerB->CTRLB &= ~(TCB_CCMPEN_bm);
     67a:	81 81       	ldd	r24, Z+1	; 0x01
     67c:	8f 7e       	andi	r24, 0xEF	; 239
     67e:	81 83       	std	Z+1, r24	; 0x01
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:132

      break;
    default:
      break;
  }
}
     680:	08 95       	ret

00000682 <digitalWrite.part.2>:
digitalWrite.part.2():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:134

void digitalWrite(uint8_t pin, uint8_t val)
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:137
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     68a:	c8 2f       	mov	r28, r24
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	fe 01       	movw	r30, r28
     690:	e0 5c       	subi	r30, 0xC0	; 192
     692:	f7 48       	sbci	r31, 0x87	; 135
     694:	00 81       	ld	r16, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:138
  if (bit_mask == NOT_A_PIN)
     696:	0f 3f       	cpi	r16, 0xFF	; 255
     698:	a1 f0       	breq	.+40     	; 0x6c2 <digitalWrite.part.2+0x40>
     69a:	16 2f       	mov	r17, r22
turnOffPWM():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     69c:	89 32       	cpi	r24, 0x29	; 41
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <digitalWrite.part.2+0x22>
     6a0:	0e 94 16 03 	call	0x62c	; 0x62c <turnOffPWM.part.0>
digitalWrite.part.2():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:150
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
     6a4:	fe 01       	movw	r30, r28
     6a6:	e9 5e       	subi	r30, 0xE9	; 233
     6a8:	f7 48       	sbci	r31, 0x87	; 135
     6aa:	e0 81       	ld	r30, Z
     6ac:	80 e2       	ldi	r24, 0x20	; 32
     6ae:	e8 9f       	mul	r30, r24
     6b0:	f0 01       	movw	r30, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:153

  /* Output direction */
  if (port->DIR & bit_mask)
     6b6:	80 81       	ld	r24, Z
     6b8:	80 23       	and	r24, r16
     6ba:	51 f0       	breq	.+20     	; 0x6d0 <digitalWrite.part.2+0x4e>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:156
  {
    /* Set output to value */
    if (val == LOW)
     6bc:	11 11       	cpse	r17, r1
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <digitalWrite.part.2+0x4a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:158
    { /* If LOW */
      port->OUTCLR = bit_mask;
     6c0:	06 83       	std	Z+6, r16	; 0x06
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
     6cc:	05 83       	std	Z+5, r16	; 0x05
     6ce:	f9 cf       	rjmp	.-14     	; 0x6c2 <digitalWrite.part.2+0x40>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:180
    pull up is enabled if this function is called.
    Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     6d0:	c9 5a       	subi	r28, 0xA9	; 169
     6d2:	d8 48       	sbci	r29, 0x88	; 136
     6d4:	88 81       	ld	r24, Y
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:183

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     6d6:	30 97       	sbiw	r30, 0x00	; 0
     6d8:	71 f0       	breq	.+28     	; 0x6f6 <digitalWrite.part.2+0x74>
     6da:	8f 3f       	cpi	r24, 0xFF	; 255
     6dc:	61 f0       	breq	.+24     	; 0x6f6 <digitalWrite.part.2+0x74>
     6de:	70 96       	adiw	r30, 0x10	; 16
     6e0:	e8 0f       	add	r30, r24
     6e2:	f1 1d       	adc	r31, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:186

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     6e4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:187
    cli();
     6e6:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:192

    if (val == LOW)
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     6e8:	80 81       	ld	r24, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:189

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW)
     6ea:	11 11       	cpse	r17, r1
     6ec:	07 c0       	rjmp	.+14     	; 0x6fc <digitalWrite.part.2+0x7a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:192
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     6ee:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:197
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     6f0:	80 83       	st	Z, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
     6f2:	9f bf       	out	0x3f, r25	; 63
     6f4:	e6 cf       	rjmp	.-52     	; 0x6c2 <digitalWrite.part.2+0x40>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:183

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	e0 e0       	ldi	r30, 0x00	; 0
     6fa:	f4 cf       	rjmp	.-24     	; 0x6e4 <digitalWrite.part.2+0x62>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     6fc:	88 60       	ori	r24, 0x08	; 8
     6fe:	f8 cf       	rjmp	.-16     	; 0x6f0 <digitalWrite.part.2+0x6e>

00000700 <digitalWrite>:
digitalWrite():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:137
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     700:	89 32       	cpi	r24, 0x29	; 41
     702:	10 f4       	brcc	.+4      	; 0x708 <digitalWrite+0x8>
     704:	0c 94 41 03 	jmp	0x682	; 0x682 <digitalWrite.part.2>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
     708:	08 95       	ret

0000070a <TM1637::stop() [clone .constprop.59]>:
_ZN6TM16374stopEv.constprop.59():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:173
    digitalWrite(datapin, LOW);
    digitalWrite(clkpin, LOW);
}

// End of transmission (stop = when both pins goes high)
void TM1637::stop(void) {
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:174
    digitalWrite(clkpin, LOW);
     70e:	c4 e4       	ldi	r28, 0x44	; 68
     710:	d9 e2       	ldi	r29, 0x29	; 41
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8e 81       	ldd	r24, Y+6	; 0x06
     716:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:175
    digitalWrite(datapin, LOW);
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	8f 81       	ldd	r24, Y+7	; 0x07
     71e:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:176
    digitalWrite(clkpin, HIGH);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	8e 81       	ldd	r24, Y+6	; 0x06
     726:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:177
    digitalWrite(datapin, HIGH);
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:178
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:177
// End of transmission (stop = when both pins goes high)
void TM1637::stop(void) {
    digitalWrite(clkpin, LOW);
    digitalWrite(datapin, LOW);
    digitalWrite(clkpin, HIGH);
    digitalWrite(datapin, HIGH);
     732:	0c 94 80 03 	jmp	0x700	; 0x700 <digitalWrite>

00000736 <TM1637::start() [clone .constprop.57]>:
_ZN6TM16375startEv.constprop.57():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:165

    return ack;
}

// Send start signal to TM1637 (start = when both pins goes low)
void TM1637::start(void) {
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:166
    digitalWrite(clkpin, HIGH);
     73a:	c4 e4       	ldi	r28, 0x44	; 68
     73c:	d9 e2       	ldi	r29, 0x29	; 41
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	8e 81       	ldd	r24, Y+6	; 0x06
     742:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:167
    digitalWrite(datapin, HIGH);
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	8f 81       	ldd	r24, Y+7	; 0x07
     74a:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:168
    digitalWrite(datapin, LOW);
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	8f 81       	ldd	r24, Y+7	; 0x07
     752:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:169
    digitalWrite(clkpin, LOW);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	8e 81       	ldd	r24, Y+6	; 0x06
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:170
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:169
// Send start signal to TM1637 (start = when both pins goes low)
void TM1637::start(void) {
    digitalWrite(clkpin, HIGH);
    digitalWrite(datapin, HIGH);
    digitalWrite(datapin, LOW);
    digitalWrite(clkpin, LOW);
     75e:	0c 94 80 03 	jmp	0x700	; 0x700 <digitalWrite>

00000762 <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:180
    return false;
  }
}

void UartClass::begin(unsigned long baud, uint16_t config)
{
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	ec 01       	movw	r28, r24
     778:	6a 01       	movw	r12, r20
     77a:	7b 01       	movw	r14, r22
     77c:	a2 2e       	mov	r10, r18
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:183
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_written)
     77e:	8d 89       	ldd	r24, Y+21	; 0x15
     780:	88 23       	and	r24, r24
     782:	39 f0       	breq	.+14     	; 0x792 <UartClass::begin(unsigned long, unsigned int)+0x30>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:185
  {
    this->end();
     784:	e8 81       	ld	r30, Y
     786:	f9 81       	ldd	r31, Y+1	; 0x01
     788:	06 88       	ldd	r0, Z+22	; 0x16
     78a:	f7 89       	ldd	r31, Z+23	; 0x17
     78c:	e0 2d       	mov	r30, r0
     78e:	ce 01       	movw	r24, r28
     790:	09 95       	icall
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:188
  }

  struct UartPinSet *set = &_hw_set[_pin_set];
     792:	0c 89       	ldd	r16, Y+20	; 0x14
     794:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:193

  int32_t baud_setting = 0;

  //Make sure global interrupts are disabled during initialization
  uint8_t oldSREG = SREG;
     796:	bf b6       	in	r11, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:194
  cli();
     798:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:196

  baud_setting = (((8 * F_CPU) / baud) + 1) / 2;
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	78 e6       	ldi	r23, 0x68	; 104
     79e:	89 e8       	ldi	r24, 0x89	; 137
     7a0:	99 e0       	ldi	r25, 0x09	; 9
     7a2:	a7 01       	movw	r20, r14
     7a4:	96 01       	movw	r18, r12
     7a6:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
     7aa:	69 01       	movw	r12, r18
     7ac:	7a 01       	movw	r14, r20
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	c8 1a       	sub	r12, r24
     7b2:	d8 0a       	sbc	r13, r24
     7b4:	e8 0a       	sbc	r14, r24
     7b6:	f8 0a       	sbc	r15, r24
     7b8:	f6 94       	lsr	r15
     7ba:	e7 94       	ror	r14
     7bc:	d7 94       	ror	r13
     7be:	c7 94       	ror	r12
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:198
  // Disable CLK2X
  (*_hwserial_module).CTRLB &= (~USART_RXMODE_CLK2X_gc);
     7c0:	ec 85       	ldd	r30, Y+12	; 0x0c
     7c2:	fd 85       	ldd	r31, Y+13	; 0x0d
     7c4:	86 81       	ldd	r24, Z+6	; 0x06
     7c6:	8d 7f       	andi	r24, 0xFD	; 253
     7c8:	86 83       	std	Z+6, r24	; 0x06
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:199
  (*_hwserial_module).CTRLB |= USART_RXMODE_NORMAL_gc;
     7ca:	ec 85       	ldd	r30, Y+12	; 0x0c
     7cc:	fd 85       	ldd	r31, Y+13	; 0x0d
     7ce:	86 81       	ldd	r24, Z+6	; 0x06
     7d0:	86 83       	std	Z+6, r24	; 0x06
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:201

  _written = false;
     7d2:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:208
  int8_t sigrow_val = 0;

// Use error compensation if internal oscillator is used
#if !defined(USE_EXTERNAL_OSCILLATOR)
#if F_CPU == 20000000L
  sigrow_val = SIGROW.OSC20ERR5V;
     7d4:	a0 91 25 11 	lds	r26, 0x1125	; 0x801125 <__TEXT_REGION_LENGTH__+0x7f5125>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:214
#else
  sigrow_val = SIGROW.OSC16ERR5V;
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
     7d8:	0a 2e       	mov	r0, r26
     7da:	00 0c       	add	r0, r0
     7dc:	bb 0b       	sbc	r27, r27
     7de:	a7 01       	movw	r20, r14
     7e0:	96 01       	movw	r18, r12
     7e2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulshisi3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	34 e0       	ldi	r19, 0x04	; 4
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     7f2:	ec 85       	ldd	r30, Y+12	; 0x0c
     7f4:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:214
#else
  sigrow_val = SIGROW.OSC16ERR5V;
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
     7f6:	c2 0e       	add	r12, r18
     7f8:	d3 1e       	adc	r13, r19
     7fa:	e4 1e       	adc	r14, r20
     7fc:	f5 1e       	adc	r15, r21
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     7fe:	c0 86       	std	Z+8, r12	; 0x08
     800:	d1 86       	std	Z+9, r13	; 0x09
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:220

  // Set USART mode of operation
  (*_hwserial_module).CTRLC = config;
     802:	ec 85       	ldd	r30, Y+12	; 0x0c
     804:	fd 85       	ldd	r31, Y+13	; 0x0d
     806:	a7 82       	std	Z+7, r10	; 0x07
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:223

  // Enable transmitter and receiver
  (*_hwserial_module).CTRLB |= (USART_RXEN_bm | USART_TXEN_bm);
     808:	ec 85       	ldd	r30, Y+12	; 0x0c
     80a:	fd 85       	ldd	r31, Y+13	; 0x0d
     80c:	86 81       	ldd	r24, Z+6	; 0x06
     80e:	80 6c       	ori	r24, 0xC0	; 192
     810:	86 83       	std	Z+6, r24	; 0x06
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:225

  (*_hwserial_module).CTRLA |= USART_RXCIE_bm;
     812:	ec 85       	ldd	r30, Y+12	; 0x0c
     814:	fd 85       	ldd	r31, Y+13	; 0x0d
     816:	85 81       	ldd	r24, Z+5	; 0x05
     818:	80 68       	ori	r24, 0x80	; 128
     81a:	85 83       	std	Z+5, r24	; 0x05
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:228

  // Let PORTMUX point to alternative UART pins as requested
  PORTMUX.USARTROUTEA = set->mux | (PORTMUX.USARTROUTEA & ~_hw_set[1].mux);
     81c:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
     820:	8b 89       	ldd	r24, Y+19	; 0x13
     822:	80 95       	com	r24
     824:	89 23       	and	r24, r25
     826:	98 01       	movw	r18, r16
     828:	22 0f       	add	r18, r18
     82a:	33 1f       	adc	r19, r19
     82c:	02 0f       	add	r16, r18
     82e:	13 1f       	adc	r17, r19
     830:	c0 0f       	add	r28, r16
     832:	d1 1f       	adc	r29, r17
     834:	98 89       	ldd	r25, Y+16	; 0x10
     836:	89 2b       	or	r24, r25
     838:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:231

  // Set pin state for swapped UART pins
  pinMode(set->rx_pin, INPUT_PULLUP);
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	8e 85       	ldd	r24, Y+14	; 0x0e
     840:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:232
  digitalWrite(set->tx_pin, HIGH);
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	8f 85       	ldd	r24, Y+15	; 0x0f
     848:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:233
  pinMode(set->tx_pin, OUTPUT);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	8f 85       	ldd	r24, Y+15	; 0x0f
     850:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:236

  // Restore SREG content
  SREG = oldSREG;
     854:	bf be       	out	0x3f, r11	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.cpp:237
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	08 95       	ret

0000086c <digitalRead.part.3>:
digitalRead.part.3():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:224
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
}

uint8_t digitalRead(uint8_t pin)
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:227
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     872:	08 2f       	mov	r16, r24
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	f8 01       	movw	r30, r16
     878:	e0 5c       	subi	r30, 0xC0	; 192
     87a:	f7 48       	sbci	r31, 0x87	; 135
     87c:	c0 81       	ld	r28, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:228
  if (bit_mask == NOT_A_PIN)
     87e:	cf 3f       	cpi	r28, 0xFF	; 255
     880:	89 f0       	breq	.+34     	; 0x8a4 <digitalRead.part.3+0x38>
turnOffPWM():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     882:	89 32       	cpi	r24, 0x29	; 41
     884:	10 f4       	brcc	.+4      	; 0x88a <digitalRead.part.3+0x1e>
     886:	0e 94 16 03 	call	0x62c	; 0x62c <turnOffPWM.part.0>
digitalRead.part.3():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:236
  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
     88a:	f8 01       	movw	r30, r16
     88c:	e9 5e       	subi	r30, 0xE9	; 233
     88e:	f7 48       	sbci	r31, 0x87	; 135
     890:	e0 81       	ld	r30, Z
     892:	80 e2       	ldi	r24, 0x20	; 32
     894:	e8 9f       	mul	r30, r24
     896:	f0 01       	movw	r30, r0
     898:	11 24       	eor	r1, r1
     89a:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:239

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask)
     89c:	80 85       	ldd	r24, Z+8	; 0x08
     89e:	c8 23       	and	r28, r24
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <digitalRead.part.3+0x3a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:229
uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN)
    return LOW;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:245
    return HIGH;
  else
    return LOW;

  return LOW;
}
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <delayMicroseconds>:
	...
delayMicroseconds():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:213
  us = (us << 2) + us; // x5 us, = 7 cycles

  // account for the time taken in the preceeding commands.
  // we just burned 26 (28) cycles above, remove 7, (7*4=28)
  // us is at least 10 so we can substract 7
  us -= 7; // 2 cycles
     8b6:	9c 01       	movw	r18, r24
     8b8:	27 50       	subi	r18, 0x07	; 7
     8ba:	31 09       	sbc	r19, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:208
  if (us <= 1) return; //  = 3 cycles, (4 when true)

  // the following loop takes a 1/5 of a microsecond (4 cycles)
  // per iteration, so execute it five times for each microsecond of
  // delay requested.
  us = (us << 2) + us; // x5 us, = 7 cycles
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:213

  // account for the time taken in the preceeding commands.
  // we just burned 26 (28) cycles above, remove 7, (7*4=28)
  // us is at least 10 so we can substract 7
  us -= 7; // 2 cycles
     8c4:	82 0f       	add	r24, r18
     8c6:	93 1f       	adc	r25, r19
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:304
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__(
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <delayMicroseconds+0x1a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:312
      "brne 1b"
      : "=w"(us)
      : "0"(us) // 2 cycles
  );
  // return = 4 cycles
}
     8cc:	08 95       	ret

000008ce <TM1637::writeByte(signed char) [clone .constprop.58]>:
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:130

void TM1637::init(void) {
    clearDisplay();
}

int TM1637::writeByte(int8_t wr_data) {
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	d8 2f       	mov	r29, r24
     8d8:	c8 e0       	ldi	r28, 0x08	; 8
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:132
    for (uint8_t i = 0; i < 8; i++) { // Sent 8bit data
        digitalWrite(clkpin, LOW);
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <tm1637+0x6>
     8e0:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:134

        if (wr_data & 0x01) {
     8e4:	0d 2f       	mov	r16, r29
     8e6:	0d 2e       	mov	r0, r29
     8e8:	00 0c       	add	r0, r0
     8ea:	11 0b       	sbc	r17, r17
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:135
            digitalWrite(datapin, HIGH);    // LSB first
     8ec:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:134

int TM1637::writeByte(int8_t wr_data) {
    for (uint8_t i = 0; i < 8; i++) { // Sent 8bit data
        digitalWrite(clkpin, LOW);

        if (wr_data & 0x01) {
     8ee:	d0 ff       	sbrs	r29, 0
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:137
            digitalWrite(datapin, HIGH);    // LSB first
        } else {
            digitalWrite(datapin, LOW);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     8f6:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:140
        }

        wr_data >>= 1;
     8fa:	15 95       	asr	r17
     8fc:	07 95       	ror	r16
     8fe:	d0 2f       	mov	r29, r16
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:141
        digitalWrite(clkpin, HIGH);
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <tm1637+0x6>
     906:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
     90a:	c1 50       	subi	r28, 0x01	; 1
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:131
void TM1637::init(void) {
    clearDisplay();
}

int TM1637::writeByte(int8_t wr_data) {
    for (uint8_t i = 0; i < 8; i++) { // Sent 8bit data
     90c:	31 f7       	brne	.-52     	; 0x8da <TM1637::writeByte(signed char) [clone .constprop.58]+0xc>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:144

        wr_data >>= 1;
        digitalWrite(clkpin, HIGH);
    }

    digitalWrite(clkpin, LOW); // Wait for the ACK
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <tm1637+0x6>
     914:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:145
    digitalWrite(datapin, HIGH);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     91e:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:146
    digitalWrite(clkpin, HIGH);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <tm1637+0x6>
     928:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:147
    pinMode(datapin, INPUT);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     932:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
bitDelay():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:316

    return disp_data;
}

void TM1637::bitDelay(void) {
    delayMicroseconds(50);
     936:	82 e3       	ldi	r24, 0x32	; 50
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:150
    digitalWrite(datapin, HIGH);
    digitalWrite(clkpin, HIGH);
    pinMode(datapin, INPUT);

    bitDelay();
    uint8_t ack = digitalRead(datapin);
     93e:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
digitalRead():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_digital.c:227
}

uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     942:	89 32       	cpi	r24, 0x29	; 41
     944:	f8 f0       	brcs	.+62     	; 0x984 <TM1637::writeByte(signed char) [clone .constprop.58]+0xb6>
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:153

    if (ack == 0) {
        pinMode(datapin, OUTPUT);
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     94c:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:154
        digitalWrite(datapin, LOW);
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     956:	0e 94 80 03 	call	0x700	; 0x700 <digitalWrite>
     95a:	c0 e0       	ldi	r28, 0x00	; 0
bitDelay():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:316

    return disp_data;
}

void TM1637::bitDelay(void) {
    delayMicroseconds(50);
     95c:	82 e3       	ldi	r24, 0x32	; 50
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:158
        pinMode(datapin, OUTPUT);
        digitalWrite(datapin, LOW);
    }

    bitDelay();
    pinMode(datapin, OUTPUT);
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <tm1637+0x7>
     96a:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
bitDelay():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:316

    return disp_data;
}

void TM1637::bitDelay(void) {
    delayMicroseconds(50);
     96e:	82 e3       	ldi	r24, 0x32	; 50
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:162
    bitDelay();
    pinMode(datapin, OUTPUT);
    bitDelay();

    return ack;
}
     976:	8c 2f       	mov	r24, r28
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret
digitalRead():
     984:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
     988:	c8 2f       	mov	r28, r24
_ZN6TM16379writeByteEa.constprop.58():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:152
    pinMode(datapin, INPUT);

    bitDelay();
    uint8_t ack = digitalRead(datapin);

    if (ack == 0) {
     98a:	81 11       	cpse	r24, r1
     98c:	e7 cf       	rjmp	.-50     	; 0x95c <TM1637::writeByte(signed char) [clone .constprop.58]+0x8e>
     98e:	db cf       	rjmp	.-74     	; 0x946 <TM1637::writeByte(signed char) [clone .constprop.58]+0x78>

00000990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>:
_ZN6TM16377displayEha.constprop.55():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:207
    writeByte(cmd_disp_ctrl); // Control display
    stop();
}

//******************************************
void TM1637::display(uint8_t bit_addr, int8_t disp_data) {
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	d8 2f       	mov	r29, r24
     996:	e6 2f       	mov	r30, r22
coding():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:301
        disp_data[i] = coding(disp_data[i]);
    }
}

int8_t TM1637::coding(int8_t disp_data) {
    if (disp_data == 0x7f) {
     998:	6f 37       	cpi	r22, 0x7F	; 127
     99a:	d9 f1       	breq	.+118    	; 0xa12 <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x82>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:303
        disp_data = 0x00;    // Clear digit
    } else if (disp_data >= 0 && disp_data < int(sizeof(tube_tab) / sizeof(*tube_tab))) {
     99c:	60 31       	cpi	r22, 0x10	; 16
     99e:	40 f5       	brcc	.+80     	; 0x9f0 <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x60>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:304
        disp_data = tube_tab[disp_data];
     9a0:	0e 2e       	mov	r0, r30
     9a2:	00 0c       	add	r0, r0
     9a4:	ff 0b       	sbc	r31, r31
     9a6:	e7 51       	subi	r30, 0x17	; 23
     9a8:	f8 48       	sbci	r31, 0x88	; 136
     9aa:	80 81       	ld	r24, Z
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:310
    } else if (disp_data >= '0' && disp_data <= '9') {
        disp_data = tube_tab[int(disp_data) - 48];    // char to int (char "0" = ASCII 48)
    } else {
        disp_data = char2segments(disp_data);
    }
    disp_data += _PointFlag == POINT_ON ? 0x80 : 0;
     9ac:	90 91 47 29 	lds	r25, 0x2947	; 0x802947 <tm1637+0x3>
_ZN6TM16377displayEha.constprop.55():
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
coding():
     9b2:	91 11       	cpse	r25, r1
_ZN6TM16377displayEha.constprop.55():
     9b4:	c0 e8       	ldi	r28, 0x80	; 128
coding():
     9b6:	c8 0f       	add	r28, r24
_ZN6TM16377displayEha.constprop.55():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:211
//******************************************
void TM1637::display(uint8_t bit_addr, int8_t disp_data) {
    int8_t seg_data;

    seg_data = coding(disp_data);
    start();               // Start signal sent to TM1637 from MCU
     9b8:	0e 94 9b 03 	call	0x736	; 0x736 <TM1637::start() [clone .constprop.57]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:212
    writeByte(ADDR_FIXED); // Command1: Set data
     9bc:	84 e4       	ldi	r24, 0x44	; 68
     9be:	0e 94 67 04 	call	0x8ce	; 0x8ce <TM1637::writeByte(signed char) [clone .constprop.58]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:213
    stop();
     9c2:	0e 94 85 03 	call	0x70a	; 0x70a <TM1637::stop() [clone .constprop.59]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:214
    start();
     9c6:	0e 94 9b 03 	call	0x736	; 0x736 <TM1637::start() [clone .constprop.57]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:215
    writeByte(bit_addr | 0xc0); // Command2: Set data (fixed address)
     9ca:	8d 2f       	mov	r24, r29
     9cc:	80 6c       	ori	r24, 0xC0	; 192
     9ce:	0e 94 67 04 	call	0x8ce	; 0x8ce <TM1637::writeByte(signed char) [clone .constprop.58]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:216
    writeByte(seg_data);        // Transfer display data 8 bits
     9d2:	8c 2f       	mov	r24, r28
     9d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <TM1637::writeByte(signed char) [clone .constprop.58]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:217
    stop();
     9d8:	0e 94 85 03 	call	0x70a	; 0x70a <TM1637::stop() [clone .constprop.59]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:218
    start();
     9dc:	0e 94 9b 03 	call	0x736	; 0x736 <TM1637::start() [clone .constprop.57]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:219
    writeByte(cmd_disp_ctrl); // Control display
     9e0:	80 91 46 29 	lds	r24, 0x2946	; 0x802946 <tm1637+0x2>
     9e4:	0e 94 67 04 	call	0x8ce	; 0x8ce <TM1637::writeByte(signed char) [clone .constprop.58]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:221
    stop();
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:220
    writeByte(bit_addr | 0xc0); // Command2: Set data (fixed address)
    writeByte(seg_data);        // Transfer display data 8 bits
    stop();
    start();
    writeByte(cmd_disp_ctrl); // Control display
    stop();
     9ec:	0c 94 85 03 	jmp	0x70a	; 0x70a <TM1637::stop() [clone .constprop.59]>
coding():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:305
int8_t TM1637::coding(int8_t disp_data) {
    if (disp_data == 0x7f) {
        disp_data = 0x00;    // Clear digit
    } else if (disp_data >= 0 && disp_data < int(sizeof(tube_tab) / sizeof(*tube_tab))) {
        disp_data = tube_tab[disp_data];
    } else if (disp_data >= '0' && disp_data <= '9') {
     9f0:	80 ed       	ldi	r24, 0xD0	; 208
     9f2:	86 0f       	add	r24, r22
     9f4:	8a 30       	cpi	r24, 0x0A	; 10
     9f6:	30 f4       	brcc	.+12     	; 0xa04 <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x74>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:306
        disp_data = tube_tab[int(disp_data) - 48];    // char to int (char "0" = ASCII 48)
     9f8:	0e 2e       	mov	r0, r30
     9fa:	00 0c       	add	r0, r0
     9fc:	ff 0b       	sbc	r31, r31
     9fe:	e7 54       	subi	r30, 0x47	; 71
     a00:	f8 48       	sbci	r31, 0x88	; 136
     a02:	d3 cf       	rjmp	.-90     	; 0x9aa <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x1a>
     a04:	e0 52       	subi	r30, 0x20	; 32
     a06:	eb 35       	cpi	r30, 0x5B	; 91
     a08:	20 f4       	brcc	.+8      	; 0xa12 <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x82>
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	e2 57       	subi	r30, 0x72	; 114
     a0e:	f8 48       	sbci	r31, 0x88	; 136
     a10:	cc cf       	rjmp	.-104    	; 0x9aa <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x1a>
_ZN6TM16377displayEha.constprop.55():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:302
    }
}

int8_t TM1637::coding(int8_t disp_data) {
    if (disp_data == 0x7f) {
        disp_data = 0x00;    // Clear digit
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	cb cf       	rjmp	.-106    	; 0x9ac <TM1637::display(unsigned char, signed char) [clone .constprop.55]+0x1c>

00000a16 <OneWire::write_bit(unsigned char) [clone .constprop.41]>:
_ZN7OneWire9write_bitEh.constprop.41():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:198

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:200
{
	IO_REG_TYPE mask IO_REG_MASK_ATTR = bitmask;
     a1c:	c0 91 4c 29 	lds	r28, 0x294C	; 0x80294c <ds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:201
	volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg;
     a20:	e0 91 4d 29 	lds	r30, 0x294D	; 0x80294d <ds+0x1>
     a24:	f0 91 4e 29 	lds	r31, 0x294E	; 0x80294e <ds+0x2>
     a28:	9c 2f       	mov	r25, r28
     a2a:	90 95       	com	r25
     a2c:	8f 01       	movw	r16, r30
     a2e:	04 50       	subi	r16, 0x04	; 4
     a30:	11 09       	sbc	r17, r1
     a32:	38 97       	sbiw	r30, 0x08	; 8
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:203

	if (v & 1) {
     a34:	80 ff       	sbrs	r24, 0
     a36:	18 c0       	rjmp	.+48     	; 0xa68 <OneWire::write_bit(unsigned char) [clone .constprop.41]+0x52>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:204
		noInterrupts();
     a38:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:205
		DIRECT_WRITE_LOW(reg, mask);
     a3a:	d8 01       	movw	r26, r16
     a3c:	8c 91       	ld	r24, X
     a3e:	89 23       	and	r24, r25
     a40:	8c 93       	st	X, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:206
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     a42:	80 81       	ld	r24, Z
     a44:	8c 2b       	or	r24, r28
     a46:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:207
		delayMicroseconds(10);
     a48:	8a e0       	ldi	r24, 0x0A	; 10
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:208
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     a50:	f8 01       	movw	r30, r16
     a52:	80 81       	ld	r24, Z
     a54:	c8 2b       	or	r28, r24
     a56:	c0 83       	st	Z, r28
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:209
		interrupts();
     a58:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:210
		delayMicroseconds(55);
     a5a:	87 e3       	ldi	r24, 0x37	; 55
     a5c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:220
		delayMicroseconds(65);
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
		interrupts();
		delayMicroseconds(5);
	}
}
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:218
		DIRECT_WRITE_LOW(reg, mask);
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
		delayMicroseconds(65);
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
		interrupts();
		delayMicroseconds(5);
     a64:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:212
		delayMicroseconds(10);
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
		interrupts();
		delayMicroseconds(55);
	} else {
		noInterrupts();
     a68:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:213
		DIRECT_WRITE_LOW(reg, mask);
     a6a:	d8 01       	movw	r26, r16
     a6c:	8c 91       	ld	r24, X
     a6e:	89 23       	and	r24, r25
     a70:	8c 93       	st	X, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:214
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     a72:	80 81       	ld	r24, Z
     a74:	8c 2b       	or	r24, r28
     a76:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:215
		delayMicroseconds(65);
     a78:	81 e4       	ldi	r24, 0x41	; 65
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:216
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     a80:	f8 01       	movw	r30, r16
     a82:	80 81       	ld	r24, Z
     a84:	c8 2b       	or	r28, r24
     a86:	c0 83       	st	Z, r28
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:217
		interrupts();
     a88:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:218
		delayMicroseconds(5);
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	e7 cf       	rjmp	.-50     	; 0xa5e <OneWire::write_bit(unsigned char) [clone .constprop.41]+0x48>

00000a90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>:
_ZN7OneWire5writeEhh.constprop.40():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:251
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	f8 2e       	mov	r15, r24
     a9c:	06 2f       	mov	r16, r22
     a9e:	c8 e0       	ldi	r28, 0x08	; 8
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:254
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     aa2:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:255
	OneWire::write_bit( (bitMask & v)?1:0);
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	9f 2d       	mov	r25, r15
     aa8:	91 23       	and	r25, r17
     aaa:	09 f4       	brne	.+2      	; 0xaae <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]+0x1e>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 0b 05 	call	0xa16	; 0xa16 <OneWire::write_bit(unsigned char) [clone .constprop.41]>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:254
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     ab2:	11 0f       	add	r17, r17
     ab4:	21 97       	sbiw	r28, 0x01	; 1
     ab6:	b1 f7       	brne	.-20     	; 0xaa4 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]+0x14>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:257
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
     ab8:	01 11       	cpse	r16, r1
     aba:	18 c0       	rjmp	.+48     	; 0xaec <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]+0x5c>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:258
	noInterrupts();
     abc:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:259
	DIRECT_MODE_INPUT(baseReg, bitmask);
     abe:	e0 91 4d 29 	lds	r30, 0x294D	; 0x80294d <ds+0x1>
     ac2:	f0 91 4e 29 	lds	r31, 0x294E	; 0x80294e <ds+0x2>
     ac6:	38 97       	sbiw	r30, 0x08	; 8
     ac8:	90 81       	ld	r25, Z
     aca:	80 91 4c 29 	lds	r24, 0x294C	; 0x80294c <ds>
     ace:	80 95       	com	r24
     ad0:	89 23       	and	r24, r25
     ad2:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:260
	DIRECT_WRITE_LOW(baseReg, bitmask);
     ad4:	e0 91 4d 29 	lds	r30, 0x294D	; 0x80294d <ds+0x1>
     ad8:	f0 91 4e 29 	lds	r31, 0x294E	; 0x80294e <ds+0x2>
     adc:	34 97       	sbiw	r30, 0x04	; 4
     ade:	90 81       	ld	r25, Z
     ae0:	80 91 4c 29 	lds	r24, 0x294C	; 0x80294c <ds>
     ae4:	80 95       	com	r24
     ae6:	89 23       	and	r24, r25
     ae8:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:261
	interrupts();
     aea:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:263
    }
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <OneWire::select(unsigned char const*) [clone .constprop.39]>:
_ZN7OneWire6selectEPKh.constprop.39():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:297
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	8c 01       	movw	r16, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:301
{
    uint8_t i;

    write(0x55);           // Choose ROM
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	85 e5       	ldi	r24, 0x55	; 85
     b06:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
     b0a:	e8 01       	movw	r28, r16
     b0c:	08 5f       	subi	r16, 0xF8	; 248
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:303

    for (i = 0; i < 8; i++) write(rom[i]);
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	89 91       	ld	r24, Y+
     b14:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
     b18:	c0 17       	cp	r28, r16
     b1a:	d1 07       	cpc	r29, r17
     b1c:	c9 f7       	brne	.-14     	; 0xb10 <OneWire::select(unsigned char const*) [clone .constprop.39]+0x18>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:304
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <OneWire::reset() [clone .constprop.38]>:
_ZN7OneWire5resetEv.constprop.38():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:164
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:166
{
	IO_REG_TYPE mask IO_REG_MASK_ATTR = bitmask;
     b36:	c0 91 4c 29 	lds	r28, 0x294C	; 0x80294c <ds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:167
	volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg;
     b3a:	e0 90 4d 29 	lds	r14, 0x294D	; 0x80294d <ds+0x1>
     b3e:	f0 90 4e 29 	lds	r15, 0x294E	; 0x80294e <ds+0x2>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:171
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
     b42:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:172
	DIRECT_MODE_INPUT(reg, mask);
     b44:	87 01       	movw	r16, r14
     b46:	08 50       	subi	r16, 0x08	; 8
     b48:	11 09       	sbc	r17, r1
     b4a:	f8 01       	movw	r30, r16
     b4c:	80 81       	ld	r24, Z
     b4e:	dc 2f       	mov	r29, r28
     b50:	d0 95       	com	r29
     b52:	8d 23       	and	r24, r29
     b54:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:173
	interrupts();
     b56:	78 94       	sei
     b58:	8d e7       	ldi	r24, 0x7D	; 125
     b5a:	d8 2e       	mov	r13, r24
     b5c:	da 94       	dec	r13
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:176
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
     b5e:	dd 20       	and	r13, r13
     b60:	99 f1       	breq	.+102    	; 0xbc8 <OneWire::reset() [clone .constprop.38]+0xa0>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:177
		delayMicroseconds(2);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:178
	} while ( !DIRECT_READ(reg, mask));
     b6a:	f7 01       	movw	r30, r14
     b6c:	80 81       	ld	r24, Z
     b6e:	8c 23       	and	r24, r28
     b70:	a9 f3       	breq	.-22     	; 0xb5c <OneWire::reset() [clone .constprop.38]+0x34>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:180

	noInterrupts();
     b72:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:181
	DIRECT_WRITE_LOW(reg, mask);
     b74:	34 97       	sbiw	r30, 0x04	; 4
     b76:	80 81       	ld	r24, Z
     b78:	8d 23       	and	r24, r29
     b7a:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:182
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     b7c:	f8 01       	movw	r30, r16
     b7e:	80 81       	ld	r24, Z
     b80:	8c 2b       	or	r24, r28
     b82:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:183
	interrupts();
     b84:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:184
	delayMicroseconds(480);
     b86:	80 ee       	ldi	r24, 0xE0	; 224
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:185
	noInterrupts();
     b8e:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:186
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
     b90:	f8 01       	movw	r30, r16
     b92:	80 81       	ld	r24, Z
     b94:	8d 23       	and	r24, r29
     b96:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:187
	delayMicroseconds(70);
     b98:	86 e4       	ldi	r24, 0x46	; 70
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:188
	r = !DIRECT_READ(reg, mask);
     ba0:	f7 01       	movw	r30, r14
     ba2:	80 81       	ld	r24, Z
     ba4:	c8 23       	and	r28, r24
     ba6:	11 e0       	ldi	r17, 0x01	; 1
     ba8:	09 f0       	breq	.+2      	; 0xbac <OneWire::reset() [clone .constprop.38]+0x84>
     baa:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:189
	interrupts();
     bac:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:190
	delayMicroseconds(410);
     bae:	8a e9       	ldi	r24, 0x9A	; 154
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:192
	return r;
}
     bb6:	81 2f       	mov	r24, r17
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	08 95       	ret
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:176
	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	f5 cf       	rjmp	.-22     	; 0xbb6 <OneWire::reset() [clone .constprop.38]+0x8e>

00000bcc <OneWire::read_bit() [clone .constprop.37]>:
_ZN7OneWire8read_bitEv.constprop.37():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:226

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:228
{
	IO_REG_TYPE mask IO_REG_MASK_ATTR = bitmask;
     bd8:	c0 91 4c 29 	lds	r28, 0x294C	; 0x80294c <ds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:229
	volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg;
     bdc:	e0 90 4d 29 	lds	r14, 0x294D	; 0x80294d <ds+0x1>
     be0:	f0 90 4e 29 	lds	r15, 0x294E	; 0x80294e <ds+0x2>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:232
	uint8_t r;

	noInterrupts();
     be4:	f8 94       	cli
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:233
	DIRECT_MODE_OUTPUT(reg, mask);
     be6:	87 01       	movw	r16, r14
     be8:	08 50       	subi	r16, 0x08	; 8
     bea:	11 09       	sbc	r17, r1
     bec:	f8 01       	movw	r30, r16
     bee:	80 81       	ld	r24, Z
     bf0:	8c 2b       	or	r24, r28
     bf2:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:234
	DIRECT_WRITE_LOW(reg, mask);
     bf4:	34 96       	adiw	r30, 0x04	; 4
     bf6:	80 81       	ld	r24, Z
     bf8:	dc 2f       	mov	r29, r28
     bfa:	d0 95       	com	r29
     bfc:	8d 23       	and	r24, r29
     bfe:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:235
	delayMicroseconds(3);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:236
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
     c08:	f8 01       	movw	r30, r16
     c0a:	80 81       	ld	r24, Z
     c0c:	8d 23       	and	r24, r29
     c0e:	80 83       	st	Z, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:237
	delayMicroseconds(10);
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:238
	r = DIRECT_READ(reg, mask);
     c18:	f7 01       	movw	r30, r14
     c1a:	d0 81       	ld	r29, Z
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:239
	interrupts();
     c1c:	78 94       	sei
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:240
	delayMicroseconds(53);
     c1e:	85 e3       	ldi	r24, 0x35	; 53
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 57 04 	call	0x8ae	; 0x8ae <delayMicroseconds>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:238
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
     c26:	cd 23       	and	r28, r29
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <OneWire::read_bit() [clone .constprop.37]+0x62>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:242
	interrupts();
	delayMicroseconds(53);
	return r;
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <micros>:
micros():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:103
{
  uint32_t m;
  uint16_t t;

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
     c3c:	6f b7       	in	r22, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:104
  cli();
     c3e:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:107

  /* Get current number of millis (i.e. overflows) and timer count */
  m = timer_millis;
     c40:	20 91 a3 28 	lds	r18, 0x28A3	; 0x8028a3 <timer_millis>
     c44:	30 91 a4 28 	lds	r19, 0x28A4	; 0x8028a4 <timer_millis+0x1>
     c48:	40 91 a5 28 	lds	r20, 0x28A5	; 0x8028a5 <timer_millis+0x2>
     c4c:	50 91 a6 28 	lds	r21, 0x28A6	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:108
  t = _timer->CNT;
     c50:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     c54:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:112

  /* If the timer overflow flag is raised, we just missed it,
  increment to account for it, & read new ticks */
  if (_timer->INTFLAGS & TCB_CAPT_bm)
     c58:	70 91 a6 0a 	lds	r23, 0x0AA6	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
     c5c:	70 ff       	sbrs	r23, 0
     c5e:	08 c0       	rjmp	.+16     	; 0xc70 <micros+0x34>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:114
  {
    m++;
     c60:	2f 5f       	subi	r18, 0xFF	; 255
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	4f 4f       	sbci	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:115
    t = _timer->CNT;
     c68:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     c6c:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:119
  }

  // Restore SREG
  SREG = status;
     c70:	6f bf       	out	0x3f, r22	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:123

#if (F_CPU == 20000000L)
  t = t >> 4;
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
     c72:	e9 2f       	mov	r30, r25
     c74:	ff 27       	eor	r31, r31
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:122

  // Restore SREG
  SREG = status;

#if (F_CPU == 20000000L)
  t = t >> 4;
     c76:	bc 01       	movw	r22, r24
     c78:	a4 e0       	ldi	r26, 0x04	; 4
     c7a:	76 95       	lsr	r23
     c7c:	67 95       	ror	r22
     c7e:	aa 95       	dec	r26
     c80:	e1 f7       	brne	.-8      	; 0xc7a <micros+0x3e>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:123
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
     c82:	e6 0f       	add	r30, r22
     c84:	f7 1f       	adc	r31, r23
     c86:	bc 01       	movw	r22, r24
     c88:	b6 e0       	ldi	r27, 0x06	; 6
     c8a:	76 95       	lsr	r23
     c8c:	67 95       	ror	r22
     c8e:	ba 95       	dec	r27
     c90:	e1 f7       	brne	.-8      	; 0xc8a <micros+0x4e>
     c92:	e6 1b       	sub	r30, r22
     c94:	f7 0b       	sbc	r31, r23
     c96:	89 2f       	mov	r24, r25
     c98:	99 27       	eor	r25, r25
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	e8 1b       	sub	r30, r24
     ca0:	f9 0b       	sbc	r31, r25
     ca2:	a8 ee       	ldi	r26, 0xE8	; 232
     ca4:	b3 e0       	ldi	r27, 0x03	; 3
     ca6:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
     caa:	6e 0f       	add	r22, r30
     cac:	7f 1f       	adc	r23, r31
     cae:	81 1d       	adc	r24, r1
     cb0:	91 1d       	adc	r25, r1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:143
#elif (F_CPU == 1000000L)
  return m * 1000 + t;
#else
  return 0;
#endif
}
     cb2:	08 95       	ret

00000cb4 <delay>:
delay():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:146

void delay(unsigned long ms)
{
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	4b 01       	movw	r8, r22
     cc6:	5c 01       	movw	r10, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:147
  uint32_t start_time = micros(), delay_time = 1000 * ms;
     cc8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <micros>
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24
     cd0:	a8 ee       	ldi	r26, 0xE8	; 232
     cd2:	b3 e0       	ldi	r27, 0x03	; 3
     cd4:	a5 01       	movw	r20, r10
     cd6:	94 01       	movw	r18, r8
     cd8:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:150

  /* Calculate future time to return */
  uint32_t return_time = start_time + delay_time;
     cdc:	c6 0e       	add	r12, r22
     cde:	d7 1e       	adc	r13, r23
     ce0:	e8 1e       	adc	r14, r24
     ce2:	f9 1e       	adc	r15, r25
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:153

  /* If return time overflows */
  if (return_time < delay_time)
     ce4:	c6 16       	cp	r12, r22
     ce6:	d7 06       	cpc	r13, r23
     ce8:	e8 06       	cpc	r14, r24
     cea:	f9 06       	cpc	r15, r25
     cec:	18 f4       	brcc	.+6      	; 0xcf4 <delay+0x40>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:156
  {
    /* Wait until micros overflows */
    while (micros() > return_time)
     cee:	0e 94 1e 06 	call	0xc3c	; 0xc3c <micros>
     cf2:	f8 cf       	rjmp	.-16     	; 0xce4 <delay+0x30>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:161
      ;
  }

  /* Wait until return time */
  while (micros() < return_time)
     cf4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <micros>
     cf8:	6c 15       	cp	r22, r12
     cfa:	7d 05       	cpc	r23, r13
     cfc:	8e 05       	cpc	r24, r14
     cfe:	9f 05       	cpc	r25, r15
     d00:	c8 f3       	brcs	.-14     	; 0xcf4 <delay+0x40>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:163
    ;
}
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	08 95       	ret

00000d14 <OneWire::crc8(unsigned char const*, unsigned char)>:
_ZN7OneWire4crc8EPKhh():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:506
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
     d14:	dc 01       	movw	r26, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:507
	uint8_t crc = 0;
     d16:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:509

	while (len--) {
     d18:	61 50       	subi	r22, 0x01	; 1
     d1a:	90 f0       	brcs	.+36     	; 0xd40 <OneWire::crc8(unsigned char const*, unsigned char)+0x2c>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:510
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
     d1c:	9d 91       	ld	r25, X+
     d1e:	98 27       	eor	r25, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:511
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
     d20:	e9 2f       	mov	r30, r25
     d22:	ef 70       	andi	r30, 0x0F	; 15
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	e0 56       	subi	r30, 0x60	; 96
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	24 91       	lpm	r18, Z
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:512
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
     d2c:	e9 2f       	mov	r30, r25
     d2e:	e2 95       	swap	r30
     d30:	ef 70       	andi	r30, 0x0F	; 15
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	e0 55       	subi	r30, 0x50	; 80
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	e4 91       	lpm	r30, Z
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:511
{
	uint8_t crc = 0;

	while (len--) {
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
     d3a:	82 2f       	mov	r24, r18
     d3c:	8e 27       	eor	r24, r30
     d3e:	ec cf       	rjmp	.-40     	; 0xd18 <OneWire::crc8(unsigned char const*, unsigned char)+0x4>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:516
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
     d40:	08 95       	ret

00000d42 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]>:
_ZN11TEMP_19040924OneWireStartConversationEv.constprop.35():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:208

bool TEMP_190409::OneWireStartConversation( void ){
     d42:	8f 92       	push	r8
     d44:	9f 92       	push	r9
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	2c 97       	sbiw	r28, 0x0c	; 12
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	de bf       	out	0x3e, r29	; 62
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:217

  byte present = 0;
  byte data[12];
  float celsius, fahrenheit;

  if( (true == OneWireFetchNewData ) && ( true == OneWireSensorFound) ) {
     d64:	80 91 69 29 	lds	r24, 0x2969	; 0x802969 <Station+0xf>
     d68:	88 23       	and	r24, r24
     d6a:	09 f4       	brne	.+2      	; 0xd6e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x2c>
     d6c:	8e c0       	rjmp	.+284    	; 0xe8a <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x148>
     d6e:	80 91 75 29 	lds	r24, 0x2975	; 0x802975 <Station+0x1b>
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x36>
     d76:	89 c0       	rjmp	.+274    	; 0xe8a <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x148>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:218
    if( ( last_onewirestrart+10000 )<millis() ){
     d78:	80 91 65 29 	lds	r24, 0x2965	; 0x802965 <Station+0xb>
     d7c:	90 91 66 29 	lds	r25, 0x2966	; 0x802966 <Station+0xc>
     d80:	a0 91 67 29 	lds	r26, 0x2967	; 0x802967 <Station+0xd>
     d84:	b0 91 68 29 	lds	r27, 0x2968	; 0x802968 <Station+0xe>
     d88:	80 5f       	subi	r24, 0xF0	; 240
     d8a:	98 4d       	sbci	r25, 0xD8	; 216
     d8c:	af 4f       	sbci	r26, 0xFF	; 255
     d8e:	bf 4f       	sbci	r27, 0xFF	; 255
millis():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
     d90:	2f b7       	in	r18, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:88
  cli();
     d92:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
     d94:	40 91 a3 28 	lds	r20, 0x28A3	; 0x8028a3 <timer_millis>
     d98:	50 91 a4 28 	lds	r21, 0x28A4	; 0x8028a4 <timer_millis+0x1>
     d9c:	60 91 a5 28 	lds	r22, 0x28A5	; 0x8028a5 <timer_millis+0x2>
     da0:	70 91 a6 28 	lds	r23, 0x28A6	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:92

  SREG = status;
     da4:	2f bf       	out	0x3f, r18	; 63
_ZN11TEMP_19040924OneWireStartConversationEv.constprop.35():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:218
     da6:	84 17       	cp	r24, r20
     da8:	95 07       	cpc	r25, r21
     daa:	a6 07       	cpc	r26, r22
     dac:	b7 07       	cpc	r27, r23
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x70>
     db0:	6c c0       	rjmp	.+216    	; 0xe8a <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x148>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:220
        //Read new data.....
        present = ds.reset();
     db2:	0e 94 94 05 	call	0xb28	; 0xb28 <OneWire::reset() [clone .constprop.38]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:221
        ds.select(addr);    
     db6:	8c e6       	ldi	r24, 0x6C	; 108
     db8:	99 e2       	ldi	r25, 0x29	; 41
     dba:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OneWire::select(unsigned char const*) [clone .constprop.39]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:222
        ds.write(0xBE);         // Read Scratchpad
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	8e eb       	ldi	r24, 0xBE	; 190
     dc2:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
     dc6:	8e 01       	movw	r16, r28
     dc8:	0f 5f       	subi	r16, 0xFF	; 255
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	4e 01       	movw	r8, r28
     dce:	8a e0       	ldi	r24, 0x0A	; 10
     dd0:	88 0e       	add	r8, r24
     dd2:	91 1c       	adc	r9, r1
     dd4:	58 01       	movw	r10, r16
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:208
   return temperature_in_K;
   //The value deliverd is about 7 degree about surrounding ....
   
}

bool TEMP_190409::OneWireStartConversation( void ){
     dd6:	98 e0       	ldi	r25, 0x08	; 8
     dd8:	c9 2e       	mov	r12, r25
     dda:	d1 2c       	mov	r13, r1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:281
//
// Read a byte
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;
     ddc:	f1 2c       	mov	r15, r1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:283

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     dde:	ee 24       	eor	r14, r14
     de0:	e3 94       	inc	r14
read():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:284
	if ( OneWire::read_bit()) r |= bitMask;
     de2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <OneWire::read_bit() [clone .constprop.37]>
     de6:	81 11       	cpse	r24, r1
     de8:	fe 28       	or	r15, r14
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:283
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     dea:	ee 0c       	add	r14, r14
     dec:	e1 e0       	ldi	r30, 0x01	; 1
     dee:	ce 1a       	sub	r12, r30
     df0:	d1 08       	sbc	r13, r1
     df2:	b9 f7       	brne	.-18     	; 0xde2 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xa0>
_ZN11TEMP_19040924OneWireStartConversationEv.constprop.35():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:225
        present = ds.reset();
        ds.select(addr);    
        ds.write(0xBE);         // Read Scratchpad
      
        for ( i = 0; i < 9; i++) {           // we need 9 bytes
          data[i] = ds.read();
     df4:	f8 01       	movw	r30, r16
     df6:	f1 92       	st	Z+, r15
     df8:	8f 01       	movw	r16, r30
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:224
        //Read new data.....
        present = ds.reset();
        ds.select(addr);    
        ds.write(0xBE);         // Read Scratchpad
      
        for ( i = 0; i < 9; i++) {           // we need 9 bytes
     dfa:	8e 16       	cp	r8, r30
     dfc:	9f 06       	cpc	r9, r31
     dfe:	59 f7       	brne	.-42     	; 0xdd6 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x94>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:228
          data[i] = ds.read();
        }
      
        if( data[8] != OneWire::crc8(data, 8) ){
     e00:	19 85       	ldd	r17, Y+9	; 0x09
     e02:	68 e0       	ldi	r22, 0x08	; 8
     e04:	c5 01       	movw	r24, r10
     e06:	0e 94 8a 06 	call	0xd14	; 0xd14 <OneWire::crc8(unsigned char const*, unsigned char)>
     e0a:	18 17       	cp	r17, r24
     e0c:	89 f0       	breq	.+34     	; 0xe30 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xee>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:230
          //CRC error 
          return false;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:282
  return false;
  
  
  
  
}
     e10:	2c 96       	adiw	r28, 0x0c	; 12
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:237
      
        // Convert the data to actual temperature
        // because the result is a 16 bit signed integer, it should
        // be stored to an "int16_t" type, which is always 16 bits
        // even when compiled on a 32 bit processor.
        int16_t raw = (data[1] << 8) | data[0];
     e30:	69 81       	ldd	r22, Y+1	; 0x01
     e32:	7a 81       	ldd	r23, Y+2	; 0x02
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:238
        if (type_s) {
     e34:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <Station+0x1a>
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xfc>
     e3c:	68 c0       	rjmp	.+208    	; 0xf0e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x1cc>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:239
          raw = raw << 3; // 9 bit resolution default
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	8a 95       	dec	r24
     e46:	e1 f7       	brne	.-8      	; 0xe40 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xfe>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:240
          if (data[7] == 0x10) {
     e48:	88 85       	ldd	r24, Y+8	; 0x08
     e4a:	80 31       	cpi	r24, 0x10	; 16
     e4c:	41 f4       	brne	.+16     	; 0xe5e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x11c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:242
            // "count remain" gives full 12 bit resolution
            raw = (raw & 0xFFF0) + 12 - data[6];
     e4e:	2f 81       	ldd	r18, Y+7	; 0x07
     e50:	8c e0       	ldi	r24, 0x0C	; 12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	82 1b       	sub	r24, r18
     e56:	91 09       	sbc	r25, r1
     e58:	60 7f       	andi	r22, 0xF0	; 240
     e5a:	68 0f       	add	r22, r24
     e5c:	79 1f       	adc	r23, r25
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:252
          if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
          else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
          else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
          //// default is 12 bit resolution, 750 ms conversion time
        }
        celsius = (float)raw / 16.0;
     e5e:	07 2e       	mov	r0, r23
     e60:	00 0c       	add	r0, r0
     e62:	88 0b       	sbc	r24, r24
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatsisf>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5d e3       	ldi	r21, 0x3D	; 61
     e72:	0e 94 0f 1a 	call	0x341e	; 0x341e <__mulsf3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:254
        fahrenheit = celsius * 1.8 + 32.0;
        LastTempReadKelvin=(int16_t)celsius+273;
     e76:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fixsfsi>
     e7a:	6f 5e       	subi	r22, 0xEF	; 239
     e7c:	7e 4f       	sbci	r23, 0xFE	; 254
     e7e:	60 93 6a 29 	sts	0x296A, r22	; 0x80296a <Station+0x10>
     e82:	70 93 6b 29 	sts	0x296B, r23	; 0x80296b <Station+0x11>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:255
        OneWireFetchNewData=false;
     e86:	10 92 69 29 	sts	0x2969, r1	; 0x802969 <Station+0xf>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:261
      
    }
    
  } 

  if( ( last_onewirestrart+20000 )<millis() ){
     e8a:	80 91 65 29 	lds	r24, 0x2965	; 0x802965 <Station+0xb>
     e8e:	90 91 66 29 	lds	r25, 0x2966	; 0x802966 <Station+0xc>
     e92:	a0 91 67 29 	lds	r26, 0x2967	; 0x802967 <Station+0xd>
     e96:	b0 91 68 29 	lds	r27, 0x2968	; 0x802968 <Station+0xe>
     e9a:	80 5e       	subi	r24, 0xE0	; 224
     e9c:	91 4b       	sbci	r25, 0xB1	; 177
     e9e:	af 4f       	sbci	r26, 0xFF	; 255
     ea0:	bf 4f       	sbci	r27, 0xFF	; 255
millis():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
     ea2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:88
  cli();
     ea4:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
     ea6:	40 91 a3 28 	lds	r20, 0x28A3	; 0x8028a3 <timer_millis>
     eaa:	50 91 a4 28 	lds	r21, 0x28A4	; 0x8028a4 <timer_millis+0x1>
     eae:	60 91 a5 28 	lds	r22, 0x28A5	; 0x8028a5 <timer_millis+0x2>
     eb2:	70 91 a6 28 	lds	r23, 0x28A6	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:92

  SREG = status;
     eb6:	2f bf       	out	0x3f, r18	; 63
_ZN11TEMP_19040924OneWireStartConversationEv.constprop.35():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:261
     eb8:	84 17       	cp	r24, r20
     eba:	95 07       	cpc	r25, r21
     ebc:	a6 07       	cpc	r26, r22
     ebe:	b7 07       	cpc	r27, r23
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x182>
     ec2:	a5 cf       	rjmp	.-182    	; 0xe0e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xcc>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:262
    ds.reset_search();
     ec4:	0e 94 0e 01 	call	0x21c	; 0x21c <OneWire::reset_search() [clone .constprop.43]>
millis():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
     ec8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:88
  cli();
     eca:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
     ecc:	80 91 a3 28 	lds	r24, 0x28A3	; 0x8028a3 <timer_millis>
     ed0:	90 91 a4 28 	lds	r25, 0x28A4	; 0x8028a4 <timer_millis+0x1>
     ed4:	a0 91 a5 28 	lds	r26, 0x28A5	; 0x8028a5 <timer_millis+0x2>
     ed8:	b0 91 a6 28 	lds	r27, 0x28A6	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:92

  SREG = status;
     edc:	2f bf       	out	0x3f, r18	; 63
_ZN11TEMP_19040924OneWireStartConversationEv.constprop.35():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:263
    last_onewirestrart=millis();
     ede:	80 93 65 29 	sts	0x2965, r24	; 0x802965 <Station+0xb>
     ee2:	90 93 66 29 	sts	0x2966, r25	; 0x802966 <Station+0xc>
     ee6:	a0 93 67 29 	sts	0x2967, r26	; 0x802967 <Station+0xd>
     eea:	b0 93 68 29 	sts	0x2968, r27	; 0x802968 <Station+0xe>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:266
        
        
              ds.reset();
     eee:	0e 94 94 05 	call	0xb28	; 0xb28 <OneWire::reset() [clone .constprop.38]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:267
              ds.select(addr);
     ef2:	8c e6       	ldi	r24, 0x6C	; 108
     ef4:	99 e2       	ldi	r25, 0x29	; 41
     ef6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OneWire::select(unsigned char const*) [clone .constprop.39]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:268
              ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	84 e4       	ldi	r24, 0x44	; 68
     efe:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:269
              ds.reset_search();
     f02:	0e 94 0e 01 	call	0x21c	; 0x21c <OneWire::reset_search() [clone .constprop.43]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:270
              OneWireFetchNewData=true;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 69 29 	sts	0x2969, r24	; 0x802969 <Station+0xf>
     f0c:	81 cf       	rjmp	.-254    	; 0xe10 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0xce>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:245
          if (data[7] == 0x10) {
            // "count remain" gives full 12 bit resolution
            raw = (raw & 0xFFF0) + 12 - data[6];
          }
        } else {
          byte cfg = (data[4] & 0x60);
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	80 76       	andi	r24, 0x60	; 96
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:247
          // at lower res, the low bits are undefined, so let's zero them
          if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
     f12:	11 f4       	brne	.+4      	; 0xf18 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x1d6>
     f14:	68 7f       	andi	r22, 0xF8	; 248
     f16:	a3 cf       	rjmp	.-186    	; 0xe5e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x11c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:248
          else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
     f18:	80 32       	cpi	r24, 0x20	; 32
     f1a:	11 f4       	brne	.+4      	; 0xf20 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x1de>
     f1c:	6c 7f       	andi	r22, 0xFC	; 252
     f1e:	9f cf       	rjmp	.-194    	; 0xe5e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x11c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:249
          else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
     f20:	80 34       	cpi	r24, 0x40	; 64
     f22:	09 f0       	breq	.+2      	; 0xf26 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x1e4>
     f24:	9c cf       	rjmp	.-200    	; 0xe5e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x11c>
     f26:	6e 7f       	andi	r22, 0xFE	; 254
     f28:	9a cf       	rjmp	.-204    	; 0xe5e <TEMP_190409::OneWireStartConversation() [clone .constprop.35]+0x11c>

00000f2a <TEMP_190409::Read(unsigned char) [clone .constprop.34]>:
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:26
 Function:    uint16_t Read( uint8_t )     
 Input:       uint16_t avg_cnt
 Output:      uint16_t Temp in °C
 Discription: Reads the Temp in °C
**********************************************************************************************************/
uint16_t TEMP_190409::Read( uint8_t avg_cnt){
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:34
    uint16_t samples=0;
    uint16_t ADCvoltage =0;  

   //At this point the Temperatur will be compensated to 25°C Junction Point temperatur due to the code involved 
   //We need to messure the current chip temperatur and compensate for it
   OneWireStartConversation();
     f2e:	0e 94 a1 06 	call	0xd42	; 0xd42 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]>
GetAmbientTemperaturKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:147
    return LastReadTemp;
}

int16_t TEMP_190409::GetAmbientTemperaturKelvin( void ){

  if(true == OneWireSensorFound){
     f32:	80 91 75 29 	lds	r24, 0x2975	; 0x802975 <Station+0x1b>
GetLastOneWireTempKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:286
  
}

int16_t TEMP_190409::GetLastOneWireTempKelvin( void ){

  return LastTempReadKelvin;
     f36:	d0 91 6a 29 	lds	r29, 0x296A	; 0x80296a <Station+0x10>
     f3a:	c0 91 6b 29 	lds	r28, 0x296B	; 0x80296b <Station+0x11>
GetAmbientTemperaturKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:147
    return LastReadTemp;
}

int16_t TEMP_190409::GetAmbientTemperaturKelvin( void ){

  if(true == OneWireSensorFound){
     f3e:	81 11       	cpse	r24, r1
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x20>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:150
    return GetLastOneWireTempKelvin();
  } else {
    return GetOnchipTempKelvin();
     f42:	0e 94 bc 00 	call	0x178	; 0x178 <TEMP_190409::GetOnchipTempKelvin() [clone .constprop.45]>
     f46:	d8 2f       	mov	r29, r24
     f48:	c9 2f       	mov	r28, r25
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:58
   int16_t OffSetDegree =  AmbienetTempKelvin  - 299 ;

   


   switch(ElementType){
     f4a:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <Station+0x9>
     f4e:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <Station+0xa>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x30>
     f58:	68 c0       	rjmp	.+208    	; 0x102a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x100>
     f5a:	02 97       	sbiw	r24, 0x02	; 2
     f5c:	09 f0       	breq	.+2      	; 0xf60 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x36>
     f5e:	d7 c0       	rjmp	.+430    	; 0x110e <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x1e4>
     f60:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:29
 Discription: Reads the Temp in °C
**********************************************************************************************************/
uint16_t TEMP_190409::Read( uint8_t avg_cnt){
    
    uint16_t temperature=999;
    uint16_t samples=0;
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	20 e0       	ldi	r18, 0x00	; 0
analogRead():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:66
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
     f66:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
     f68:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
     f6c:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
     f70:	40 91 0b 06 	lds	r20, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     f74:	40 ff       	sbrs	r20, 0
     f76:	fc cf       	rjmp	.-8      	; 0xf70 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x46>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
     f78:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     f7c:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:63
   switch(ElementType){
   
      case Type_K:{
               for(uint8_t i =0;i< avg_cnt;i++)
               {
                  samples += analogRead(A0);
     f80:	24 0f       	add	r18, r20
     f82:	35 1f       	adc	r19, r21
     f84:	81 50       	subi	r24, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:61


   switch(ElementType){
   
      case Type_K:{
               for(uint8_t i =0;i< avg_cnt;i++)
     f86:	81 f7       	brne	.-32     	; 0xf68 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x3e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:90
      case Type_C:{
            for(uint8_t i =0;i< avg_cnt;i++)
            {
               samples += analogRead(A1);
            }
            samples = samples / avg_cnt;
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	36 95       	lsr	r19
     f8c:	27 95       	ror	r18
     f8e:	8a 95       	dec	r24
     f90:	e1 f7       	brne	.-8      	; 0xf8a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x60>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     f92:	a8 e8       	ldi	r26, 0x88	; 136
     f94:	b3 e1       	ldi	r27, 0x13	; 19
     f96:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__umulhisi3>
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	33 e0       	ldi	r19, 0x03	; 3
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:93
            ADCvoltage = map(samples,0,1023,0,5000);

            if(ADCvoltage>2000){
     fa6:	21 3d       	cpi	r18, 0xD1	; 209
     fa8:	67 e0       	ldi	r22, 0x07	; 7
     faa:	36 07       	cpc	r19, r22
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x86>
     fae:	b2 c0       	rjmp	.+356    	; 0x1114 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x1ea>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:95
               temperature=999;
            } else if( (ADCvoltage>=1550) && (ADCvoltage < 2000) ){
     fb0:	b9 01       	movw	r22, r18
     fb2:	6e 50       	subi	r22, 0x0E	; 14
     fb4:	76 40       	sbci	r23, 0x06	; 6
     fb6:	62 3c       	cpi	r22, 0xC2	; 194
     fb8:	71 40       	sbci	r23, 0x01	; 1
     fba:	08 f0       	brcs	.+2      	; 0xfbe <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x94>
     fbc:	4b c0       	rjmp	.+150    	; 0x1054 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x12a>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
     fbe:	2e 50       	subi	r18, 0x0E	; 14
     fc0:	36 40       	sbci	r19, 0x06	; 6
     fc2:	41 09       	sbc	r20, r1
     fc4:	51 09       	sbc	r21, r1
     fc6:	aa ea       	ldi	r26, 0xAA	; 170
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
     fce:	22 ec       	ldi	r18, 0xC2	; 194
     fd0:	31 e0       	ldi	r19, 0x01	; 1
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
     fda:	24 53       	subi	r18, 0x34	; 52
     fdc:	3e 4f       	sbci	r19, 0xFE	; 254
     fde:	4f 4f       	sbci	r20, 0xFF	; 255
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	8d 2f       	mov	r24, r29
     fe4:	9c 2f       	mov	r25, r28
     fe6:	89 3e       	cpi	r24, 0xE9	; 233
     fe8:	91 05       	cpc	r25, r1
     fea:	10 f4       	brcc	.+4      	; 0xff0 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xc6>
     fec:	89 ee       	ldi	r24, 0xE9	; 233
     fee:	90 e0       	ldi	r25, 0x00	; 0
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:53
      //We shoudl give a warning about it
      AmbienetTempKelvin = 233;
   }
   
   //We need to substract 273.15° to get Celsius
   int16_t OffSetDegree =  AmbienetTempKelvin  - 299 ;
     ff0:	80 39       	cpi	r24, 0x90	; 144
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	94 07       	cpc	r25, r20
     ff6:	10 f0       	brcs	.+4      	; 0xffc <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xd2>
     ff8:	8f e8       	ldi	r24, 0x8F	; 143
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	8b 52       	subi	r24, 0x2B	; 43
     ffe:	91 40       	sbci	r25, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:120
      } break;
   }
      

   //We have calculated with 25°C or 298.15°K 
   if((  temperature - OffSetDegree) > 0 ){
    1000:	82 17       	cp	r24, r18
    1002:	93 07       	cpc	r25, r19
    1004:	09 f4       	brne	.+2      	; 0x1008 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xde>
    1006:	89 c0       	rjmp	.+274    	; 0x111a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x1f0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:121
      if(temperature<999){
    1008:	27 3e       	cpi	r18, 0xE7	; 231
    100a:	63 e0       	ldi	r22, 0x03	; 3
    100c:	36 07       	cpc	r19, r22
    100e:	10 f4       	brcc	.+4      	; 0x1014 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xea>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:122
         LastReadTemp = ( temperature - OffSetDegree );
    1010:	28 1b       	sub	r18, r24
    1012:	39 0b       	sbc	r19, r25
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:124
         } else {
          LastReadTemp =  temperature; 
    1014:	20 93 61 29 	sts	0x2961, r18	; 0x802961 <Station+0x7>
    1018:	30 93 62 29 	sts	0x2962, r19	; 0x802962 <Station+0x8>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:131
   } else {
      LastReadTemp =0;
   }
   
   return LastReadTemp;
}
    101c:	80 91 61 29 	lds	r24, 0x2961	; 0x802961 <Station+0x7>
    1020:	90 91 62 29 	lds	r25, 0x2962	; 0x802962 <Station+0x8>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:58
   int16_t OffSetDegree =  AmbienetTempKelvin  - 299 ;

   


   switch(ElementType){
    102a:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:29
 Discription: Reads the Temp in °C
**********************************************************************************************************/
uint16_t TEMP_190409::Read( uint8_t avg_cnt){
    
    uint16_t temperature=999;
    uint16_t samples=0;
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	20 e0       	ldi	r18, 0x00	; 0
analogRead():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    1036:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
    103a:	40 91 0b 06 	lds	r20, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    103e:	40 ff       	sbrs	r20, 0
    1040:	fc cf       	rjmp	.-8      	; 0x103a <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x110>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
    1042:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1046:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:88
      } break;

      case Type_C:{
            for(uint8_t i =0;i< avg_cnt;i++)
            {
               samples += analogRead(A1);
    104a:	24 0f       	add	r18, r20
    104c:	35 1f       	adc	r19, r21
    104e:	81 50       	subi	r24, 0x01	; 1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:86
               /* This will considerd as internal fault */
            }
      } break;

      case Type_C:{
            for(uint8_t i =0;i< avg_cnt;i++)
    1050:	81 f7       	brne	.-32     	; 0x1032 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x108>
    1052:	9a cf       	rjmp	.-204    	; 0xf88 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x5e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:97

            if(ADCvoltage>2000){
               temperature=999;
            } else if( (ADCvoltage>=1550) && (ADCvoltage < 2000) ){
            temperature = map(ADCvoltage, 1550, 2000,460,630);
            } else if(ADCvoltage >= 885 && ADCvoltage < 1555){//1555 max voltage value (mV)
    1054:	b9 01       	movw	r22, r18
    1056:	65 57       	subi	r22, 0x75	; 117
    1058:	73 40       	sbci	r23, 0x03	; 3
    105a:	6e 39       	cpi	r22, 0x9E	; 158
    105c:	72 40       	sbci	r23, 0x02	; 2
    105e:	98 f4       	brcc	.+38     	; 0x1086 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x15c>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
    1060:	25 57       	subi	r18, 0x75	; 117
    1062:	33 40       	sbci	r19, 0x03	; 3
    1064:	41 09       	sbc	r20, r1
    1066:	51 09       	sbc	r21, r1
    1068:	aa ea       	ldi	r26, 0xAA	; 170
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
    1070:	23 ea       	ldi	r18, 0xA3	; 163
    1072:	32 e0       	ldi	r19, 0x02	; 2
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    107c:	2e 5d       	subi	r18, 0xDE	; 222
    107e:	3e 4f       	sbci	r19, 0xFE	; 254
    1080:	4f 4f       	sbci	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	ae cf       	rjmp	.-164    	; 0xfe2 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xb8>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:99
               temperature = map(ADCvoltage, 885, 1560,290,460); //ADCvoltage =  voltage value (mV), 885 = lower limit(mV), 1555 = higher limit(mv), 290 = lower limit(degree), 460 = higher limit(degree)  
            } else if(ADCvoltage >=  205&& ADCvoltage < 885) {
    1086:	b9 01       	movw	r22, r18
    1088:	6d 5c       	subi	r22, 0xCD	; 205
    108a:	71 09       	sbc	r23, r1
    108c:	68 3a       	cpi	r22, 0xA8	; 168
    108e:	72 40       	sbci	r23, 0x02	; 2
    1090:	98 f4       	brcc	.+38     	; 0x10b8 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x18e>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
    1092:	2d 5c       	subi	r18, 0xCD	; 205
    1094:	31 09       	sbc	r19, r1
    1096:	41 09       	sbc	r20, r1
    1098:	51 09       	sbc	r21, r1
    109a:	ad eb       	ldi	r26, 0xBD	; 189
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
    10a2:	28 ea       	ldi	r18, 0xA8	; 168
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    10ae:	2c 59       	subi	r18, 0x9C	; 156
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	4f 4f       	sbci	r20, 0xFF	; 255
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	95 cf       	rjmp	.-214    	; 0xfe2 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xb8>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:101
               temperature = map(ADCvoltage, 205, 885,100,289); 
            } else if (ADCvoltage >= 58 && ADCvoltage <205){
    10b8:	b9 01       	movw	r22, r18
    10ba:	6a 53       	subi	r22, 0x3A	; 58
    10bc:	71 09       	sbc	r23, r1
    10be:	63 39       	cpi	r22, 0x93	; 147
    10c0:	71 05       	cpc	r23, r1
    10c2:	98 f4       	brcc	.+38     	; 0x10ea <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x1c0>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
    10c4:	2a 53       	subi	r18, 0x3A	; 58
    10c6:	31 09       	sbc	r19, r1
    10c8:	41 09       	sbc	r20, r1
    10ca:	51 09       	sbc	r21, r1
    10cc:	a1 e3       	ldi	r26, 0x31	; 49
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
    10d4:	23 e9       	ldi	r18, 0x93	; 147
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    10e0:	2e 5c       	subi	r18, 0xCE	; 206
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	4f 4f       	sbci	r20, 0xFF	; 255
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	7c cf       	rjmp	.-264    	; 0xfe2 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xb8>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:103
               temperature = map(ADCvoltage,58,205,50,99);
            } else if(ADCvoltage < 58) {
    10ea:	2a 33       	cpi	r18, 0x3A	; 58
    10ec:	31 05       	cpc	r19, r1
    10ee:	90 f4       	brcc	.+36     	; 0x1114 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0x1ea>
map():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Common.cpp:6
    10f0:	a8 e1       	ldi	r26, 0x18	; 24
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
    10f8:	2a e3       	ldi	r18, 0x3A	; 58
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    1104:	27 5e       	subi	r18, 0xE7	; 231
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	4f 4f       	sbci	r20, 0xFF	; 255
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	6a cf       	rjmp	.-300    	; 0xfe2 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xb8>
_ZN11TEMP_1904094ReadEh.constprop.34():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:113

      } break;

      default:{
               //This is a config problem and shall not happen at all
               temperature=999;
    110e:	27 ee       	ldi	r18, 0xE7	; 231
    1110:	33 e0       	ldi	r19, 0x03	; 3
    1112:	67 cf       	rjmp	.-306    	; 0xfe2 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xb8>
    1114:	27 ee       	ldi	r18, 0xE7	; 231
    1116:	33 e0       	ldi	r19, 0x03	; 3
    1118:	7d cf       	rjmp	.-262    	; 0x1014 <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xea>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:127
         LastReadTemp = ( temperature - OffSetDegree );
         } else {
          LastReadTemp =  temperature; 
         }
   } else {
      LastReadTemp =0;
    111a:	10 92 61 29 	sts	0x2961, r1	; 0x802961 <Station+0x7>
    111e:	10 92 62 29 	sts	0x2962, r1	; 0x802962 <Station+0x8>
    1122:	7c cf       	rjmp	.-264    	; 0x101c <TEMP_190409::Read(unsigned char) [clone .constprop.34]+0xf2>

00001124 <powerSave_TimerReset()>:
_Z20powerSave_TimerResetv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:651
 Output:      None
 Description: Reset the timer for powersave
 *************************************************************************************************************/ 
void powerSave_TimerReset(){

  while( powerSave_C != 0 ){
    1124:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <powerSave_C>
    1128:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <powerSave_C+0x1>
    112c:	89 2b       	or	r24, r25
    112e:	29 f0       	breq	.+10     	; 0x113a <powerSave_TimerReset()+0x16>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:652
    powerSave_C =0;
    1130:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <powerSave_C>
    1134:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <powerSave_C+0x1>
    1138:	f5 cf       	rjmp	.-22     	; 0x1124 <powerSave_TimerReset()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:654
  }
  powerSave_F=false;      /* we reset the powersave request */
    113a:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <powerSave_F>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:655
}
    113e:	08 95       	ret

00001140 <pwm_Adjust()>:
_Z10pwm_Adjustv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:564
 Output:      uint16_t 
 Description: Pwm adjustment
 Remarks: Addition of a FSM would remove the delay(10)
**********************************************************************************************************/
void pwm_Adjust(void)
{
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:570
    static uint16_t LastRun=0;
    uint16_t call_delta=0;
    int16_t temp_Diff=0;
    uint16_t temperature=999;
    
    if(LastRun>Ticks){
    1148:	20 91 2b 28 	lds	r18, 0x282B	; 0x80282b <pwm_Adjust()::LastRun>
    114c:	30 91 2c 28 	lds	r19, 0x282C	; 0x80282c <pwm_Adjust()::LastRun+0x1>
    1150:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <Ticks>
    1154:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <Ticks+0x1>
    1158:	82 17       	cp	r24, r18
    115a:	93 07       	cpc	r25, r19
    115c:	78 f4       	brcc	.+30     	; 0x117c <pwm_Adjust()+0x3c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:571
      call_delta=UINT16_MAX-LastRun+Ticks;
    115e:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <Ticks>
    1162:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <Ticks+0x1>
    1166:	01 97       	sbiw	r24, 0x01	; 1
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:573
    } else {
      call_delta=Ticks-LastRun;
    1168:	82 1b       	sub	r24, r18
    116a:	93 0b       	sbc	r25, r19
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:576
    }
    //We will adjust every 50ms the PWM value ( 20Hz )
    if(call_delta< DETLA_REG ){
    116c:	c2 97       	sbiw	r24, 0x32	; 50
    116e:	58 f4       	brcc	.+22     	; 0x1186 <pwm_Adjust()+0x46>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:577
      _NOP();
    1170:	00 00       	nop
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:637
      HeatPwr_Percent= ((current_PWM*100) / MAX_PWM_LIMIT );
      Station.SetPWM(current_PWM);
      adjustPWM_Running=0;
    }   
    
}
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	08 95       	ret
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:573
    uint16_t temperature=999;
    
    if(LastRun>Ticks){
      call_delta=UINT16_MAX-LastRun+Ticks;
    } else {
      call_delta=Ticks-LastRun;
    117c:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <Ticks>
    1180:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <Ticks+0x1>
    1184:	f1 cf       	rjmp	.-30     	; 0x1168 <pwm_Adjust()+0x28>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:579
    }
    //We will adjust every 50ms the PWM value ( 20Hz )
    if(call_delta< DETLA_REG ){
      _NOP();
    } else {
      LastRun=Ticks;
    1186:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <Ticks>
    118a:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <Ticks+0x1>
    118e:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <pwm_Adjust()::LastRun>
    1192:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <pwm_Adjust()::LastRun+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:580
      cli();
    1196:	f8 94       	cli
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:581
      adjustPWM_Running=1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 2a 28 	sts	0x282A, r24	; 0x80282a <adjustPWM_Running>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:582
      sei();
    119e:	78 94       	sei
Off():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:38
 Discription: Turns the PWM off
**********************************************************************************************************/
void PWM_190409::Off( void ) {

  //Disable PWM
  TCA0.SINGLE.CMP0BUF=0;
    11a0:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
    11a4:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
_Z10pwm_Adjustv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:584
      Station.PWM.Off();                          //switch off heater         
      delay(10);                                  //wait for some time (to get low pass filter in steady state)
    11a8:	6a e0       	ldi	r22, 0x0A	; 10
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <delay>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:585
      temperature = Station.Temp.Read(ADC_AVG);
    11b4:	0e 94 95 07 	call	0xf2a	; 0xf2a <TEMP_190409::Read(unsigned char) [clone .constprop.34]>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:587
      
      if(setpoint > temperature)
    11b8:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    11bc:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    11c0:	82 17       	cp	r24, r18
    11c2:	93 07       	cpc	r25, r19
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <pwm_Adjust()+0x88>
    11c6:	70 c0       	rjmp	.+224    	; 0x12a8 <pwm_Adjust()+0x168>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:589
      {
        temp_Diff = (int32_t)setpoint - (int32_t)temperature;
    11c8:	a0 91 20 28 	lds	r26, 0x2820	; 0x802820 <setpoint>
    11cc:	b0 91 21 28 	lds	r27, 0x2821	; 0x802821 <setpoint+0x1>
    11d0:	a8 1b       	sub	r26, r24
    11d2:	b9 0b       	sbc	r27, r25
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:590
        if(temp_Diff < 3)
    11d4:	a3 30       	cpi	r26, 0x03	; 3
    11d6:	b1 05       	cpc	r27, r1
    11d8:	0c f0       	brlt	.+2      	; 0x11dc <pwm_Adjust()+0x9c>
    11da:	51 c0       	rjmp	.+162    	; 0x127e <pwm_Adjust()+0x13e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:592
        {   
          current_PWM +=(int32_t)5;
    11dc:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <current_PWM>
    11e0:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <current_PWM+0x1>
    11e4:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <current_PWM+0x2>
    11e8:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <current_PWM+0x3>
    11ec:	05 96       	adiw	r24, 0x05	; 5
    11ee:	a1 1d       	adc	r26, r1
    11f0:	b1 1d       	adc	r27, r1
    11f2:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <current_PWM>
    11f6:	90 93 8e 28 	sts	0x288E, r25	; 0x80288e <current_PWM+0x1>
    11fa:	a0 93 8f 28 	sts	0x288F, r26	; 0x80288f <current_PWM+0x2>
    11fe:	b0 93 90 28 	sts	0x2890, r27	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:596
        } else {
          current_PWM = (int32_t)temp_Diff  * (int32_t)setpoint/ (int32_t)6 ;
        }
        if(current_PWM > MAX_PWM_LIMIT){   
    1202:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <current_PWM>
    1206:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <current_PWM+0x1>
    120a:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <current_PWM+0x2>
    120e:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <current_PWM+0x3>
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	98 40       	sbci	r25, 0x08	; 8
    1216:	a1 05       	cpc	r26, r1
    1218:	b1 05       	cpc	r27, r1
    121a:	64 f0       	brlt	.+24     	; 0x1234 <pwm_Adjust()+0xf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:597
           current_PWM = MAX_PWM_LIMIT;
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	98 e0       	ldi	r25, 0x08	; 8
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <current_PWM>
    1228:	90 93 8e 28 	sts	0x288E, r25	; 0x80288e <current_PWM+0x1>
    122c:	a0 93 8f 28 	sts	0x288F, r26	; 0x80288f <current_PWM+0x2>
    1230:	b0 93 90 28 	sts	0x2890, r27	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:632
      //We also check if we run into any current limit

      //Currentlimit not supported here....

      //After the current limit is applied we we will set the new value
      HeatPwr_Percent= ((current_PWM*100) / MAX_PWM_LIMIT );
    1234:	c0 90 8d 28 	lds	r12, 0x288D	; 0x80288d <current_PWM>
    1238:	d0 90 8e 28 	lds	r13, 0x288E	; 0x80288e <current_PWM+0x1>
    123c:	e0 90 8f 28 	lds	r14, 0x288F	; 0x80288f <current_PWM+0x2>
    1240:	f0 90 90 28 	lds	r15, 0x2890	; 0x802890 <current_PWM+0x3>
    1244:	a4 e6       	ldi	r26, 0x64	; 100
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	a7 01       	movw	r20, r14
    124a:	96 01       	movw	r18, r12
    124c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	38 e0       	ldi	r19, 0x08	; 8
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    125c:	20 93 9b 28 	sts	0x289B, r18	; 0x80289b <HeatPwr_Percent>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:633
      Station.SetPWM(current_PWM);
    1260:	b6 01       	movw	r22, r12
SetPWM():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:258
void HW_190409::SetPWM( uint16_t PWM_Value){
 
    if(PWM_Value>=MAX_PWM_LIMIT){
      PWM_Value = MAX_PWM_LIMIT;
    }
    PWM.On(PWM_Value);
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	c2 16       	cp	r12, r18
    1266:	28 e0       	ldi	r18, 0x08	; 8
    1268:	d2 06       	cpc	r13, r18
    126a:	10 f0       	brcs	.+4      	; 0x1270 <pwm_Adjust()+0x130>
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	78 e0       	ldi	r23, 0x08	; 8
    1270:	8f e5       	ldi	r24, 0x5F	; 95
    1272:	99 e2       	ldi	r25, 0x29	; 41
    1274:	0e 94 1d 01 	call	0x23a	; 0x23a <PWM_190409::On(unsigned int)>
_Z10pwm_Adjustv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:634
      adjustPWM_Running=0;
    1278:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <adjustPWM_Running>
    127c:	7a cf       	rjmp	.-268    	; 0x1172 <pwm_Adjust()+0x32>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:594
        temp_Diff = (int32_t)setpoint - (int32_t)temperature;
        if(temp_Diff < 3)
        {   
          current_PWM +=(int32_t)5;
        } else {
          current_PWM = (int32_t)temp_Diff  * (int32_t)setpoint/ (int32_t)6 ;
    127e:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    1282:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    1286:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__usmulhisi3>
    128a:	26 e0       	ldi	r18, 0x06	; 6
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    1296:	20 93 8d 28 	sts	0x288D, r18	; 0x80288d <current_PWM>
    129a:	30 93 8e 28 	sts	0x288E, r19	; 0x80288e <current_PWM+0x1>
    129e:	40 93 8f 28 	sts	0x288F, r20	; 0x80288f <current_PWM+0x2>
    12a2:	50 93 90 28 	sts	0x2890, r21	; 0x802890 <current_PWM+0x3>
    12a6:	ad cf       	rjmp	.-166    	; 0x1202 <pwm_Adjust()+0xc2>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:600
        }
        if(current_PWM > MAX_PWM_LIMIT){   
           current_PWM = MAX_PWM_LIMIT;
        }
      } 
      else if(setpoint < temperature)
    12a8:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    12ac:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    12b0:	28 17       	cp	r18, r24
    12b2:	39 07       	cpc	r19, r25
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <pwm_Adjust()+0x178>
    12b6:	be cf       	rjmp	.-132    	; 0x1234 <pwm_Adjust()+0xf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:602
      {
          temp_Diff = (int32_t)temperature - (int32_t)setpoint;
    12b8:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    12bc:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    12c0:	82 1b       	sub	r24, r18
    12c2:	93 0b       	sbc	r25, r19
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:603
          if(temp_Diff > 2)
    12c4:	03 97       	sbiw	r24, 0x03	; 3
    12c6:	dc f0       	brlt	.+54     	; 0x12fe <pwm_Adjust()+0x1be>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:605
          {
            current_PWM = 0;
    12c8:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <current_PWM>
    12cc:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <current_PWM+0x1>
    12d0:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <current_PWM+0x2>
    12d4:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:620
              } else {
                current_PWM--;
              }
            }
          }
          if(current_PWM < 0) { 
    12d8:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <current_PWM>
    12dc:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <current_PWM+0x1>
    12e0:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <current_PWM+0x2>
    12e4:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <current_PWM+0x3>
    12e8:	b7 ff       	sbrs	r27, 7
    12ea:	a4 cf       	rjmp	.-184    	; 0x1234 <pwm_Adjust()+0xf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:621
             current_PWM = 0;
    12ec:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <current_PWM>
    12f0:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <current_PWM+0x1>
    12f4:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <current_PWM+0x2>
    12f8:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <current_PWM+0x3>
    12fc:	9b cf       	rjmp	.-202    	; 0x1234 <pwm_Adjust()+0xf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:607
          temp_Diff = (int32_t)temperature - (int32_t)setpoint;
          if(temp_Diff > 2)
          {
            current_PWM = 0;
          } else {
            if(current_PWM>0){
    12fe:	c0 90 8d 28 	lds	r12, 0x288D	; 0x80288d <current_PWM>
    1302:	d0 90 8e 28 	lds	r13, 0x288E	; 0x80288e <current_PWM+0x1>
    1306:	e0 90 8f 28 	lds	r14, 0x288F	; 0x80288f <current_PWM+0x2>
    130a:	f0 90 90 28 	lds	r15, 0x2890	; 0x802890 <current_PWM+0x3>
    130e:	1c 14       	cp	r1, r12
    1310:	1d 04       	cpc	r1, r13
    1312:	1e 04       	cpc	r1, r14
    1314:	1f 04       	cpc	r1, r15
    1316:	04 f7       	brge	.-64     	; 0x12d8 <pwm_Adjust()+0x198>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:608
              if( ((int32_t)current_PWM/(int32_t)7) > 0){              
    1318:	87 e0       	ldi	r24, 0x07	; 7
    131a:	c8 16       	cp	r12, r24
    131c:	d1 04       	cpc	r13, r1
    131e:	e1 04       	cpc	r14, r1
    1320:	f1 04       	cpc	r15, r1
    1322:	b4 f1       	brlt	.+108    	; 0x1390 <pwm_Adjust()+0x250>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:609
                current_PWM -= (int32_t)current_PWM/(int32_t)7;
    1324:	c7 01       	movw	r24, r14
    1326:	b6 01       	movw	r22, r12
    1328:	29 ef       	ldi	r18, 0xF9	; 249
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f ef       	ldi	r20, 0xFF	; 255
    132e:	5f ef       	ldi	r21, 0xFF	; 255
    1330:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    1334:	c2 0e       	add	r12, r18
    1336:	d3 1e       	adc	r13, r19
    1338:	e4 1e       	adc	r14, r20
    133a:	f5 1e       	adc	r15, r21
    133c:	c0 92 8d 28 	sts	0x288D, r12	; 0x80288d <current_PWM>
    1340:	d0 92 8e 28 	sts	0x288E, r13	; 0x80288e <current_PWM+0x1>
    1344:	e0 92 8f 28 	sts	0x288F, r14	; 0x80288f <current_PWM+0x2>
    1348:	f0 92 90 28 	sts	0x2890, r15	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:610
                if( ((int32_t)current_PWM%(int32_t)7) > 3){
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	27 e0       	ldi	r18, 0x07	; 7
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 33 1b 	call	0x3666	; 0x3666 <__divmodsi4>
    135c:	64 30       	cpi	r22, 0x04	; 4
    135e:	71 05       	cpc	r23, r1
    1360:	81 05       	cpc	r24, r1
    1362:	91 05       	cpc	r25, r1
    1364:	0c f4       	brge	.+2      	; 0x1368 <pwm_Adjust()+0x228>
    1366:	b8 cf       	rjmp	.-144    	; 0x12d8 <pwm_Adjust()+0x198>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:611
                  if(current_PWM>0){
    1368:	1c 14       	cp	r1, r12
    136a:	1d 04       	cpc	r1, r13
    136c:	1e 04       	cpc	r1, r14
    136e:	1f 04       	cpc	r1, r15
    1370:	0c f0       	brlt	.+2      	; 0x1374 <pwm_Adjust()+0x234>
    1372:	b2 cf       	rjmp	.-156    	; 0x12d8 <pwm_Adjust()+0x198>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:612
                    current_PWM--;
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	c2 1a       	sub	r12, r18
    1378:	d1 08       	sbc	r13, r1
    137a:	e1 08       	sbc	r14, r1
    137c:	f1 08       	sbc	r15, r1
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:616
                  }
                }
              } else {
                current_PWM--;
    137e:	c0 92 8d 28 	sts	0x288D, r12	; 0x80288d <current_PWM>
    1382:	d0 92 8e 28 	sts	0x288E, r13	; 0x80288e <current_PWM+0x1>
    1386:	e0 92 8f 28 	sts	0x288F, r14	; 0x80288f <current_PWM+0x2>
    138a:	f0 92 90 28 	sts	0x2890, r15	; 0x802890 <current_PWM+0x3>
    138e:	a4 cf       	rjmp	.-184    	; 0x12d8 <pwm_Adjust()+0x198>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	c8 1a       	sub	r12, r24
    1394:	d1 08       	sbc	r13, r1
    1396:	e1 08       	sbc	r14, r1
    1398:	f1 08       	sbc	r15, r1
    139a:	f1 cf       	rjmp	.-30     	; 0x137e <pwm_Adjust()+0x23e>

0000139c <PWM_Off()>:
_Z7PWM_Offv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:544
 Output:      None
 Discription: Sets the PWM to zero Output ( Off ) 
**********************************************************************************************************/
void PWM_Off()
{
  cli();
    139c:	f8 94       	cli
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:545
    adjustPWM_Running=1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 2a 28 	sts	0x282A, r24	; 0x80282a <adjustPWM_Running>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:546
    current_PWM=0;
    13a4:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <current_PWM>
    13a8:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <current_PWM+0x1>
    13ac:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <current_PWM+0x2>
    13b0:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:547
    adjustPWM_Running=0;
    13b4:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <adjustPWM_Running>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:548
  sei();
    13b8:	78 94       	sei
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:549
}  
    13ba:	08 95       	ret

000013bc <command_if_get_setpoint()>:
_Z23command_if_get_setpointv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:388
 Description: returns the setpoint to a command inteface
 *************************************************************************************************************/   
uint16_t command_if_get_setpoint( void ){
     uint16_t value = 0;
     /* depending on the state we need to decide if we to read the setpoint or LastActiveTemp */
      switch( state ){
    13bc:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <state>
    13c0:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <state+0x1>
    13c4:	85 30       	cpi	r24, 0x05	; 5
    13c6:	91 05       	cpc	r25, r1
    13c8:	11 f0       	breq	.+4      	; 0x13ce <command_if_get_setpoint()+0x12>
    13ca:	07 97       	sbiw	r24, 0x07	; 7
    13cc:	29 f4       	brne	.+10     	; 0x13d8 <command_if_get_setpoint()+0x1c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:391
        case SLEEP:
        case POWERSAVE:{
            value = LastActiveTemp ;
    13ce:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <LastActiveTemp>
    13d2:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <LastActiveTemp+0x1>
    13d6:	08 95       	ret
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:395
        } break;

        default:{
          value = setpoint;
    13d8:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    13dc:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:399
        } break;
      }
      return value;
}
    13e0:	08 95       	ret

000013e2 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.h:160

  public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t hwserial_rx_pin, uint8_t hwserial_tx_pin, uint8_t hwserial_rx_pin_swap, uint8_t hwserial_tx_pin_swap, uint8_t dre_vect_num, uint8_t uart_mux, uint8_t uart_mux_swap);
    bool pins(uint8_t tx, uint8_t rx);
    bool swap(uint8_t state = 1);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    13e2:	dc 01       	movw	r26, r24
    13e4:	ed 91       	ld	r30, X+
    13e6:	fc 91       	ld	r31, X
    13e8:	04 88       	ldd	r0, Z+20	; 0x14
    13ea:	f5 89       	ldd	r31, Z+21	; 0x15
    13ec:	e0 2d       	mov	r30, r0
    13ee:	23 e0       	ldi	r18, 0x03	; 3
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	09 94       	ijmp

000013f4 <PWM_190409::ReadPWMValue()>:
_ZN10PWM_19040912ReadPWMValueEv():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:53
 Discription: Returns the RAW value ot the PWM
**********************************************************************************************************/  
uint16_t PWM_190409::ReadPWMValue( void ) {
    
    //Return current PWM value
    return TCA0.SINGLE.CMP0BUF;
    13f4:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
    13f8:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:55
    
}
    13fc:	08 95       	ret

000013fe <EERef::operator*() const>:
_ZNK5EERefdeEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:53
{
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
    13fe:	fc 01       	movw	r30, r24
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	fc 01       	movw	r30, r24
    1406:	ff 27       	eor	r31, r31
    1408:	90 fd       	sbrc	r25, 0
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <EERef::operator*() const+0x1a>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	94 e1       	ldi	r25, 0x14	; 20
    1410:	e8 2b       	or	r30, r24
    1412:	f9 2b       	or	r31, r25
    1414:	80 81       	ld	r24, Z
    1416:	08 95       	ret
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	93 e1       	ldi	r25, 0x13	; 19
    141c:	f9 cf       	rjmp	.-14     	; 0x1410 <EERef::operator*() const+0x12>

0000141e <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:70
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ec 01       	movw	r28, r24
    1426:	16 2f       	mov	r17, r22
_ZNK5EERefcvhEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:54
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    1428:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EERef::operator*() const>
_ZN5EERef6updateEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:70
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    142c:	81 17       	cp	r24, r17
    142e:	b9 f0       	breq	.+46     	; 0x145e <EERef::update(unsigned char)+0x40>
_ZN5EERefaSEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:58
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    1430:	88 81       	ld	r24, Y
    1432:	99 81       	ldd	r25, Y+1	; 0x01
nvm_write_byte():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:38

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    1434:	fc 01       	movw	r30, r24
    1436:	ff 27       	eor	r31, r31
    1438:	90 fd       	sbrc	r25, 0
    143a:	16 c0       	rjmp	.+44     	; 0x1468 <EERef::update(unsigned char)+0x4a>
_ZN5EERef6updateEh():
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	94 e1       	ldi	r25, 0x14	; 20
nvm_write_byte():
    1440:	e8 2b       	or	r30, r24
    1442:	f9 2b       	or	r31, r25
    1444:	10 83       	st	Z, r17
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:39
  uint8_t oldSREG = SREG;
    1446:	8f b7       	in	r24, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:40
  cli();
    1448:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:41
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
    144a:	9d e9       	ldi	r25, 0x9D	; 157
    144c:	23 e0       	ldi	r18, 0x03	; 3
    144e:	94 bf       	out	0x34, r25	; 52
    1450:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:42
  SREG = oldSREG;
    1454:	8f bf       	out	0x3f, r24	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:43
  while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
    1456:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
    145a:	81 fd       	sbrc	r24, 1
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <EERef::update(unsigned char)+0x38>
_ZN5EERef6updateEh():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:70
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    145e:	ce 01       	movw	r24, r28
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:38

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	93 e1       	ldi	r25, 0x13	; 19
    146c:	e9 cf       	rjmp	.-46     	; 0x1440 <EERef::update(unsigned char)+0x22>

0000146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>:
_ZN9HW_19040920read_StoreIronConfigEv.constprop.61():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:353
 Input:       None
 Output:      uint16_t 
 Description: Read previous saved temperature from EEPROM,
              If no previous value saved then set temperature to 50 degrees
 *************************************************************************************************************/    
SolderingIronType_t HW_190409::read_StoreIronConfig( void )
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <HW_190409::read_StoreIronConfig() [clone .constprop.61]+0x10>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    1482:	87 e0       	ldi	r24, 0x07	; 7
    1484:	c8 2e       	mov	r12, r24
    1486:	d1 2c       	mov	r13, r1
    1488:	c9 82       	std	Y+1, r12	; 0x01
    148a:	da 82       	std	Y+2, r13	; 0x02
_ZNK5EERefcvhEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:54

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EERef::operator*() const>
    1494:	18 2f       	mov	r17, r24
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    1496:	98 e0       	ldi	r25, 0x08	; 8
    1498:	e9 2e       	mov	r14, r25
    149a:	f1 2c       	mov	r15, r1
    149c:	e9 82       	std	Y+1, r14	; 0x01
    149e:	fa 82       	std	Y+2, r15	; 0x02
_ZNK5EERefcvhEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:54

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EERef::operator*() const>
_ZN9HW_19040920read_StoreIronConfigEv.constprop.61():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:360
  uint8_t mode=0;
  uint8_t moden=0;

   mode = EEPROM.read(7);
   moden= EEPROM.read(8);
   moden = ~moden;
    14a8:	80 95       	com	r24
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:362

   if( mode != moden ){
    14aa:	81 17       	cp	r24, r17
    14ac:	79 f0       	breq	.+30     	; 0x14cc <HW_190409::read_StoreIronConfig() [clone .constprop.61]+0x5e>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    14ae:	c9 82       	std	Y+1, r12	; 0x01
    14b0:	da 82       	std	Y+2, r13	; 0x02
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    14b2:	63 e0       	ldi	r22, 0x03	; 3
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    14bc:	e9 82       	std	Y+1, r14	; 0x01
    14be:	fa 82       	std	Y+2, r15	; 0x02
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    14c0:	6c ef       	ldi	r22, 0xFC	; 252
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
_ZN9HW_19040920read_StoreIronConfigEv.constprop.61():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:363
    mode=IRON_WELLER_RT;
    14ca:	13 e0       	ldi	r17, 0x03	; 3
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:368
    write_StoreIronConfig(IRON_WELLER_RT);
   }
   return (SolderingIronType_t)(mode);
   
}
    14cc:	81 2f       	mov	r24, r17
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	08 95       	ret

000014e4 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]>:
_ZN9HW_19040916SetSolderingIronE19SolderingIronType_t.constprop.62():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:283
 Function:    void SetSolderingIron()    
 Input:       SolderingIronType_t
 Output:      None
 Discription: Sets the Iron and configures VON accordingly
**********************************************************************************************************/
void HW_190409::SetSolderingIron(SolderingIronType_t Iron ){
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]+0xa>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	8c 01       	movw	r16, r24
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:285

    switch( Iron ){
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	11 f0       	breq	.+4      	; 0x14fe <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]+0x1a>
    14fa:	02 97       	sbiw	r24, 0x02	; 2
    14fc:	11 f5       	brne	.+68     	; 0x1542 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]+0x5e>
SetThermoType():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:11
    analogReference(VDD); 
};


void TEMP_190409::SetThermoType( ThermoeElementType_t tp){
   ElementType = tp;
    14fe:	00 93 63 29 	sts	0x2963, r16	; 0x802963 <Station+0x9>
    1502:	10 93 64 29 	sts	0x2964, r17	; 0x802964 <Station+0xa>
digitalWrite():
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	8e e1       	ldi	r24, 0x1E	; 30
    150a:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	9a 83       	std	Y+2, r25	; 0x02
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    1516:	60 2f       	mov	r22, r16
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    1520:	88 e0       	ldi	r24, 0x08	; 8
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	9a 83       	std	Y+2, r25	; 0x02
write_StoreIronConfig():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:340
 *************************************************************************************************************/    
void HW_190409::write_StoreIronConfig(SolderingIronType_t IronType)
{
            uint8_t mode = (uint8_t)(IronType);
            EEPROM.update(7, ( mode ) );
            EEPROM.update(8, (~mode) );
    1528:	60 2f       	mov	r22, r16
    152a:	60 95       	com	r22
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
_ZN9HW_19040916SetSolderingIronE19SolderingIronType_t.constprop.62():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:311
        Temp.SetThermoType(Type_K);
        Vin.SetConfiguredVIN(VIN_12V);
      }break;
    }
    write_StoreIronConfig(Iron);
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret
SetThermoType():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:11
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 93 63 29 	sts	0x2963, r24	; 0x802963 <Station+0x9>
    154a:	90 93 64 29 	sts	0x2964, r25	; 0x802964 <Station+0xa>
digitalWrite():
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	db cf       	rjmp	.-74     	; 0x1508 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]+0x24>

00001552 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)>:
_Z25ProcessRotaryEncoderInput20RotaryEncoderEvent_t():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:800


void ProcessRotaryEncoderInput( RotaryEncoderEvent_t event ){
//We got an event from the rotary encoder and may have multiple
//things that like to get informed about it....
if(0==RotaryEncoderLocked) {
    1552:	20 91 a0 28 	lds	r18, 0x28A0	; 0x8028a0 <RotaryEncoderLocked>
    1556:	21 11       	cpse	r18, r1
    1558:	80 c0       	rjmp	.+256    	; 0x165a <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x108>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:801
    switch(event){
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x10>
    1560:	45 c0       	rjmp	.+138    	; 0x15ec <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x9a>
    1562:	98 f4       	brcc	.+38     	; 0x158a <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x38>
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	29 f1       	breq	.+74     	; 0x15b4 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x62>
    156a:	03 97       	sbiw	r24, 0x03	; 3
    156c:	99 f1       	breq	.+102    	; 0x15d4 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x82>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:852

      }break;

    }
    /* sainity check */
      if(setpoint<MIN_TEMP){
    156e:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    1572:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    1576:	c2 97       	sbiw	r24, 0x32	; 50
    1578:	08 f0       	brcs	.+2      	; 0x157c <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x2a>
    157a:	65 c0       	rjmp	.+202    	; 0x1646 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:853
            setpoint=MIN_TEMP;
    157c:	82 e3       	ldi	r24, 0x32	; 50
    157e:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:855
      } else if( setpoint>MAX_TEMP){
            setpoint=MAX_TEMP;
    1580:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    1584:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
    1588:	08 95       	ret
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:801

void ProcessRotaryEncoderInput( RotaryEncoderEvent_t event ){
//We got an event from the rotary encoder and may have multiple
//things that like to get informed about it....
if(0==RotaryEncoderLocked) {
    switch(event){
    158a:	86 30       	cpi	r24, 0x06	; 6
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x40>
    1590:	4a c0       	rjmp	.+148    	; 0x1626 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xd4>
    1592:	d8 f1       	brcs	.+118    	; 0x160a <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xb8>
    1594:	07 97       	sbiw	r24, 0x07	; 7
    1596:	59 f7       	brne	.-42     	; 0x156e <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x1c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:839
            setpoint=MAX_TEMP;
          }
      } break;

      case RE_MOVE_RIGHT_FAST:{
          if(setpoint<(MAX_TEMP-5)){
    1598:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    159c:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15a0:	8d 3b       	cpi	r24, 0xBD	; 189
    15a2:	91 40       	sbci	r25, 0x01	; 1
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x56>
    15a6:	4c c0       	rjmp	.+152    	; 0x1640 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xee>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:840
            setpoint+=5;    
    15a8:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15ac:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15b0:	05 96       	adiw	r24, 0x05	; 5
    15b2:	0b c0       	rjmp	.+22     	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:803
//We got an event from the rotary encoder and may have multiple
//things that like to get informed about it....
if(0==RotaryEncoderLocked) {
    switch(event){
      case RE_MOVE_LEFT_SLOW:{
        if(setpoint> MIN_TEMP){
    15b4:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15b8:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15bc:	c3 97       	sbiw	r24, 0x33	; 51
    15be:	b8 f2       	brcs	.-82     	; 0x156e <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x1c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:804
            setpoint--;    
    15c0:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15c4:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15c8:	01 97       	sbiw	r24, 0x01	; 1
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:842

      case RE_MOVE_RIGHT_FAST:{
          if(setpoint<(MAX_TEMP-5)){
            setpoint+=5;    
          } else {
            setpoint=MAX_TEMP;
    15ca:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    15ce:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
    15d2:	cd cf       	rjmp	.-102    	; 0x156e <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x1c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:809
            setpoint--;    
        } 
      }break;

      case RE_MOVE_LEFT_MID:{
          if(setpoint>( MIN_TEMP + 2 ) ){
    15d4:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15d8:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15dc:	c5 97       	sbiw	r24, 0x35	; 53
    15de:	90 f0       	brcs	.+36     	; 0x1604 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xb2>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:810
            setpoint-=2;    
    15e0:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15e4:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15e8:	02 97       	sbiw	r24, 0x02	; 2
    15ea:	ef cf       	rjmp	.-34     	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:817
            setpoint=50;
          }
      } break;

    case RE_MOVE_LEFT_FAST:{
          if(setpoint>( MIN_TEMP + 5 ) ){
    15ec:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15f0:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    15f4:	c8 97       	sbiw	r24, 0x38	; 56
    15f6:	30 f0       	brcs	.+12     	; 0x1604 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xb2>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:818
            setpoint-=5;    
    15f8:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    15fc:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    1600:	05 97       	sbiw	r24, 0x05	; 5
    1602:	e3 cf       	rjmp	.-58     	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:820
          } else {
            setpoint=50;
    1604:	82 e3       	ldi	r24, 0x32	; 50
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	e0 cf       	rjmp	.-64     	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:825
          }     
      } break;

      case RE_MOVE_RIGHT_SLOW:{
        if(setpoint<MAX_TEMP){
    160a:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    160e:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    1612:	82 3c       	cpi	r24, 0xC2	; 194
    1614:	91 40       	sbci	r25, 0x01	; 1
    1616:	08 f0       	brcs	.+2      	; 0x161a <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xc8>
    1618:	aa cf       	rjmp	.-172    	; 0x156e <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x1c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:826
            setpoint++;    
    161a:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    161e:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	d2 cf       	rjmp	.-92     	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:831
          } 
      } break;

      case RE_MOVE_RIGHT_MID:{
          if(setpoint<(MAX_TEMP-2)){
    1626:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    162a:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    162e:	80 3c       	cpi	r24, 0xC0	; 192
    1630:	91 40       	sbci	r25, 0x01	; 1
    1632:	30 f4       	brcc	.+12     	; 0x1640 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0xee>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:832
            setpoint+=2;    
    1634:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    1638:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    163c:	02 96       	adiw	r24, 0x02	; 2
    163e:	c5 cf       	rjmp	.-118    	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:842

      case RE_MOVE_RIGHT_FAST:{
          if(setpoint<(MAX_TEMP-5)){
            setpoint+=5;    
          } else {
            setpoint=MAX_TEMP;
    1640:	82 ec       	ldi	r24, 0xC2	; 194
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	c2 cf       	rjmp	.-124    	; 0x15ca <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x78>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:854

    }
    /* sainity check */
      if(setpoint<MIN_TEMP){
            setpoint=MIN_TEMP;
      } else if( setpoint>MAX_TEMP){
    1646:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    164a:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    164e:	83 3c       	cpi	r24, 0xC3	; 195
    1650:	91 40       	sbci	r25, 0x01	; 1
    1652:	00 f1       	brcs	.+64     	; 0x1694 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x142>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:855
            setpoint=MAX_TEMP;
    1654:	82 ec       	ldi	r24, 0xC2	; 194
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	93 cf       	rjmp	.-218    	; 0x1580 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x2e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:860
  }

 } else {
   //For menu interaction we need to add a second set of functiosn to handle input...
   if(1==RotaryEncoderMenuEna){
    165a:	20 91 9f 28 	lds	r18, 0x289F	; 0x80289f <RotaryEncoderMenuEna>
    165e:	21 30       	cpi	r18, 0x01	; 1
    1660:	c9 f4       	brne	.+50     	; 0x1694 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x142>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:861
    switch(event){
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	b9 f0       	breq	.+46     	; 0x1696 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x144>
    1668:	85 30       	cpi	r24, 0x05	; 5
    166a:	91 05       	cpc	r25, r1
    166c:	f9 f0       	breq	.+62     	; 0x16ac <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x15a>
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	89 f4       	brne	.+34     	; 0x1694 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x142>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:889
        Station.SetSolderingIron(mode);
      }break;

      case RE_BTN_PRESS_END:{
        //If this is longer pressed than 30 seconds we will leave the config menu....
        if(btn_press_time>9999){
    1672:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    1676:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    167a:	80 31       	cpi	r24, 0x10	; 16
    167c:	97 42       	sbci	r25, 0x27	; 39
    167e:	50 f0       	brcs	.+20     	; 0x1694 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x142>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:891
          //We change the state to Welcome back.....
          state=WELCOME_TITLE;
    1680:	8b e0       	ldi	r24, 0x0B	; 11
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    1688:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
rotary_EncoderMenuDisable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:529
 Output:      None
 Description: Disable pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderMenuDisable()
{   
    RotaryEncoderMenuEna=0;
    168c:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <RotaryEncoderMenuEna>
rotary_EncoderEnable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:490
 Output:      None
 Description: Configure pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderEnable()
{   
    RotaryEncoderLocked=0;
    1690:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <RotaryEncoderLocked>
_Z25ProcessRotaryEncoderInput20RotaryEncoderEvent_t():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:905
   }
  }
 }
 

}
    1694:	08 95       	ret
GetSolderingIron():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:323
 Input:       None
 Output:      SolderingIronType_t
 Discription: Get the currently configured iron form the station
**********************************************************************************************************/
SolderingIronType_t HW_190409::GetSolderingIron( void ){
  return read_StoreIronConfig();
    1696:	0e 94 37 0a 	call	0x146e	; 0x146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>
_Z25ProcessRotaryEncoderInput20RotaryEncoderEvent_t():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:865
   if(1==RotaryEncoderMenuEna){
    switch(event){
      case RE_MOVE_LEFT_SLOW:{
        //We will change the type...
        uint8_t mode = (uint8_t)Station.GetSolderingIron();
        mode--;
    169a:	81 50       	subi	r24, 0x01	; 1
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:878
      }break;

      case RE_MOVE_RIGHT_SLOW:{
        uint8_t mode = (uint8_t)Station.GetSolderingIron();
        mode++;
        if(mode<=(uint8_t)IRON_UNKNOWN){
    169c:	88 23       	and	r24, r24
    169e:	51 f0       	breq	.+20     	; 0x16b4 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x162>
    16a0:	84 30       	cpi	r24, 0x04	; 4
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x154>
    16a4:	83 e0       	ldi	r24, 0x03	; 3
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:884
          mode=(uint8_t)IRON_HAKKO_FX8801;
        }
        if(mode>=(uint8_t)IRON_CNT){
          mode=((uint8_t)(IRON_CNT)-1);
        }
        Station.SetSolderingIron(mode);
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]>
GetSolderingIron():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:323
    16ac:	0e 94 37 0a 	call	0x146e	; 0x146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>
_Z25ProcessRotaryEncoderInput20RotaryEncoderEvent_t():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:877
        Station.SetSolderingIron(mode);
      }break;

      case RE_MOVE_RIGHT_SLOW:{
        uint8_t mode = (uint8_t)Station.GetSolderingIron();
        mode++;
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	f4 cf       	rjmp	.-24     	; 0x169c <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x14a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:879
        if(mode<=(uint8_t)IRON_UNKNOWN){
          mode=(uint8_t)IRON_HAKKO_FX8801;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	f7 cf       	rjmp	.-18     	; 0x16a6 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)+0x154>

000016b8 <Timer_250us_Callback()>:
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:685
 Input:       None
 Output:      None 
 Description: Handels the fault monitor, powersave and the rotary encoder, updates the display temp
**********************************************************************************************************/
void Timer_250us_Callback( void )
{
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:693
   static uint8_t input_a_buffer=0;
   static uint16_t calldelta=0;
   static uint8_t ms_prescaler=0;
   
   //This will generate 1ms Ticks for us
   if(ms_prescaler>=3){
    16bc:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <Timer_250us_Callback()::ms_prescaler>
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <Timer_250us_Callback()+0xe>
    16c4:	69 c1       	rjmp	.+722    	; 0x1998 <__DATA_REGION_LENGTH__+0x198>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:694
    ms_prescaler=0;
    16c6:	10 92 3d 28 	sts	0x283D, r1	; 0x80283d <Timer_250us_Callback()::ms_prescaler>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:695
    Ticks++;
    16ca:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <Ticks>
    16ce:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <Ticks+0x1>
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	80 93 3b 28 	sts	0x283B, r24	; 0x80283b <Ticks>
    16d8:	90 93 3c 28 	sts	0x283C, r25	; 0x80283c <Ticks+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:696
    if(delay_ms>0){
    16dc:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    16e0:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    16e4:	89 2b       	or	r24, r25
    16e6:	49 f0       	breq	.+18     	; 0x16fa <Timer_250us_Callback()+0x42>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:697
      delay_ms--;
    16e8:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    16ec:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <delay_ms>
    16f6:	90 93 a2 28 	sts	0x28A2, r25	; 0x8028a2 <delay_ms+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:701
    }

    //This generates 1 second ticks 
    if(onesecond_prescaler>1000){
    16fa:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <Timer_250us_Callback()::onesecond_prescaler>
    16fe:	90 91 3a 28 	lds	r25, 0x283A	; 0x80283a <Timer_250us_Callback()::onesecond_prescaler+0x1>
    1702:	89 3e       	cpi	r24, 0xE9	; 233
    1704:	23 e0       	ldi	r18, 0x03	; 3
    1706:	92 07       	cpc	r25, r18
    1708:	08 f4       	brcc	.+2      	; 0x170c <Timer_250us_Callback()+0x54>
    170a:	3a c1       	rjmp	.+628    	; 0x1980 <__DATA_REGION_LENGTH__+0x180>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:702
       onesecond_prescaler=0;
    170c:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <Timer_250us_Callback()::onesecond_prescaler>
    1710:	10 92 3a 28 	sts	0x283A, r1	; 0x80283a <Timer_250us_Callback()::onesecond_prescaler+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:703
       timestamp++;
    1714:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <timestamp>
    1718:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <timestamp+0x1>
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	80 93 9c 28 	sts	0x289C, r24	; 0x80289c <timestamp>
    1722:	90 93 9d 28 	sts	0x289D, r25	; 0x80289d <timestamp+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:704
       display_Temp = Station.Temp.GetLastValue();
    1726:	80 91 61 29 	lds	r24, 0x2961	; 0x802961 <Station+0x7>
    172a:	90 91 62 29 	lds	r25, 0x2962	; 0x802962 <Station+0x8>
    172e:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <display_Temp>
    1732:	90 93 9a 28 	sts	0x289A, r25	; 0x80289a <display_Temp+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:705
       if(powerSave_C == POWERSAVE_TIMEOUT )
    1736:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <powerSave_C>
    173a:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <powerSave_C+0x1>
    173e:	88 35       	cpi	r24, 0x58	; 88
    1740:	92 40       	sbci	r25, 0x02	; 2
    1742:	11 f5       	brne	.+68     	; 0x1788 <Timer_250us_Callback()+0xd0>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:707
       {
            powerSave_F = true;   
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 91 28 	sts	0x2891, r24	; 0x802891 <powerSave_F>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:713
       }else if ( powerSave_C > POWERSAVE_TIMEOUT ) {
          _NOP();
       } else {
          powerSave_C++;
       }
       faultMonitor( HeatPwr_Percent, Station.Temp.GetLastValue(),setpoint);
    174a:	40 91 20 28 	lds	r20, 0x2820	; 0x802820 <setpoint>
    174e:	50 91 21 28 	lds	r21, 0x2821	; 0x802821 <setpoint+0x1>
GetLastValue():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:142
 Input:       None
 Output:      uint16_t Temp in °C
 Discription: Returns the last read the Temp in °C
**********************************************************************************************************/
uint16_t TEMP_190409::GetLastValue( void ){
    return LastReadTemp;
    1752:	20 91 61 29 	lds	r18, 0x2961	; 0x802961 <Station+0x7>
    1756:	30 91 62 29 	lds	r19, 0x2962	; 0x802962 <Station+0x8>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:713
    175a:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <HeatPwr_Percent>
faultMonitor():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:927

  /* this is what we need only during the call of this function */
  int32_t delta_t_target= (int32_t)target-(int32_t)temperature;
  int32_t delta_t_temp=(int32_t)temperature-(int32_t)prev_temp;

  switch( state ) {
    175e:	e0 91 22 28 	lds	r30, 0x2822	; 0x802822 <state>
    1762:	f0 91 23 28 	lds	r31, 0x2823	; 0x802823 <state+0x1>
    1766:	e9 30       	cpi	r30, 0x09	; 9
    1768:	f1 05       	cpc	r31, r1
    176a:	08 f0       	brcs	.+2      	; 0x176e <Timer_250us_Callback()+0xb6>
    176c:	07 c1       	rjmp	.+526    	; 0x197c <__DATA_REGION_LENGTH__+0x17c>
    176e:	e5 54       	subi	r30, 0x45	; 69
    1770:	f4 4f       	sbci	r31, 0xF4	; 244
    1772:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <__tablejump2__>
    1776:	d7 0b       	sbc	r29, r23
    1778:	a4 0c       	add	r10, r4
    177a:	b2 0c       	add	r11, r2
    177c:	a4 0c       	add	r10, r4
    177e:	ab 0c       	add	r10, r11
    1780:	d7 0b       	sbc	r29, r23
    1782:	d7 0b       	sbc	r29, r23
    1784:	27 0c       	add	r2, r7
    1786:	27 0c       	add	r2, r7
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:708
       timestamp++;
       display_Temp = Station.Temp.GetLastValue();
       if(powerSave_C == POWERSAVE_TIMEOUT )
       {
            powerSave_F = true;   
       }else if ( powerSave_C > POWERSAVE_TIMEOUT ) {
    1788:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <powerSave_C>
    178c:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <powerSave_C+0x1>
    1790:	89 35       	cpi	r24, 0x59	; 89
    1792:	92 40       	sbci	r25, 0x02	; 2
    1794:	10 f0       	brcs	.+4      	; 0x179a <Timer_250us_Callback()+0xe2>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:709
          _NOP();
    1796:	00 00       	nop
    1798:	d8 cf       	rjmp	.-80     	; 0x174a <Timer_250us_Callback()+0x92>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:711
       } else {
          powerSave_C++;
    179a:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <powerSave_C>
    179e:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <powerSave_C+0x1>
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <powerSave_C>
    17a8:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <powerSave_C+0x1>
    17ac:	ce cf       	rjmp	.-100    	; 0x174a <Timer_250us_Callback()+0x92>
faultMonitor():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:933
 
    case POWERSAVE:
    case POWERSAVE_WAIT:
    case NOFAULT:{
      /* we need the current temp, the dest temp and the heatpower */
      if( (heatpwr_percent>0) && (delta_t_target>5) ){
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <Timer_250us_Callback()+0xfc>
    17b2:	4a c0       	rjmp	.+148    	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:924
  static uint8_t failcount=0; 
  static uint8_t recovery_delay=0;
  static uint8_t undervoltage_cnt=0;

  /* this is what we need only during the call of this function */
  int32_t delta_t_target= (int32_t)target-(int32_t)temperature;
    17b4:	c9 01       	movw	r24, r18
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	48 1b       	sub	r20, r24
    17c0:	59 0b       	sbc	r21, r25
    17c2:	6a 0b       	sbc	r22, r26
    17c4:	7b 0b       	sbc	r23, r27
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:933
 
    case POWERSAVE:
    case POWERSAVE_WAIT:
    case NOFAULT:{
      /* we need the current temp, the dest temp and the heatpower */
      if( (heatpwr_percent>0) && (delta_t_target>5) ){
    17c6:	46 30       	cpi	r20, 0x06	; 6
    17c8:	51 05       	cpc	r21, r1
    17ca:	61 05       	cpc	r22, r1
    17cc:	71 05       	cpc	r23, r1
    17ce:	e4 f1       	brlt	.+120    	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:925
  static uint8_t recovery_delay=0;
  static uint8_t undervoltage_cnt=0;

  /* this is what we need only during the call of this function */
  int32_t delta_t_target= (int32_t)target-(int32_t)temperature;
  int32_t delta_t_temp=(int32_t)temperature-(int32_t)prev_temp;
    17d0:	40 91 30 28 	lds	r20, 0x2830	; 0x802830 <faultMonitor(unsigned char, unsigned int, unsigned int)::prev_temp>
    17d4:	50 91 31 28 	lds	r21, 0x2831	; 0x802831 <faultMonitor(unsigned char, unsigned int, unsigned int)::prev_temp+0x1>
    17d8:	84 1b       	sub	r24, r20
    17da:	95 0b       	sbc	r25, r21
    17dc:	a1 09       	sbc	r26, r1
    17de:	b1 09       	sbc	r27, r1
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:935
    case POWERSAVE_WAIT:
    case NOFAULT:{
      /* we need the current temp, the dest temp and the heatpower */
      if( (heatpwr_percent>0) && (delta_t_target>5) ){
        /* We assume we are heating, as we havent reached the target now */
        if( (delta_t_temp<3) && ( delta_t_temp >=0 ) ){
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	a1 05       	cpc	r26, r1
    17e6:	b1 05       	cpc	r27, r1
    17e8:	50 f5       	brcc	.+84     	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:937
          /* We take this as error */
          failcount++;
    17ea:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:951
      } else {
        /* seems working fine */
        failcount=0;
      }
      
      if(failcount>6){
    17f4:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
    17f8:	87 30       	cpi	r24, 0x07	; 7
    17fa:	70 f0       	brcs	.+28     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:952
         ErrNo=1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <ErrNo>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:953
         failcount=0;
    1802:	10 92 2f 28 	sts	0x282F, r1	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:954
         state=TEMPSENS_FAIL;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    180e:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:955
         recovery_delay=10;
    1812:	8a e0       	ldi	r24, 0x0A	; 10
    1814:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:958
       }

       if(temperature>600){
    1818:	29 35       	cpi	r18, 0x59	; 89
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	38 07       	cpc	r19, r24
    181e:	60 f0       	brcs	.+24     	; 0x1838 <__DATA_REGION_LENGTH__+0x38>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:959
        ErrNo=3;
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <ErrNo>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:960
        state=TEMPSENS_FAIL;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    182e:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:961
        recovery_delay=10;
    1832:	8a e0       	ldi	r24, 0x0A	; 10
    1834:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1015

    case UNDERVOLTAGE:{

      if(Station.CheckLimits()!=UNDERVOLTAGE){
       state=NOFAULT;
       undervoltage_cnt=0;
    1838:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <faultMonitor(unsigned char, unsigned int, unsigned int)::undervoltage_cnt>
    183c:	18 c0       	rjmp	.+48     	; 0x186e <__DATA_REGION_LENGTH__+0x6e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:940
        if( (delta_t_temp<3) && ( delta_t_temp >=0 ) ){
          /* We take this as error */
          failcount++;
        } else {
          
          if(delta_t_temp> -10){
    183e:	87 3f       	cpi	r24, 0xF7	; 247
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	af 4f       	sbci	r26, 0xFF	; 255
    1844:	bf 4f       	sbci	r27, 0xFF	; 255
    1846:	8c f2       	brlt	.-94     	; 0x17ea <Timer_250us_Callback()+0x132>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:941
            failcount=0;
    1848:	10 92 2f 28 	sts	0x282F, r1	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
    184c:	d3 cf       	rjmp	.-90     	; 0x17f4 <Timer_250us_Callback()+0x13c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:980
    break;
    case SLEEP:
    case SLEEP_WAIT:{
  

      if(temperature>600){
    184e:	29 35       	cpi	r18, 0x59	; 89
    1850:	42 e0       	ldi	r20, 0x02	; 2
    1852:	34 07       	cpc	r19, r20
    1854:	60 f0       	brcs	.+24     	; 0x186e <__DATA_REGION_LENGTH__+0x6e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:981
        ErrNo=3;
    1856:	83 e0       	ldi	r24, 0x03	; 3
    1858:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <ErrNo>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:982
        state=TEMPSENS_FAIL;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    1864:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:983
        recovery_delay=10;
    1868:	8a e0       	ldi	r24, 0x0A	; 10
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:996
         }
    } break;

    case WAIT:{
      if(recovery_delay>0){
              recovery_delay--;
    186a:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1023
    default:{
      _NOP();
    } break;
  }
  
  prev_temp = temperature; 
    186e:	20 93 30 28 	sts	0x2830, r18	; 0x802830 <faultMonitor(unsigned char, unsigned int, unsigned int)::prev_temp>
    1872:	30 93 31 28 	sts	0x2831, r19	; 0x802831 <faultMonitor(unsigned char, unsigned int, unsigned int)::prev_temp+0x1>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:719
   } else {
    onesecond_prescaler++;
   }

   //This will gernate 100ms ticks
   if(_100ms_prescaler>=10){
    1876:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <Timer_250us_Callback()::_100ms_prescaler>
    187a:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <Timer_250us_Callback()::_100ms_prescaler+0x1>
    187e:	8a 30       	cpi	r24, 0x0A	; 10
    1880:	91 05       	cpc	r25, r1
    1882:	08 f4       	brcc	.+2      	; 0x1886 <__DATA_REGION_LENGTH__+0x86>
    1884:	83 c0       	rjmp	.+262    	; 0x198c <__DATA_REGION_LENGTH__+0x18c>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:720
    _100ms_prescaler=0;
    1886:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <Timer_250us_Callback()::_100ms_prescaler>
    188a:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <Timer_250us_Callback()::_100ms_prescaler+0x1>
digitalRead():
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:729
   }
  } else {
    ms_prescaler++;
  }

  if(  digitalRead( ROTARY_BTN ) == LOW ){
    1894:	81 11       	cpse	r24, r1
    1896:	84 c0       	rjmp	.+264    	; 0x19a0 <__DATA_REGION_LENGTH__+0x1a0>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:730
    if(btn_press_time==0){
    1898:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    189c:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    18a0:	89 2b       	or	r24, r25
    18a2:	21 f4       	brne	.+8      	; 0x18ac <__DATA_REGION_LENGTH__+0xac>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:731
      ProcessRotaryEncoderInput(RE_BTN_PRESS_BEGIN);  
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:733
    }
    if(btn_press_time<UINT16_MAX){
    18ac:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    18b0:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	49 f0       	breq	.+18     	; 0x18ca <__DATA_REGION_LENGTH__+0xca>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:734
      btn_press_time++;
    18b8:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    18bc:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	80 93 92 28 	sts	0x2892, r24	; 0x802892 <btn_press_time>
    18c6:	90 93 93 28 	sts	0x2893, r25	; 0x802893 <btn_press_time+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:746
    }
    btn_press_time=0;
  }

   /* We limit the buffer to 4bit / 4 sampels */ 
   input_a_buffer=input_a_buffer<<1;
    18ca:	c0 91 34 28 	lds	r28, 0x2834	; 0x802834 <Timer_250us_Callback()::input_a_buffer>
    18ce:	cc 0f       	add	r28, r28
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:747
   input_a_buffer=input_a_buffer&0x0F;
    18d0:	cf 70       	andi	r28, 0x0F	; 15
    18d2:	c0 93 34 28 	sts	0x2834, r28	; 0x802834 <Timer_250us_Callback()::input_a_buffer>
digitalRead():
    18d6:	86 e0       	ldi	r24, 0x06	; 6
    18d8:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:749
   
   if(LOW==digitalRead( ROTARY_TERM_B )){  
    18dc:	88 23       	and	r24, r24
    18de:	19 f0       	breq	.+6      	; 0x18e6 <__DATA_REGION_LENGTH__+0xe6>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:752
    input_a_buffer=input_a_buffer|0x00;
   } else {
    input_a_buffer=input_a_buffer|0x01;
    18e0:	c1 60       	ori	r28, 0x01	; 1
    18e2:	c0 93 34 28 	sts	0x2834, r28	; 0x802834 <Timer_250us_Callback()::input_a_buffer>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:755
   }

   if( (0x03==input_a_buffer) ){ /* Rising edge */
    18e6:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Timer_250us_Callback()::input_a_buffer>
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	f1 f4       	brne	.+60     	; 0x192a <__DATA_REGION_LENGTH__+0x12a>
    18ee:	c0 91 32 28 	lds	r28, 0x2832	; 0x802832 <Timer_250us_Callback()::calldelta>
    18f2:	d0 91 33 28 	lds	r29, 0x2833	; 0x802833 <Timer_250us_Callback()::calldelta+0x1>
digitalRead():
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:760
  /*  We ssume terminal B as stable
   *  if it is LOW now we moved CW else
   *  CCW
   */
    if( ROTARY_CW_LEVEL == digitalRead( ROTARY_TERM_A )){
    18fc:	81 11       	cpse	r24, r1
    18fe:	60 c0       	rjmp	.+192    	; 0x19c0 <__DATA_REGION_LENGTH__+0x1c0>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:761
       if(calldelta < 10) {
    1900:	ca 30       	cpi	r28, 0x0A	; 10
    1902:	d1 05       	cpc	r29, r1
    1904:	70 f0       	brcs	.+28     	; 0x1922 <__DATA_REGION_LENGTH__+0x122>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:764
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
        ProcessRotaryEncoderInput(RE_MOVE_LEFT_FAST);
    1906:	84 e0       	ldi	r24, 0x04	; 4
    1908:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:763
   *  CCW
   */
    if( ROTARY_CW_LEVEL == digitalRead( ROTARY_TERM_A )){
       if(calldelta < 10) {
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
    190a:	c2 33       	cpi	r28, 0x32	; 50
    190c:	d1 05       	cpc	r29, r1
    190e:	38 f0       	brcs	.+14     	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:766
        ProcessRotaryEncoderInput(RE_MOVE_LEFT_FAST);
      } else if ( calldelta < 250 ){
        ProcessRotaryEncoderInput(RE_MOVE_LEFT_MID);
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:765
    if( ROTARY_CW_LEVEL == digitalRead( ROTARY_TERM_A )){
       if(calldelta < 10) {
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
        ProcessRotaryEncoderInput(RE_MOVE_LEFT_FAST);
      } else if ( calldelta < 250 ){
    1914:	ca 3f       	cpi	r28, 0xFA	; 250
    1916:	d1 05       	cpc	r29, r1
    1918:	10 f0       	brcs	.+4      	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:768
        ProcessRotaryEncoderInput(RE_MOVE_LEFT_MID);
      } else {
       ProcessRotaryEncoderInput(RE_MOVE_LEFT_SLOW); 
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:770
      }
      calldelta=0;
    1922:	10 92 32 28 	sts	0x2832, r1	; 0x802832 <Timer_250us_Callback()::calldelta>
    1926:	10 92 33 28 	sts	0x2833, r1	; 0x802833 <Timer_250us_Callback()::calldelta+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:789
      calldelta=0;
    }
    
  }
  /* This is to prevent an interger overflow */
  if(calldelta<UINT16_MAX){
    192a:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <Timer_250us_Callback()::calldelta>
    192e:	90 91 33 28 	lds	r25, 0x2833	; 0x802833 <Timer_250us_Callback()::calldelta+0x1>
    1932:	8f 3f       	cpi	r24, 0xFF	; 255
    1934:	98 07       	cpc	r25, r24
    1936:	29 f0       	breq	.+10     	; 0x1942 <__DATA_REGION_LENGTH__+0x142>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:790
    calldelta++;
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	80 93 32 28 	sts	0x2832, r24	; 0x802832 <Timer_250us_Callback()::calldelta>
    193e:	90 93 33 28 	sts	0x2833, r25	; 0x802833 <Timer_250us_Callback()::calldelta+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:792
  }
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret
faultMonitor():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:995
              recovery_delay--;
         }
    } break;

    case WAIT:{
      if(recovery_delay>0){
    1948:	80 91 2e 28 	lds	r24, 0x282E	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
    194c:	88 23       	and	r24, r24
    194e:	09 f4       	brne	.+2      	; 0x1952 <__DATA_REGION_LENGTH__+0x152>
    1950:	8e cf       	rjmp	.-228    	; 0x186e <__DATA_REGION_LENGTH__+0x6e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:996
              recovery_delay--;
    1952:	81 50       	subi	r24, 0x01	; 1
    1954:	8a cf       	rjmp	.-236    	; 0x186a <__DATA_REGION_LENGTH__+0x6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1002
         }
    } break;


    case RECOVER:{
      if(recovery_delay>0){
    1956:	80 91 2e 28 	lds	r24, 0x282E	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
    195a:	88 23       	and	r24, r24
    195c:	41 f0       	breq	.+16     	; 0x196e <__DATA_REGION_LENGTH__+0x16e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1003
        recovery_delay--;
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <faultMonitor(unsigned char, unsigned int, unsigned int)::recovery_delay>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1014
    }

    case UNDERVOLTAGE:{

      if(Station.CheckLimits()!=UNDERVOLTAGE){
       state=NOFAULT;
    1964:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <state>
    1968:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <state+0x1>
    196c:	65 cf       	rjmp	.-310    	; 0x1838 <__DATA_REGION_LENGTH__+0x38>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1005

    case RECOVER:{
      if(recovery_delay>0){
        recovery_delay--;
      } else {
        failcount=0;
    196e:	10 92 2f 28 	sts	0x282F, r1	; 0x80282f <faultMonitor(unsigned char, unsigned int, unsigned int)::failcount>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1006
        state=NOFAULT;
    1972:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <state>
    1976:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <state+0x1>
    197a:	f4 cf       	rjmp	.-24     	; 0x1964 <__DATA_REGION_LENGTH__+0x164>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:1019
       state=NOFAULT;
       undervoltage_cnt=0;
      }
    } break;
    default:{
      _NOP();
    197c:	00 00       	nop
    197e:	77 cf       	rjmp	.-274    	; 0x186e <__DATA_REGION_LENGTH__+0x6e>
_Z20Timer_250us_Callbackv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:715
       } else {
          powerSave_C++;
       }
       faultMonitor( HeatPwr_Percent, Station.Temp.GetLastValue(),setpoint);
   } else {
    onesecond_prescaler++;
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <Timer_250us_Callback()::onesecond_prescaler>
    1986:	90 93 3a 28 	sts	0x283A, r25	; 0x80283a <Timer_250us_Callback()::onesecond_prescaler+0x1>
    198a:	75 cf       	rjmp	.-278    	; 0x1876 <__DATA_REGION_LENGTH__+0x76>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:723
   //This will gernate 100ms ticks
   if(_100ms_prescaler>=10){
    _100ms_prescaler=0;
  
   } else {
    _100ms_prescaler++;
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	80 93 35 28 	sts	0x2835, r24	; 0x802835 <Timer_250us_Callback()::_100ms_prescaler>
    1992:	90 93 36 28 	sts	0x2836, r25	; 0x802836 <Timer_250us_Callback()::_100ms_prescaler+0x1>
    1996:	7b cf       	rjmp	.-266    	; 0x188e <__DATA_REGION_LENGTH__+0x8e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:726
   }
  } else {
    ms_prescaler++;
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	80 93 3d 28 	sts	0x283D, r24	; 0x80283d <Timer_250us_Callback()::ms_prescaler>
    199e:	77 cf       	rjmp	.-274    	; 0x188e <__DATA_REGION_LENGTH__+0x8e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:738
    if(btn_press_time<UINT16_MAX){
      btn_press_time++;
    }
  } else {
    //We use this to generate Button press events
    if(btn_press_time>200){
    19a0:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    19a4:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    19a8:	89 3c       	cpi	r24, 0xC9	; 201
    19aa:	91 05       	cpc	r25, r1
    19ac:	20 f0       	brcs	.+8      	; 0x19b6 <__DATA_REGION_LENGTH__+0x1b6>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:740
      //We generate the button pressed events
      ProcessRotaryEncoderInput(RE_BTN_PRESS_END);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <ProcessRotaryEncoderInput(RotaryEncoderEvent_t)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:742
    }
    btn_press_time=0;
    19b6:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <btn_press_time>
    19ba:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <btn_press_time+0x1>
    19be:	85 cf       	rjmp	.-246    	; 0x18ca <__DATA_REGION_LENGTH__+0xca>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:774
      }
      calldelta=0;
         
    
    } else {
       if(calldelta < 10) {
    19c0:	ca 30       	cpi	r28, 0x0A	; 10
    19c2:	d1 05       	cpc	r29, r1
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <__DATA_REGION_LENGTH__+0x1c8>
    19c6:	ad cf       	rjmp	.-166    	; 0x1922 <__DATA_REGION_LENGTH__+0x122>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:777
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
         ProcessRotaryEncoderInput(RE_MOVE_RIGHT_FAST);
    19c8:	87 e0       	ldi	r24, 0x07	; 7
    19ca:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:776
         
    
    } else {
       if(calldelta < 10) {
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
    19cc:	c2 33       	cpi	r28, 0x32	; 50
    19ce:	d1 05       	cpc	r29, r1
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <__DATA_REGION_LENGTH__+0x1d4>
    19d2:	a5 cf       	rjmp	.-182    	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:780
         ProcessRotaryEncoderInput(RE_MOVE_RIGHT_FAST);
        
      } else if ( calldelta < 250 ){
        ProcessRotaryEncoderInput(RE_MOVE_RIGHT_MID);
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:779
       if(calldelta < 10) {
         /* We do nothing and ignore it, may bounced */
       } else if(calldelta<50){
         ProcessRotaryEncoderInput(RE_MOVE_RIGHT_FAST);
        
      } else if ( calldelta < 250 ){
    19d8:	ca 3f       	cpi	r28, 0xFA	; 250
    19da:	d1 05       	cpc	r29, r1
    19dc:	08 f4       	brcc	.+2      	; 0x19e0 <__DATA_REGION_LENGTH__+0x1e0>
    19de:	9f cf       	rjmp	.-194    	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:782
        ProcessRotaryEncoderInput(RE_MOVE_RIGHT_MID);
      } else {
        ProcessRotaryEncoderInput(RE_MOVE_RIGHT_SLOW);
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9c cf       	rjmp	.-200    	; 0x191e <__DATA_REGION_LENGTH__+0x11e>

000019e6 <analogReference.constprop.33>:
analogReference.constprop.33():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:35
{
  switch (mode)
  {
    case EXTERNAL:
    case VDD:
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | mode | ADC_SAMPCAP_bm; // Per datasheet, recommended SAMPCAP=1 at ref > 1v - we don't *KNOW* the external reference will be >1v, but it's probably more likely...
    19e6:	e0 e0       	ldi	r30, 0x00	; 0
    19e8:	f6 e0       	ldi	r31, 0x06	; 6
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	8f 7c       	andi	r24, 0xCF	; 207
    19ee:	80 65       	ori	r24, 0x50	; 80
    19f0:	82 83       	std	Z+2, r24	; 0x02
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring_analog.c:52
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | INTERNAL | ADC_SAMPCAP_bm; // Per datasheet, recommended SAMPCAP=1 at ref > 1v
      break;
    default:
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | VDD | ADC_SAMPCAP_bm; // Per datasheet, recommended SAMPCAP=1 at ref > 1v - we don't *KNOW* the external reference will be >1v, but it's probably more likely...
  }
}
    19f2:	08 95       	ret

000019f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>:
_ZN6TM163710displayStrEPcj.constprop.27():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:255
    } else {
        point(false);
    }
}

void TM1637::displayStr(char str[], uint16_t loop_delay) {
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	7c 01       	movw	r14, r24
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:256
    for (int i = 0; i < strlen(str); i++) {
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	e7 01       	movw	r28, r14
    1a08:	09 90       	ld	r0, Y+
    1a0a:	00 20       	and	r0, r0
    1a0c:	e9 f7       	brne	.-6      	; 0x1a08 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x14>
    1a0e:	21 97       	sbiw	r28, 0x01	; 1
    1a10:	ce 19       	sub	r28, r14
    1a12:	df 09       	sbc	r29, r15
    1a14:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <tm1637+0x4>
    1a18:	90 91 49 29 	lds	r25, 0x2949	; 0x802949 <tm1637+0x5>
    1a1c:	0c 17       	cp	r16, r28
    1a1e:	1d 07       	cpc	r17, r29
    1a20:	58 f5       	brcc	.+86     	; 0x1a78 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x84>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:257
        if (i + 1 > DIGITS) {
    1a22:	08 17       	cp	r16, r24
    1a24:	19 07       	cpc	r17, r25
    1a26:	f4 f0       	brlt	.+60     	; 0x1a64 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x70>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:258
            delay(loop_delay); //loop delay
    1a28:	64 ef       	ldi	r22, 0xF4	; 244
    1a2a:	71 e0       	ldi	r23, 0x01	; 1
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <delay>
    1a34:	d0 e0       	ldi	r29, 0x00	; 0
    1a36:	c0 e0       	ldi	r28, 0x00	; 0
    1a38:	9e 01       	movw	r18, r28
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:259
            for (int d = 0; d < DIGITS; d++) {
    1a3a:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <tm1637+0x4>
    1a3e:	90 91 49 29 	lds	r25, 0x2949	; 0x802949 <tm1637+0x5>
    1a42:	21 96       	adiw	r28, 0x01	; 1
    1a44:	28 17       	cp	r18, r24
    1a46:	39 07       	cpc	r19, r25
    1a48:	a4 f4       	brge	.+40     	; 0x1a72 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x7e>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:260
                display(d, str[d + i + 1 - DIGITS]); //loop display
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	ec 0f       	add	r30, r28
    1a4e:	fd 1f       	adc	r31, r29
    1a50:	e8 1b       	sub	r30, r24
    1a52:	f9 0b       	sbc	r31, r25
    1a54:	ee 0d       	add	r30, r14
    1a56:	ff 1d       	adc	r31, r15
    1a58:	60 81       	ld	r22, Z
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
    1a62:	ea cf       	rjmp	.-44     	; 0x1a38 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x44>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:263
            }
        } else {
            display(i, str[i]);
    1a64:	f7 01       	movw	r30, r14
    1a66:	e0 0f       	add	r30, r16
    1a68:	f1 1f       	adc	r31, r17
    1a6a:	60 81       	ld	r22, Z
    1a6c:	80 2f       	mov	r24, r16
    1a6e:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:256
        point(false);
    }
}

void TM1637::displayStr(char str[], uint16_t loop_delay) {
    for (int i = 0; i < strlen(str); i++) {
    1a72:	0f 5f       	subi	r16, 0xFF	; 255
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	c7 cf       	rjmp	.-114    	; 0x1a06 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x12>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:268
            display(i, str[i]);
        }
    }

    // display nothing
    for (int i = strlen(str); i < DIGITS; i++) {
    1a78:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <tm1637+0x4>
    1a7c:	90 91 49 29 	lds	r25, 0x2949	; 0x802949 <tm1637+0x5>
    1a80:	c8 17       	cp	r28, r24
    1a82:	d9 07       	cpc	r29, r25
    1a84:	34 f4       	brge	.+12     	; 0x1a92 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x9e>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:269
        display(i, 0x7f);
    1a86:	6f e7       	ldi	r22, 0x7F	; 127
    1a88:	8c 2f       	mov	r24, r28
    1a8a:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:268
            display(i, str[i]);
        }
    }

    // display nothing
    for (int i = strlen(str); i < DIGITS; i++) {
    1a8e:	21 96       	adiw	r28, 0x01	; 1
    1a90:	f3 cf       	rjmp	.-26     	; 0x1a78 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]+0x84>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:271
        display(i, 0x7f);
    }
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	08 95       	ret

00001aa0 <FE_190409::display_show_sleep(unsigned int)>:
_ZN9FE_19040918display_show_sleepEj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:260
 Output:      None
 Discription: Displays the sleep animaton, depending on the timestamp
**********************************************************************************************************/
void FE_190409::display_show_sleep( uint16_t timestamp){

  tm1637.displayStr("----");
    1aa0:	85 ec       	ldi	r24, 0xC5	; 197
    1aa2:	9b e7       	ldi	r25, 0x7B	; 123
    1aa4:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>

00001aa8 <display_Sleep()>:
_Z13display_Sleepv():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:668
 Output:      None
 Description: This will show the screensaver
 *************************************************************************************************************/    
void display_Sleep()
{
      PWM_Off();     //switch PWM off until rotary switch is pressed
    1aa8:	0e 94 ce 09 	call	0x139c	; 0x139c <PWM_Off()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:670
      /* Update display */
      Station.Frontend.display_show_sleep(timestamp);
    1aac:	60 91 9c 28 	lds	r22, 0x289C	; 0x80289c <timestamp>
    1ab0:	70 91 9d 28 	lds	r23, 0x289D	; 0x80289d <timestamp+0x1>
    1ab4:	8a e5       	ldi	r24, 0x5A	; 90
    1ab6:	99 e2       	ldi	r25, 0x29	; 41
    1ab8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <FE_190409::display_show_sleep(unsigned int)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:672
      /* End of update */
      Station.Temp.Read(ADC_AVG); /* we now can safe read the temperatur */
    1abc:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <TEMP_190409::Read(unsigned char) [clone .constprop.34]>

00001ac0 <FE_190409::display_show_TempError(unsigned char)>:
_ZN9FE_19040922display_show_TempErrorEh():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:220
 Function:    void display_show_TempError()
 Input:       uint8_t ErrNo
 Output:      None
 Discription: Shows the temperaturerror screen
**********************************************************************************************************/
void FE_190409::display_show_TempError(uint8_t ErrNo){
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	25 97       	sbiw	r28, 0x05	; 5
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	86 2f       	mov	r24, r22
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:221
    char err_str[] = "E-0 ";
    1ad0:	95 e0       	ldi	r25, 0x05	; 5
    1ad2:	e5 e8       	ldi	r30, 0x85	; 133
    1ad4:	f8 e7       	ldi	r31, 0x78	; 120
    1ad6:	de 01       	movw	r26, r28
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	01 90       	ld	r0, Z+
    1adc:	0d 92       	st	X+, r0
    1ade:	9a 95       	dec	r25
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <FE_190409::display_show_TempError(unsigned char)+0x1a>
    1ae2:	20 e3       	ldi	r18, 0x30	; 48
    1ae4:	26 0f       	add	r18, r22
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:222
    if(ErrNo<10){
    1ae6:	6a 30       	cpi	r22, 0x0A	; 10
    1ae8:	58 f4       	brcc	.+22     	; 0x1b00 <FE_190409::display_show_TempError(unsigned char)+0x40>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:228
        err_str[3]=48+ErrNo;
    } else {
        uint8_t ten = ErrNo / 10;
        uint8_t sgl = ErrNo - ( 10 * ten );
        err_str[2]=48+ten;
        err_str[3]=48+sgl;
    1aea:	2c 83       	std	Y+4, r18	; 0x04
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:232

        
    }
    tm1637.displayStr(err_str);
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:234

}
    1af4:	25 96       	adiw	r28, 0x05	; 5
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:225
void FE_190409::display_show_TempError(uint8_t ErrNo){
    char err_str[] = "E-0 ";
    if(ErrNo<10){
        err_str[3]=48+ErrNo;
    } else {
        uint8_t ten = ErrNo / 10;
    1b00:	6a e0       	ldi	r22, 0x0A	; 10
    1b02:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__udivmodqi4>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:227
        uint8_t sgl = ErrNo - ( 10 * ten );
        err_str[2]=48+ten;
    1b06:	90 e3       	ldi	r25, 0x30	; 48
    1b08:	98 0f       	add	r25, r24
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:228
        err_str[3]=48+sgl;
    1b0c:	96 ef       	ldi	r25, 0xF6	; 246
    1b0e:	89 9f       	mul	r24, r25
    1b10:	20 0d       	add	r18, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	ea cf       	rjmp	.-44     	; 0x1aea <FE_190409::display_show_TempError(unsigned char)+0x2a>

00001b16 <FE_190409::display_title()>:
_ZN9FE_19040913display_titleEv():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:70
 Input:       None
 Output:      None
 Discription: Shows the welcome title
**********************************************************************************************************/
void FE_190409::display_title( void ){
        tm1637.displayStr("boot");
    1b16:	8a e8       	ldi	r24, 0x8A	; 138
    1b18:	98 e7       	ldi	r25, 0x78	; 120
    1b1a:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>

00001b1e <FE_190409::display_welcome_logo()>:
_ZN9FE_19040920display_welcome_logoEv():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:58
 Input:       None
 Output:      None
 Discription: Shows the welcome logo
**********************************************************************************************************/
void FE_190409::display_welcome_logo( void ) {
    tm1637.displayStr("F1_6");
    1b1e:	8f e8       	ldi	r24, 0x8F	; 143
    1b20:	98 e7       	ldi	r25, 0x78	; 120
    1b22:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>

00001b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>:
_ZN5Print5writeEPKc.part.2.constprop.22():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.h:49
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    1b26:	fc 01       	movw	r30, r24
    1b28:	01 90       	ld	r0, Z+
    1b2a:	00 20       	and	r0, r0
    1b2c:	e9 f7       	brne	.-6      	; 0x1b28 <Print::write(char const*) [clone .part.2] [clone .constprop.22]+0x2>
    1b2e:	31 97       	sbiw	r30, 0x01	; 1
    1b30:	af 01       	movw	r20, r30
    1b32:	48 1b       	sub	r20, r24
    1b34:	59 0b       	sbc	r21, r25
    1b36:	bc 01       	movw	r22, r24
    1b38:	87 ea       	ldi	r24, 0xA7	; 167
    1b3a:	98 e2       	ldi	r25, 0x28	; 40
    1b3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <Print::write(unsigned char const*, unsigned int)>

00001b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>:
_ZN5Print11printNumberEmh.constprop.17():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:245
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	a1 97       	sbiw	r28, 0x21	; 33
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	de bf       	out	0x3e, r29	; 62
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:250
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1b5a:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:253

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1b5c:	42 30       	cpi	r20, 0x02	; 2
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x22>
    1b60:	4a e0       	ldi	r20, 0x0A	; 10
    1b62:	8e 01       	movw	r16, r28
    1b64:	0f 5d       	subi	r16, 0xDF	; 223
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:257

  do
  {
    char c = n % base;
    1b68:	84 2e       	mov	r8, r20
    1b6a:	91 2c       	mov	r9, r1
    1b6c:	b1 2c       	mov	r11, r1
    1b6e:	a1 2c       	mov	r10, r1
    1b70:	a5 01       	movw	r20, r10
    1b72:	94 01       	movw	r18, r8
    1b74:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
    1b78:	e6 2f       	mov	r30, r22
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:258
    n /= base;
    1b7a:	b9 01       	movw	r22, r18
    1b7c:	ca 01       	movw	r24, r20
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:260

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1b7e:	ea 30       	cpi	r30, 0x0A	; 10
    1b80:	dc f4       	brge	.+54     	; 0x1bb8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x78>
    1b82:	e0 5d       	subi	r30, 0xD0	; 208
    1b84:	d8 01       	movw	r26, r16
    1b86:	ee 93       	st	-X, r30
    1b88:	8d 01       	movw	r16, r26
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:261
  } while (n);
    1b8a:	23 2b       	or	r18, r19
    1b8c:	24 2b       	or	r18, r20
    1b8e:	25 2b       	or	r18, r21
    1b90:	79 f7       	brne	.-34     	; 0x1b70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x30>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.h:48
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	80 e0       	ldi	r24, 0x00	; 0
write():
    1b96:	10 97       	sbiw	r26, 0x00	; 0
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x60>
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>
_ZN5Print11printNumberEmh.constprop.17():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:264

  return write(str);
}
    1ba0:	a1 96       	adiw	r28, 0x21	; 33
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:260
  do
  {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1bb8:	e9 5c       	subi	r30, 0xC9	; 201
    1bba:	e4 cf       	rjmp	.-56     	; 0x1b84 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x44>

00001bbc <Print::print(int, int) [clone .constprop.6]>:
_ZN5Print5printEii.constprop.6():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:82
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long)b, base);
}

size_t Print::print(int n, int base)
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:84
{
  return print((long)n, base);
    1bc8:	6c 01       	movw	r12, r24
    1bca:	99 0f       	add	r25, r25
    1bcc:	ee 08       	sbc	r14, r14
    1bce:	ff 08       	sbc	r15, r15
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:100
  {
    return write(n);
  }
  else if (base == 10)
  {
    if (n < 0)
    1bd0:	f7 fe       	sbrs	r15, 7
    1bd2:	19 c0       	rjmp	.+50     	; 0x1c06 <Print::print(int, int) [clone .constprop.6]+0x4a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:74
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1bd4:	6d e2       	ldi	r22, 0x2D	; 45
    1bd6:	87 ea       	ldi	r24, 0xA7	; 167
    1bd8:	98 e2       	ldi	r25, 0x28	; 40
    1bda:	0e 94 37 02 	call	0x46e	; 0x46e <UartClass::write(unsigned char)>
    1bde:	ec 01       	movw	r28, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:103
  else if (base == 10)
  {
    if (n < 0)
    {
      int t = print('-');
      n = -n;
    1be0:	66 27       	eor	r22, r22
    1be2:	77 27       	eor	r23, r23
    1be4:	cb 01       	movw	r24, r22
    1be6:	6c 19       	sub	r22, r12
    1be8:	7d 09       	sbc	r23, r13
    1bea:	8e 09       	sbc	r24, r14
    1bec:	9f 09       	sbc	r25, r15
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:104
      return printNumber(n, 10) + t;
    1bee:	4a e0       	ldi	r20, 0x0A	; 10
    1bf0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
    1bf4:	8c 0f       	add	r24, r28
    1bf6:	9d 1f       	adc	r25, r29
_ZN5Print5printEii.constprop.6():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:85
}

size_t Print::print(int n, int base)
{
  return print((long)n, base);
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	08 95       	ret
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:106
    {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1c06:	4a e0       	ldi	r20, 0x0A	; 10
    1c08:	c7 01       	movw	r24, r14
    1c0a:	b6 01       	movw	r22, r12
_ZN5Print5printEii.constprop.6():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:85
}

size_t Print::print(int n, int base)
{
  return print((long)n, base);
}
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:106
    {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1c18:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>

00001c1c <Print::println(char const*) [clone .constprop.19]>:
_ZN5Print7printlnEPKc.constprop.19():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:151
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
write():
    1c20:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>
    1c24:	ec 01       	movw	r28, r24
    1c26:	84 e9       	ldi	r24, 0x94	; 148
    1c28:	98 e7       	ldi	r25, 0x78	; 120
    1c2a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>
_ZN5Print7printlnEPKc.constprop.19():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:156
{
  size_t n = print(c);
  n += println();
  return n;
}
    1c2e:	8c 0f       	add	r24, r28
    1c30:	9d 1f       	adc	r25, r29
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <Print::print(char const*) [clone .constprop.12]>:
_ZN5Print5printEPKc.constprop.12():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:67
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
    1c38:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>

00001c3c <PrintErrorLocation(unsigned char, unsigned char)>:
_Z18PrintErrorLocationhh():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:129
 Function:    void PrintErrorLocation()
 Input:       uint8_t startidx, uint8_t current_index 
 Output:      None 
 Description: Show the location of a parsing error
**********************************************************************************************************/
void PrintErrorLocation(uint8_t startidx, uint8_t current_index  ){
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	c8 2f       	mov	r28, r24
    1c46:	d6 2f       	mov	r29, r22
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:130
          Serial.print(F(" Syntax error near:\""));
    1c48:	87 e9       	ldi	r24, 0x97	; 151
    1c4a:	98 e7       	ldi	r25, 0x78	; 120
    1c4c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
    1c50:	0c 2f       	mov	r16, r28
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	08 5b       	subi	r16, 0xB8	; 184
    1c56:	17 4d       	sbci	r17, 0xD7	; 215
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:131
                        for(uint8_t c = startidx;c<current_index;c++){
    1c58:	cd 17       	cp	r28, r29
    1c5a:	a0 f4       	brcc	.+40     	; 0x1c84 <PrintErrorLocation(unsigned char, unsigned char)+0x48>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:132
                            if( msgbuffer[c]=='\n' ) {
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	61 91       	ld	r22, Z+
    1c60:	8f 01       	movw	r16, r30
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:133
                                Serial.print(F("[NEW LINE]"));
    1c62:	8c ea       	ldi	r24, 0xAC	; 172
    1c64:	98 e7       	ldi	r25, 0x78	; 120
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:132
 Description: Show the location of a parsing error
**********************************************************************************************************/
void PrintErrorLocation(uint8_t startidx, uint8_t current_index  ){
          Serial.print(F(" Syntax error near:\""));
                        for(uint8_t c = startidx;c<current_index;c++){
                            if( msgbuffer[c]=='\n' ) {
    1c66:	6a 30       	cpi	r22, 0x0A	; 10
    1c68:	21 f0       	breq	.+8      	; 0x1c72 <PrintErrorLocation(unsigned char, unsigned char)+0x36>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:134
                                Serial.print(F("[NEW LINE]"));
                            } else if ( msgbuffer[c]=='\r'){
    1c6a:	6d 30       	cpi	r22, 0x0D	; 13
    1c6c:	31 f4       	brne	.+12     	; 0x1c7a <PrintErrorLocation(unsigned char, unsigned char)+0x3e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:135
                            Serial.print(F("[RETURN]"));
    1c6e:	87 eb       	ldi	r24, 0xB7	; 183
    1c70:	98 e7       	ldi	r25, 0x78	; 120
    1c72:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:131
 Output:      None 
 Description: Show the location of a parsing error
**********************************************************************************************************/
void PrintErrorLocation(uint8_t startidx, uint8_t current_index  ){
          Serial.print(F(" Syntax error near:\""));
                        for(uint8_t c = startidx;c<current_index;c++){
    1c76:	cf 5f       	subi	r28, 0xFF	; 255
    1c78:	ef cf       	rjmp	.-34     	; 0x1c58 <PrintErrorLocation(unsigned char, unsigned char)+0x1c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:137
                            if( msgbuffer[c]=='\n' ) {
                                Serial.print(F("[NEW LINE]"));
                            } else if ( msgbuffer[c]=='\r'){
                            Serial.print(F("[RETURN]"));
                            } else {
                                Serial.write( msgbuffer[c]);
    1c7a:	87 ea       	ldi	r24, 0xA7	; 167
    1c7c:	98 e2       	ldi	r25, 0x28	; 40
    1c7e:	0e 94 37 02 	call	0x46e	; 0x46e <UartClass::write(unsigned char)>
    1c82:	f9 cf       	rjmp	.-14     	; 0x1c76 <PrintErrorLocation(unsigned char, unsigned char)+0x3a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:140
                            }
                        }
                    Serial.println("\"");
    1c84:	8a ea       	ldi	r24, 0xAA	; 170
    1c86:	98 e7       	ldi	r25, 0x78	; 120
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:141
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:140
                            Serial.print(F("[RETURN]"));
                            } else {
                                Serial.write( msgbuffer[c]);
                            }
                        }
                    Serial.println("\"");
    1c90:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>

00001c94 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)>:
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:150
 Function:    void display_show_Temperatur()
 Input:       uint16_t dispTemperature, uint8_t HeatPwr_Percent, uint16_t setpoint, fsmstate_t state, uint16_t timestamp
 Output:      None
 Discription: Shows the Mainscreen with temperatur
**********************************************************************************************************/
void FE_190409::display_show_Temperatur(uint16_t dispTemperature, uint8_t HeatPwr_Percent, uint16_t setpoint, fsmstate_t state, uint16_t timestamp ){
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	9f 92       	push	r9
    1c9e:	af 92       	push	r10
    1ca0:	bf 92       	push	r11
    1ca2:	cf 92       	push	r12
    1ca4:	df 92       	push	r13
    1ca6:	ef 92       	push	r14
    1ca8:	ff 92       	push	r15
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	6b 01       	movw	r12, r22
    1cb6:	79 01       	movw	r14, r18
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:154
    static uint16_t current_setpoint;
    static float dispval = 0;
    
    if(setpoint != current_setpoint){
    1cb8:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::current_setpoint>
    1cbc:	90 91 43 28 	lds	r25, 0x2843	; 0x802843 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::current_setpoint+0x1>
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	f1 f0       	breq	.+60     	; 0x1d02 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x6e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:156
        //We display for at least 2 ticks the new setpoint
         current_setpoint = setpoint;
    1cc6:	20 93 42 28 	sts	0x2842, r18	; 0x802842 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::current_setpoint>
    1cca:	30 93 43 28 	sts	0x2843, r19	; 0x802843 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::current_setpoint+0x1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:157
         display_timout = 2000;
    1cce:	80 ed       	ldi	r24, 0xD0	; 208
    1cd0:	97 e0       	ldi	r25, 0x07	; 7
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
set():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:282
    display(0x03, 0x7f);
}

// To take effect the next time it displays.
void TM1637::set(uint8_t brightness, uint8_t set_data, uint8_t set_addr) {
    cmd_set_data = set_data;
    1cd6:	80 e4       	ldi	r24, 0x40	; 64
    1cd8:	80 93 44 29 	sts	0x2944, r24	; 0x802944 <tm1637>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:283
    cmd_set_addr = set_addr;
    1cdc:	80 ec       	ldi	r24, 0xC0	; 192
    1cde:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <tm1637+0x1>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:285
    //Set the brightness and it takes effect the next time it displays.
    cmd_disp_ctrl = 0x88 + brightness;
    1ce2:	8f e8       	ldi	r24, 0x8F	; 143
    1ce4:	80 93 46 29 	sts	0x2946, r24	; 0x802946 <tm1637+0x2>
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:159
         tm1637.set(BRIGHTEST);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;
         dispval = setpoint;
    1ce8:	b9 01       	movw	r22, r18
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 a9 19 	call	0x3352	; 0x3352 <__floatunsisf>
    1cf2:	60 93 3e 28 	sts	0x283E, r22	; 0x80283e <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval>
    1cf6:	70 93 3f 28 	sts	0x283F, r23	; 0x80283f <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x1>
    1cfa:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x2>
    1cfe:	90 93 41 28 	sts	0x2841, r25	; 0x802841 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:163
         
    } 
    
    if(display_timout > 0){
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	89 2b       	or	r24, r25
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x78>
    1d0a:	4f c0       	rjmp	.+158    	; 0x1daa <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x116>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:165
            //We do nothing right now
            dispval = setpoint;
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 a9 19 	call	0x3352	; 0x3352 <__floatunsisf>
    1d16:	60 93 3e 28 	sts	0x283E, r22	; 0x80283e <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval>
    1d1a:	70 93 3f 28 	sts	0x283F, r23	; 0x80283f <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x1>
    1d1e:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x2>
    1d22:	90 93 41 28 	sts	0x2841, r25	; 0x802841 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:180

    // Displays number with decimal places (no decimal point implementation)
    // Colon is used instead of decimal point if decimal == 2
    // Be aware of int size limitations (up to +-2^15 = +-32767)
    uint8_t DIGITS = 4;
    int number = round(fabs(dispval) * pow(10, 0));
    1d26:	60 91 3e 28 	lds	r22, 0x283E	; 0x80283e <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval>
    1d2a:	70 91 3f 28 	lds	r23, 0x283F	; 0x80283f <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x1>
    1d2e:	80 91 40 28 	lds	r24, 0x2840	; 0x802840 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x2>
    1d32:	90 91 41 28 	lds	r25, 0x2841	; 0x802841 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x3>
    1d36:	9f 77       	andi	r25, 0x7F	; 127
    1d38:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <round>
    1d3c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fixsfsi>
    1d40:	8b 01       	movw	r16, r22
    1d42:	c3 e0       	ldi	r28, 0x03	; 3
    1d44:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:196
            }
  
            number /= 10;
          } else {
                if(dispTemperature<setpoint){
                  uint8_t timediv=millis()/500;
    1d46:	84 ef       	ldi	r24, 0xF4	; 244
    1d48:	48 2e       	mov	r4, r24
    1d4a:	55 24       	eor	r5, r5
    1d4c:	53 94       	inc	r5
    1d4e:	61 2c       	mov	r6, r1
    1d50:	71 2c       	mov	r7, r1
point():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:291
}

// Whether to light the clock point ":".
// To take effect the next time it displays.
void TM1637::point(boolean PointFlag) {
    _PointFlag = PointFlag;
    1d52:	99 24       	eor	r9, r9
    1d54:	93 94       	inc	r9
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:193
                tm1637.display(j, number % 10);
            } else {
                tm1637.display(j, 0x7f);    // display nothing
            }
  
            number /= 10;
    1d56:	9a e0       	ldi	r25, 0x0A	; 10
    1d58:	a9 2e       	mov	r10, r25
    1d5a:	b1 2c       	mov	r11, r1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:185
    int number = round(fabs(dispval) * pow(10, 0));

    for (int i = 0; i < DIGITS; ++i) {
        int j = DIGITS - i - 1;

          if(j!=0){
    1d5c:	20 97       	sbiw	r28, 0x00	; 0
    1d5e:	e1 f1       	breq	.+120    	; 0x1dd8 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x144>
point():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:291
    1d60:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <tm1637+0x3>
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:190
            tm1637.point(false);
            if (number != 0) {
                tm1637.display(j, number % 10);
            } else {
                tm1637.display(j, 0x7f);    // display nothing
    1d64:	6f e7       	ldi	r22, 0x7F	; 127
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:187
    for (int i = 0; i < DIGITS; ++i) {
        int j = DIGITS - i - 1;

          if(j!=0){
            tm1637.point(false);
            if (number != 0) {
    1d66:	01 15       	cp	r16, r1
    1d68:	11 05       	cpc	r17, r1
    1d6a:	29 f0       	breq	.+10     	; 0x1d76 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0xe2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:188
                tm1637.display(j, number % 10);
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	b5 01       	movw	r22, r10
    1d70:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divmodhi4>
    1d74:	68 2f       	mov	r22, r24
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:190
            } else {
                tm1637.display(j, 0x7f);    // display nothing
    1d76:	8c 2f       	mov	r24, r28
    1d78:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:193
            }
  
            number /= 10;
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	b5 01       	movw	r22, r10
    1d80:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divmodhi4>
    1d84:	8b 01       	movw	r16, r22
    1d86:	21 97       	sbiw	r28, 0x01	; 1
    1d88:	48 f7       	brcc	.-46     	; 0x1d5c <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0xc8>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:210
                tm1637.display(0, ' ');    // display nothing
          }
    }


}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	9f 90       	pop	r9
    1da0:	7f 90       	pop	r7
    1da2:	6f 90       	pop	r6
    1da4:	5f 90       	pop	r5
    1da6:	4f 90       	pop	r4
    1da8:	08 95       	ret
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:167
    
    if(display_timout > 0){
            //We do nothing right now
            dispval = setpoint;
    } else {
            dispval = dispTemperature;
    1daa:	b6 01       	movw	r22, r12
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	0e 94 a9 19 	call	0x3352	; 0x3352 <__floatunsisf>
    1db4:	60 93 3e 28 	sts	0x283E, r22	; 0x80283e <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval>
    1db8:	70 93 3f 28 	sts	0x283F, r23	; 0x80283f <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x1>
    1dbc:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x2>
    1dc0:	90 93 41 28 	sts	0x2841, r25	; 0x802841 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)::dispval+0x3>
set():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:282
    display(0x03, 0x7f);
}

// To take effect the next time it displays.
void TM1637::set(uint8_t brightness, uint8_t set_data, uint8_t set_addr) {
    cmd_set_data = set_data;
    1dc4:	80 e4       	ldi	r24, 0x40	; 64
    1dc6:	80 93 44 29 	sts	0x2944, r24	; 0x802944 <tm1637>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:283
    cmd_set_addr = set_addr;
    1dca:	80 ec       	ldi	r24, 0xC0	; 192
    1dcc:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <tm1637+0x1>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:285
    //Set the brightness and it takes effect the next time it displays.
    cmd_disp_ctrl = 0x88 + brightness;
    1dd0:	8a e8       	ldi	r24, 0x8A	; 138
    1dd2:	80 93 46 29 	sts	0x2946, r24	; 0x802946 <tm1637+0x2>
    1dd6:	a7 cf       	rjmp	.-178    	; 0x1d26 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x92>
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:195
                tm1637.display(j, 0x7f);    // display nothing
            }
  
            number /= 10;
          } else {
                if(dispTemperature<setpoint){
    1dd8:	ce 14       	cp	r12, r14
    1dda:	df 04       	cpc	r13, r15
    1ddc:	88 f4       	brcc	.+34     	; 0x1e00 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x16c>
millis():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
    1dde:	2f b7       	in	r18, 0x3f	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:88
  cli();
    1de0:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
    1de2:	60 91 a3 28 	lds	r22, 0x28A3	; 0x8028a3 <timer_millis>
    1de6:	70 91 a4 28 	lds	r23, 0x28A4	; 0x8028a4 <timer_millis+0x1>
    1dea:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <timer_millis+0x2>
    1dee:	90 91 a6 28 	lds	r25, 0x28A6	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:92

  SREG = status;
    1df2:	2f bf       	out	0x3f, r18	; 63
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:196
                  uint8_t timediv=millis()/500;
    1df4:	a3 01       	movw	r20, r6
    1df6:	92 01       	movw	r18, r4
    1df8:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:197
                  if(timediv%2==0){
    1dfc:	20 fd       	sbrc	r18, 0
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x17a>
point():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:291
}

// Whether to light the clock point ":".
// To take effect the next time it displays.
void TM1637::point(boolean PointFlag) {
    _PointFlag = PointFlag;
    1e00:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <tm1637+0x3>
_ZN9FE_19040923display_show_TemperaturEjhj10fsmstate_tj():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:205
                    tm1637.point(true);
                  }
                } else {
                  tm1637.point(false);
                }
                tm1637.display(0, ' ');    // display nothing
    1e04:	60 e2       	ldi	r22, 0x20	; 32
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
    1e0c:	bc cf       	rjmp	.-136    	; 0x1d86 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0xf2>
point():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:291
    1e0e:	90 92 47 29 	sts	0x2947, r9	; 0x802947 <tm1637+0x3>
    1e12:	f8 cf       	rjmp	.-16     	; 0x1e04 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)+0x170>

00001e14 <__vector_18>:
__vector_18():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:50
#error "Don't know what the Data Received interrupt vector is called for Serial"
#endif

#if defined(HWSERIAL0_DRE_VECTOR)
ISR(HWSERIAL0_DRE_VECTOR)
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	2f 93       	push	r18
    1e20:	3f 93       	push	r19
    1e22:	4f 93       	push	r20
    1e24:	5f 93       	push	r21
    1e26:	6f 93       	push	r22
    1e28:	7f 93       	push	r23
    1e2a:	8f 93       	push	r24
    1e2c:	9f 93       	push	r25
    1e2e:	af 93       	push	r26
    1e30:	bf 93       	push	r27
    1e32:	ef 93       	push	r30
    1e34:	ff 93       	push	r31
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:51
  Serial._tx_data_empty_irq();
    1e36:	87 ea       	ldi	r24, 0xA7	; 167
    1e38:	98 e2       	ldi	r25, 0x28	; 40
    1e3a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UartClass::_tx_data_empty_irq()>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:52
}
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <__vector_17>:
__vector_17():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:41

#if defined(HAVE_HWSERIAL0)

#if defined(HWSERIAL0_RXC_VECTOR)
ISR(HWSERIAL0_RXC_VECTOR)
{
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	2f 93       	push	r18
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:59
// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_rx_complete_irq(void)
{
  //if (bit_is_clear(*_rxdatah, USART_PERR_bp)) {
  if (!(((*_hwserial_module).RXDATAH) & USART_PERR_bm)) {
    1e74:	e0 91 b3 28 	lds	r30, 0x28B3	; 0x8028b3 <Serial+0xc>
    1e78:	f0 91 b4 28 	lds	r31, 0x28B4	; 0x8028b4 <Serial+0xd>
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	81 fd       	sbrc	r24, 1
    1e80:	1b c0       	rjmp	.+54     	; 0x1eb8 <__vector_17+0x58>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:62
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = (*_hwserial_module).RXDATAL;
    1e82:	90 81       	ld	r25, Z
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:63
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e84:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <Serial+0x16>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:69

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail)
    1e8c:	20 91 be 28 	lds	r18, 0x28BE	; 0x8028be <Serial+0x17>
    1e90:	82 17       	cp	r24, r18
    1e92:	41 f0       	breq	.+16     	; 0x1ea4 <__vector_17+0x44>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:71
    {
      _rx_buffer[_rx_buffer_head] = c;
    1e94:	e0 91 bd 28 	lds	r30, 0x28BD	; 0x8028bd <Serial+0x16>
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	e9 55       	subi	r30, 0x59	; 89
    1e9c:	f7 4d       	sbci	r31, 0xD7	; 215
    1e9e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:72
      _rx_buffer_head = i;
    1ea0:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <Serial+0x16>
__vector_17():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART0.cpp:43
  Serial._rx_complete_irq();
}
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti
_rx_complete_irq():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART_private.h:78
    }
  } 
  else
  {
    // Parity error, read byte but discard it
    (*_hwserial_module).RXDATAL;
    1eb8:	80 81       	ld	r24, Z
    1eba:	f4 cf       	rjmp	.-24     	; 0x1ea4 <__vector_17+0x44>

00001ebc <__vector_25>:
__vector_25():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:74
#elif defined(MILLIS_USE_TIMERB2)
ISR(TCB2_INT_vect)
#else // fallback or defined(MILLIS_USE_TIMERB3)
ISR(TCB3_INT_vect)
#endif
{
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:75
  timer_millis++;
    1ece:	80 91 a3 28 	lds	r24, 0x28A3	; 0x8028a3 <timer_millis>
    1ed2:	90 91 a4 28 	lds	r25, 0x28A4	; 0x8028a4 <timer_millis+0x1>
    1ed6:	a0 91 a5 28 	lds	r26, 0x28A5	; 0x8028a5 <timer_millis+0x2>
    1eda:	b0 91 a6 28 	lds	r27, 0x28A6	; 0x8028a6 <timer_millis+0x3>
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	b1 1d       	adc	r27, r1
    1ee4:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <timer_millis>
    1ee8:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <timer_millis+0x1>
    1eec:	a0 93 a5 28 	sts	0x28A5, r26	; 0x8028a5 <timer_millis+0x2>
    1ef0:	b0 93 a6 28 	sts	0x28A6, r27	; 0x8028a6 <timer_millis+0x3>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:78

  /* Clear flag */
  _timer->INTFLAGS = TCB_CAPT_bm;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:79
}
    1efa:	bf 91       	pop	r27
    1efc:	af 91       	pop	r26
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <__vector_36>:
__vector_36():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:19
 Input:       void* 
 Output:      None
 Discription: Interrupt with callback for 100us timing and callback
**********************************************************************************************************/
volatile uint32_t ticks=0;
ISR( TCB3_INT_vect ){
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	ef 93       	push	r30
    1f30:	ff 93       	push	r31
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:22
  static uint8_t divider = 0;
  //Inrease ticks
  ticks++;
    1f32:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <ticks>
    1f36:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <ticks+0x1>
    1f3a:	a0 91 28 28 	lds	r26, 0x2828	; 0x802828 <ticks+0x2>
    1f3e:	b0 91 29 28 	lds	r27, 0x2829	; 0x802829 <ticks+0x3>
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	a1 1d       	adc	r26, r1
    1f46:	b1 1d       	adc	r27, r1
    1f48:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <ticks>
    1f4c:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <ticks+0x1>
    1f50:	a0 93 28 28 	sts	0x2828, r26	; 0x802828 <ticks+0x2>
    1f54:	b0 93 29 28 	sts	0x2829, r27	; 0x802829 <ticks+0x3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:24
  /* Clear flag */
  TCB3.INTFLAGS = TCB_CAPT_bm;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <__TEXT_REGION_LENGTH__+0x7f4ab6>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:25
  if(__cb_250us_Timer != nullptr){
    1f5e:	e0 91 46 28 	lds	r30, 0x2846	; 0x802846 <__cb_250us_Timer>
    1f62:	f0 91 47 28 	lds	r31, 0x2847	; 0x802847 <__cb_250us_Timer+0x1>
    1f66:	30 97       	sbiw	r30, 0x00	; 0
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <__vector_36+0x60>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:26
      __cb_250us_Timer();
    1f6a:	09 95       	icall
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:29
      
  }
  if(divider<3){
    1f6c:	80 91 25 28 	lds	r24, 0x2825	; 0x802825 <__vector_36::divider>
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	b0 f4       	brcc	.+44     	; 0x1fa0 <__vector_36+0x94>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:30
    divider++;
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <__vector_36::divider>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:37
    divider = 0;
    if(__cb_fe1ms_Timer != nullptr){
      __cb_fe1ms_Timer->display_1ms_tick();  
    }
  }
}
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	bf 91       	pop	r27
    1f84:	af 91       	pop	r26
    1f86:	9f 91       	pop	r25
    1f88:	8f 91       	pop	r24
    1f8a:	7f 91       	pop	r23
    1f8c:	6f 91       	pop	r22
    1f8e:	5f 91       	pop	r21
    1f90:	4f 91       	pop	r20
    1f92:	3f 91       	pop	r19
    1f94:	2f 91       	pop	r18
    1f96:	0f 90       	pop	r0
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	0f 90       	pop	r0
    1f9c:	1f 90       	pop	r1
    1f9e:	18 95       	reti
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:32
      
  }
  if(divider<3){
    divider++;
  } else {
    divider = 0;
    1fa0:	10 92 25 28 	sts	0x2825, r1	; 0x802825 <__vector_36::divider>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:33
    if(__cb_fe1ms_Timer != nullptr){
    1fa4:	c0 91 44 28 	lds	r28, 0x2844	; 0x802844 <__cb_fe1ms_Timer>
    1fa8:	d0 91 45 28 	lds	r29, 0x2845	; 0x802845 <__cb_fe1ms_Timer+0x1>
    1fac:	20 97       	sbiw	r28, 0x00	; 0
    1fae:	29 f3       	breq	.-54     	; 0x1f7a <__vector_36+0x6e>
display_1ms_tick():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:17
 Output:      None
 Discription: To be called every 1ms for internal timing
**********************************************************************************************************/
void FE_190409::display_1ms_tick( void ){
   static uint8_t value=0;
   if(value>0){
    1fb0:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <__data_end>
    1fb4:	88 23       	and	r24, r24
    1fb6:	81 f0       	breq	.+32     	; 0x1fd8 <__vector_36+0xcc>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:18
    value=0;
    1fb8:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <__data_end>
digitalWrite():
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	82 e1       	ldi	r24, 0x12	; 18
    1fc0:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
display_1ms_tick():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:24
    digitalWrite(18, LOW);
   } else {
    value++;
    digitalWrite(18, HIGH);
   }
    if(display_timout>0){
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	89 2b       	or	r24, r25
    1fca:	b9 f2       	breq	.-82     	; 0x1f7a <__vector_36+0x6e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:25
        display_timout--;
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	9b 83       	std	Y+3, r25	; 0x03
    1fd6:	d1 cf       	rjmp	.-94     	; 0x1f7a <__vector_36+0x6e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:21
   static uint8_t value=0;
   if(value>0){
    value=0;
    digitalWrite(18, LOW);
   } else {
    value++;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <__data_end>
digitalWrite():
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	ee cf       	rjmp	.-36     	; 0x1fbe <__vector_36+0xb2>

00001fe2 <global constructors keyed to 65535_0_CURRENT_190409.cpp.o.3936>:
_GLOBAL__I_65535_0_CURRENT_190409.cpp.o.3936():
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	e7 ea       	ldi	r30, 0xA7	; 167
    1fea:	f8 e2       	ldi	r31, 0x28	; 40
    1fec:	12 82       	std	Z+2, r1	; 0x02
    1fee:	13 82       	std	Z+3, r1	; 0x03
    1ff0:	88 ee       	ldi	r24, 0xE8	; 232
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	84 83       	std	Z+4, r24	; 0x04
    1ffa:	95 83       	std	Z+5, r25	; 0x05
    1ffc:	a6 83       	std	Z+6, r26	; 0x06
    1ffe:	b7 83       	std	Z+7, r27	; 0x07
    2000:	8d ef       	ldi	r24, 0xFD	; 253
    2002:	97 e7       	ldi	r25, 0x77	; 119
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	98 e0       	ldi	r25, 0x08	; 8
    200c:	84 87       	std	Z+12, r24	; 0x0c
    200e:	95 87       	std	Z+13, r25	; 0x0d
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	86 87       	std	Z+14, r24	; 0x0e
    2014:	17 86       	std	Z+15, r1	; 0x0f
    2016:	10 8a       	std	Z+16, r1	; 0x10
    2018:	95 e0       	ldi	r25, 0x05	; 5
    201a:	91 8b       	std	Z+17, r25	; 0x11
    201c:	94 e0       	ldi	r25, 0x04	; 4
    201e:	92 8b       	std	Z+18, r25	; 0x12
    2020:	83 8b       	std	Z+19, r24	; 0x13
    2022:	14 8a       	std	Z+20, r1	; 0x14
    2024:	15 8a       	std	Z+21, r1	; 0x15
    2026:	16 8a       	std	Z+22, r1	; 0x16
    2028:	17 8a       	std	Z+23, r1	; 0x17
    202a:	10 8e       	std	Z+24, r1	; 0x18
    202c:	11 8e       	std	Z+25, r1	; 0x19
    202e:	82 e1       	ldi	r24, 0x12	; 18
    2030:	82 8f       	std	Z+26, r24	; 0x1a
    2032:	13 8e       	std	Z+27, r1	; 0x1b
    2034:	14 8e       	std	Z+28, r1	; 0x1c
    2036:	c4 e4       	ldi	r28, 0x44	; 68
    2038:	d9 e2       	ldi	r29, 0x29	; 41
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	8c 83       	std	Y+4, r24	; 0x04
    2040:	9d 83       	std	Y+5, r25	; 0x05
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	8e 83       	std	Y+6, r24	; 0x06
    2046:	12 e0       	ldi	r17, 0x02	; 2
    2048:	1f 83       	std	Y+7, r17	; 0x07
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	8f 81       	ldd	r24, Y+7	; 0x07
    2054:	0e 94 11 03 	call	0x622	; 0x622 <pinMode>
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	8f e0       	ldi	r24, 0x0F	; 15
    205c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
    2060:	ec e4       	ldi	r30, 0x4C	; 76
    2062:	f9 e2       	ldi	r31, 0x29	; 41
    2064:	10 83       	st	Z, r17
    2066:	88 e4       	ldi	r24, 0x48	; 72
    2068:	94 e0       	ldi	r25, 0x04	; 4
    206a:	81 83       	std	Z+1, r24	; 0x01
    206c:	92 83       	std	Z+2, r25	; 0x02
    206e:	0e 94 0e 01 	call	0x21c	; 0x21c <OneWire::reset_search() [clone .constprop.43]>
    2072:	ca e5       	ldi	r28, 0x5A	; 90
    2074:	d9 e2       	ldi	r29, 0x29	; 41
    2076:	87 e7       	ldi	r24, 0x77	; 119
    2078:	98 e7       	ldi	r25, 0x78	; 120
    207a:	88 83       	st	Y, r24
    207c:	99 83       	std	Y+1, r25	; 0x01
    207e:	1a 82       	std	Y+2, r1	; 0x02
    2080:	1b 82       	std	Y+3, r1	; 0x03
    2082:	1c 82       	std	Y+4, r1	; 0x04
    2084:	8d e6       	ldi	r24, 0x6D	; 109
    2086:	98 e7       	ldi	r25, 0x78	; 120
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	87 ee       	ldi	r24, 0xE7	; 231
    208e:	93 e0       	ldi	r25, 0x03	; 3
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	89 87       	std	Y+9, r24	; 0x09
    209a:	9a 87       	std	Y+10, r25	; 0x0a
    209c:	1b 86       	std	Y+11, r1	; 0x0b
    209e:	1c 86       	std	Y+12, r1	; 0x0c
    20a0:	1d 86       	std	Y+13, r1	; 0x0d
    20a2:	1e 86       	std	Y+14, r1	; 0x0e
    20a4:	1f 86       	std	Y+15, r1	; 0x0f
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	88 8b       	std	Y+16, r24	; 0x10
    20ac:	99 8b       	std	Y+17, r25	; 0x11
    20ae:	1b 8e       	std	Y+27, r1	; 0x1b
    20b0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <analogReference.constprop.33>
    20b4:	1d 8e       	std	Y+29, r1	; 0x1d
    20b6:	1e 8e       	std	Y+30, r1	; 0x1e
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	08 95       	ret

000020c0 <main>:
main():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/main.cpp:29

void setupUSB() __attribute__((weak));
void setupUSB() {}

int main(void)
{
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	6a 97       	sbiw	r28, 0x1a	; 26
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	de bf       	out	0x3e, r29	; 62
init():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:331
// Use internal oscillator if not defined. No need to manipulate the MCLKCTRLA register here
// because it's already done in the SYSCFG0 fuse byte
#else
#if (F_CPU == 20000000L)
  /* No division on clock */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
    20ce:	88 ed       	ldi	r24, 0xD8	; 216
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	84 bf       	out	0x34, r24	; 52
    20d4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:359
#if defined(ADC0)

  /* ADC clock between 50-200 kHz */

#if (F_CPU >= 20000000L) // 20 MHz / 128 = 156.250 kHz
  ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
    20d8:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    20dc:	86 60       	ori	r24, 0x06	; 6
    20de:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:375
#else                      // 128 kHz / 2 = 64 kHz -> This is the closest you can get, the prescaler is 2
  ADC0.CTRLC |= ADC_PRESC_DIV2_gc;
#endif

  /* Enable ADC */
  ADC0.CTRLA |= ADC_ENABLE_bm;
    20e2:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    20e6:	81 60       	ori	r24, 0x01	; 1
    20e8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:376
  analogReference(VDD);
    20ec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <analogReference.constprop.33>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:380

#endif

  PORTMUX.USARTROUTEA = 0;
    20f0:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:419
void setup_timers()
{
  //  TYPE A TIMER

  // PORTMUX setting for TCA (defined in pins_arduino.h)
  PORTMUX.TCAROUTEA = TCA0_PINS;
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:422

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:426

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;
    2100:	8e ef       	ldi	r24, 0xFE	; 254
    2102:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:425

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
    2106:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:434
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
                      TCA0.SPLIT.HCMP2 = PWM_TIMER_COMPARE;
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:433
  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
    2110:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:432

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
    2114:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:431
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
    2118:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:430
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
    211c:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:429
  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
    2120:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:447
#elif F_CPU <= 8000000L
  // Use DIV16 prescaler (giving 250kHz clocke on 4MHz, 500kHz clock on 8MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
#else
  // Use DIV64 prescaler (giving 250kHz clock on 16MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    2124:	8b e0       	ldi	r24, 0x0B	; 11
    2126:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:453
#endif

  //  TYPE B TIMERS

  // Set up routing (defined in pins_arduino.h)
  PORTMUX.TCBROUTEA = 0
    212a:	87 e0       	ldi	r24, 0x07	; 7
    212c:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
main():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:469
                      | TCB3_PINS
#endif
      ;

  // Start with TCB0
  TCB_t *timer_B = (TCB_t *)&TCB0;
    2130:	e0 e8       	ldi	r30, 0x80	; 128
    2132:	fa e0       	ldi	r31, 0x0A	; 10
setup_timers():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:486

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    2134:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:489

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
    2136:	2e ef       	ldi	r18, 0xFE	; 254
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:492

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    2138:	90 e8       	ldi	r25, 0x80	; 128
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:496

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
    213a:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:486

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    213c:	31 83       	std	Z+1, r19	; 0x01
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:489

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
    213e:	24 87       	std	Z+12, r18	; 0x0c
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:492

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    2140:	95 87       	std	Z+13, r25	; 0x0d
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:496

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
    2142:	80 83       	st	Z, r24
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:501
                     //|(TCB_SYNCUPD_bm)
                     | (TCB_ENABLE_bm);

    // Increment pointer to next TCB instance
    timer_B++;
    2144:	70 96       	adiw	r30, 0x10	; 16
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:504

    // Stop when pointing to TCB3
  } while (timer_B <= timer_B_end);
    2146:	e0 3c       	cpi	r30, 0xC0	; 192
    2148:	4a e0       	ldi	r20, 0x0A	; 10
    214a:	f4 07       	cpc	r31, r20
    214c:	b9 f7       	brne	.-18     	; 0x213c <main+0x7c>
init():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:389
  /********************* TCB for system time tracking **************************/

  // BUG: we can compensate for F_CPU by fine tuning value of TIME_TRACKING_TIMER_COUNT

  /* Select vanilla 16 bit periodic interrupt mode */
  _timer->CTRLB = TCB_CNTMODE_INT_gc;
    214e:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:392

  /* TOP value for overflow every N clock cycles */
  _timer->CCMP = TIME_TRACKING_TIMER_COUNT - 1;
    2152:	8f e1       	ldi	r24, 0x1F	; 31
    2154:	9e e4       	ldi	r25, 0x4E	; 78
    2156:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    215a:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:395

  /* Enable TCB interrupt */
  _timer->INTCTRL |= TCB_CAPT_bm;
    215e:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    2162:	81 60       	ori	r24, 0x01	; 1
    2164:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:399

  /* Clock selection is F_CPU/N -- which is independent of TCA */
#if TIME_TRACKING_TIMER_DIVIDER == 1
  _timer->CTRLA = TCB_CLKSEL_CLKDIV1_gc; /* F_CPU */
    2168:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:407
#else
#assert "TIME_TRACKING_TIMER_DIVIDER not supported"
#endif

  /* Enable & start */
  _timer->CTRLA |= TCB_ENABLE_bm; /* Keep this last before enabling interrupts to ensure tracking as accurate as possible */
    216c:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    2170:	81 60       	ori	r24, 0x01	; 1
    2172:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/wiring.c:411

  /*************************** ENABLE GLOBAL INTERRUPTS *************************/

  sei();
    2176:	78 94       	sei
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:54

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EERef::operator*() const>
read_StoreTemperature():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:383
 *************************************************************************************************************/    
uint16_t HW_190409::read_StoreTemperature()
{
   uint16_t saved_Temperature_1=0;

   saved_Temperature_1 = EEPROM.read(2);
    2188:	08 2f       	mov	r16, r24
    218a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:384
   saved_Temperature_1 = saved_Temperature_1 << 8;
    218c:	10 2f       	mov	r17, r16
    218e:	00 27       	eor	r16, r16
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:54

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2198:	ce 01       	movw	r24, r28
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EERef::operator*() const>
read_StoreTemperature():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:385
   saved_Temperature_1 = saved_Temperature_1 | EEPROM.read(3);
    21a0:	08 2b       	or	r16, r24
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:387
  
   if( ( saved_Temperature_1 > MAX_TEMP) || ( saved_Temperature_1 < MIN_TEMP) ){
    21a2:	98 01       	movw	r18, r16
    21a4:	22 53       	subi	r18, 0x32	; 50
    21a6:	31 09       	sbc	r19, r1
    21a8:	21 39       	cpi	r18, 0x91	; 145
    21aa:	31 40       	sbci	r19, 0x01	; 1
    21ac:	10 f0       	brcs	.+4      	; 0x21b2 <main+0xf2>
main():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:388
    saved_Temperature_1= MIN_TEMP ;
    21ae:	02 e3       	ldi	r16, 0x32	; 50
    21b0:	10 e0       	ldi	r17, 0x00	; 0
setup():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:79
 Description: This function is for device initialisation.
**********************************************************************************************************/
void setup()
{  
   
    setpoint = Station.read_StoreTemperature();                 //Read previous saved temperature from EEPROM
    21b2:	00 93 20 28 	sts	0x2820, r16	; 0x802820 <setpoint>
    21b6:	10 93 21 28 	sts	0x2821, r17	; 0x802821 <setpoint+0x1>
pinMode():
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	8f e0       	ldi	r24, 0x0F	; 15
    21be:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	8f e0       	ldi	r24, 0x0F	; 15
    21c6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	80 e1       	ldi	r24, 0x10	; 16
    21ce:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	80 e1       	ldi	r24, 0x10	; 16
    21d6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	81 e1       	ldi	r24, 0x11	; 17
    21de:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	81 e1       	ldi	r24, 0x11	; 17
    21e6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	82 e1       	ldi	r24, 0x12	; 18
    21ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	82 e1       	ldi	r24, 0x12	; 18
    21f6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	83 e1       	ldi	r24, 0x13	; 19
    21fe:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	83 e1       	ldi	r24, 0x13	; 19
    2206:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	89 e1       	ldi	r24, 0x19	; 25
    220e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2212:	61 e0       	ldi	r22, 0x01	; 1
    2214:	89 e1       	ldi	r24, 0x19	; 25
    2216:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	8a e1       	ldi	r24, 0x1A	; 26
    221e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	8a e1       	ldi	r24, 0x1A	; 26
    2226:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	8b e1       	ldi	r24, 0x1B	; 27
    222e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	8b e1       	ldi	r24, 0x1B	; 27
    2236:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	8c e1       	ldi	r24, 0x1C	; 28
    223e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	8c e1       	ldi	r24, 0x1C	; 28
    2246:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	8d e1       	ldi	r24, 0x1D	; 29
    224e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	8d e1       	ldi	r24, 0x1D	; 29
    2256:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	87 e2       	ldi	r24, 0x27	; 39
    225e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	87 e2       	ldi	r24, 0x27	; 39
    2266:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	84 e2       	ldi	r24, 0x24	; 36
    226e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	84 e2       	ldi	r24, 0x24	; 36
    2276:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	85 e2       	ldi	r24, 0x25	; 37
    227e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	85 e2       	ldi	r24, 0x25	; 37
    2286:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	8f e1       	ldi	r24, 0x1F	; 31
    228e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	8f e1       	ldi	r24, 0x1F	; 31
    2296:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	81 e2       	ldi	r24, 0x21	; 33
    22ae:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	81 e2       	ldi	r24, 0x21	; 33
    22b6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	82 e2       	ldi	r24, 0x22	; 34
    22be:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	82 e2       	ldi	r24, 0x22	; 34
    22c6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	83 e2       	ldi	r24, 0x23	; 35
    22ce:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	83 e2       	ldi	r24, 0x23	; 35
    22d6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	8e e0       	ldi	r24, 0x0E	; 14
    22fe:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	8e e0       	ldi	r24, 0x0E	; 14
    2306:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	8e e1       	ldi	r24, 0x1E	; 30
    230e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	8e e1       	ldi	r24, 0x1E	; 30
    2316:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	88 e1       	ldi	r24, 0x18	; 24
    231e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	88 e1       	ldi	r24, 0x18	; 24
    2326:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	86 e1       	ldi	r24, 0x16	; 22
    232e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	86 e1       	ldi	r24, 0x16	; 22
    2336:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	87 e1       	ldi	r24, 0x17	; 23
    233e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	87 e1       	ldi	r24, 0x17	; 23
    2346:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	84 e0       	ldi	r24, 0x04	; 4
    2376:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	85 e0       	ldi	r24, 0x05	; 5
    237e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	85 e0       	ldi	r24, 0x05	; 5
    2386:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	86 e0       	ldi	r24, 0x06	; 6
    238e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	86 e0       	ldi	r24, 0x06	; 6
    2396:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	87 e0       	ldi	r24, 0x07	; 7
    239e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
digitalWrite():
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	87 e0       	ldi	r24, 0x07	; 7
    23a6:	0e 94 41 03 	call	0x682	; 0x682 <digitalWrite.part.2>
pinMode():
    23aa:	61 e0       	ldi	r22, 0x01	; 1
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pinMode.part.1>
clearDisplay():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:274
        display(i, 0x7f);
    }
}

void TM1637::clearDisplay(void) {
    display(0x00, 0x7f);
    23ba:	6f e7       	ldi	r22, 0x7F	; 127
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:275
    display(0x01, 0x7f);
    23c2:	6f e7       	ldi	r22, 0x7F	; 127
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:276
    display(0x02, 0x7f);
    23ca:	6f e7       	ldi	r22, 0x7F	; 127
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:277
    display(0x03, 0x7f);
    23d2:	6f e7       	ldi	r22, 0x7F	; 127
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
set():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:282
}

// To take effect the next time it displays.
void TM1637::set(uint8_t brightness, uint8_t set_data, uint8_t set_addr) {
    cmd_set_data = set_data;
    23da:	80 e4       	ldi	r24, 0x40	; 64
    23dc:	80 93 44 29 	sts	0x2944, r24	; 0x802944 <tm1637>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:283
    cmd_set_addr = set_addr;
    23e0:	80 ec       	ldi	r24, 0xC0	; 192
    23e2:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <tm1637+0x1>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:285
    //Set the brightness and it takes effect the next time it displays.
    cmd_disp_ctrl = 0x88 + brightness;
    23e6:	8a e8       	ldi	r24, 0x8A	; 138
    23e8:	80 93 46 29 	sts	0x2946, r24	; 0x802946 <tm1637+0x2>
main():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:232
    // Colon is used instead of decimal point if decimal == 2
    // Be aware of int size limitations (up to +-2^15 = +-32767)

    int number = fabs(num) * pow(10, decimal);

    for (int i = 0; i < DIGITS - (show_minus && num < 0 ? 1 : 0); ++i) {
    23ec:	10 e0       	ldi	r17, 0x00	; 0
    23ee:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:230
void TM1637::displayNum(float num, int decimal, bool show_minus) {
    // Displays number with decimal places (no decimal point implementation)
    // Colon is used instead of decimal point if decimal == 2
    // Be aware of int size limitations (up to +-2^15 = +-32767)

    int number = fabs(num) * pow(10, decimal);
    23f0:	98 eb       	ldi	r25, 0xB8	; 184
    23f2:	e9 2e       	mov	r14, r25
    23f4:	92 e2       	ldi	r25, 0x22	; 34
    23f6:	f9 2e       	mov	r15, r25
displayNum():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:236

    for (int i = 0; i < DIGITS - (show_minus && num < 0 ? 1 : 0); ++i) {
        int j = DIGITS - i - 1;

        if (number != 0) {
            display(j, number % 10);
    23f8:	2a e0       	ldi	r18, 0x0A	; 10
    23fa:	c2 2e       	mov	r12, r18
    23fc:	d1 2c       	mov	r13, r1
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:232
    // Colon is used instead of decimal point if decimal == 2
    // Be aware of int size limitations (up to +-2^15 = +-32767)

    int number = fabs(num) * pow(10, decimal);

    for (int i = 0; i < DIGITS - (show_minus && num < 0 ? 1 : 0); ++i) {
    23fe:	20 91 48 29 	lds	r18, 0x2948	; 0x802948 <tm1637+0x4>
    2402:	30 91 49 29 	lds	r19, 0x2949	; 0x802949 <tm1637+0x5>
    2406:	02 17       	cp	r16, r18
    2408:	13 07       	cpc	r17, r19
    240a:	c4 f4       	brge	.+48     	; 0x243c <main+0x37c>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:233
        int j = DIGITS - i - 1;
    240c:	20 1b       	sub	r18, r16
    240e:	31 0b       	sbc	r19, r17
    2410:	21 50       	subi	r18, 0x01	; 1
    2412:	31 09       	sbc	r19, r1
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:238

        if (number != 0) {
            display(j, number % 10);
        } else {
            display(j, 0x7f);    // display nothing
    2414:	6f e7       	ldi	r22, 0x7F	; 127
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:235
    int number = fabs(num) * pow(10, decimal);

    for (int i = 0; i < DIGITS - (show_minus && num < 0 ? 1 : 0); ++i) {
        int j = DIGITS - i - 1;

        if (number != 0) {
    2416:	e1 14       	cp	r14, r1
    2418:	f1 04       	cpc	r15, r1
    241a:	29 f0       	breq	.+10     	; 0x2426 <main+0x366>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:236
            display(j, number % 10);
    241c:	c7 01       	movw	r24, r14
    241e:	b6 01       	movw	r22, r12
    2420:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divmodhi4>
    2424:	68 2f       	mov	r22, r24
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:238
        } else {
            display(j, 0x7f);    // display nothing
    2426:	82 2f       	mov	r24, r18
    2428:	0e 94 c8 04 	call	0x990	; 0x990 <TM1637::display(unsigned char, signed char) [clone .constprop.55]>
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:241
        }

        number /= 10;
    242c:	c7 01       	movw	r24, r14
    242e:	b6 01       	movw	r22, r12
    2430:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divmodhi4>
    2434:	7b 01       	movw	r14, r22
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:232
    // Colon is used instead of decimal point if decimal == 2
    // Be aware of int size limitations (up to +-2^15 = +-32767)

    int number = fabs(num) * pow(10, decimal);

    for (int i = 0; i < DIGITS - (show_minus && num < 0 ? 1 : 0); ++i) {
    2436:	0f 5f       	subi	r16, 0xFF	; 255
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	e1 cf       	rjmp	.-62     	; 0x23fe <main+0x33e>
point():
C:\Users\mathiasc\Documents\Arduino\libraries\Grove_4-Digit_Display/TM1637.cpp:291
}

// Whether to light the clock point ":".
// To take effect the next time it displays.
void TM1637::point(boolean PointFlag) {
    _PointFlag = PointFlag;
    243c:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <tm1637+0x3>
GetSolderingIron():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:323
 Input:       None
 Output:      SolderingIronType_t
 Discription: Get the currently configured iron form the station
**********************************************************************************************************/
SolderingIronType_t HW_190409::GetSolderingIron( void ){
  return read_StoreIronConfig();
    2440:	0e 94 37 0a 	call	0x146e	; 0x146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>
Setup():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:52
**********************************************************************************************************/
void HW_190409::Setup( void (*cb_250us_Timer)(void) ){
    setup_gpio();
    Frontend.display_setup(); 

    SetSolderingIron(GetSolderingIron()); //This will restore confing from EEPROM
    2444:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:55
    //0.1ms timer with callback attached
    //This will be called in front of setup() and allow to filldle with timers
    cli();
    2448:	f8 94       	cli
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:57
    /* Select vanilla 16 bit periodic interrupt mode */
    TCB3.CTRLB = TCB_CNTMODE_INT_gc;
    244a:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <__TEXT_REGION_LENGTH__+0x7f4ab1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:60

    /* TOP value for overflow every N clock cycles */
    TCB3.CCMP = ((TIME_TRACKING_TIMER_COUNT/4) - 1);
    244e:	87 e8       	ldi	r24, 0x87	; 135
    2450:	93 e1       	ldi	r25, 0x13	; 19
    2452:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <__TEXT_REGION_LENGTH__+0x7f4abc>
    2456:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <__TEXT_REGION_LENGTH__+0x7f4abd>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:63

    /* Enable TCB interrupt */
    TCB3.INTCTRL |= TCB_CAPT_bm;
    245a:	80 91 b5 0a 	lds	r24, 0x0AB5	; 0x800ab5 <__TEXT_REGION_LENGTH__+0x7f4ab5>
    245e:	81 60       	ori	r24, 0x01	; 1
    2460:	80 93 b5 0a 	sts	0x0AB5, r24	; 0x800ab5 <__TEXT_REGION_LENGTH__+0x7f4ab5>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:66

    /* Clock selection is F_CPU/N -- which is independent of TCA */
    TCB3.CTRLA = TCB_CLKSEL_CLKDIV1_gc; /* F_CPU */
    2464:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x7f4ab0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:68
    /* Enable & start */
    TCB3.CTRLA |= TCB_ENABLE_bm; /* Keep this last before enabling interrupts to ensure tracking as accurate as possible */
    2468:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x7f4ab0>
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x7f4ab0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:70

    __cb_250us_Timer = cb_250us_Timer;
    2472:	8c e5       	ldi	r24, 0x5C	; 92
    2474:	9b e0       	ldi	r25, 0x0B	; 11
    2476:	80 93 46 28 	sts	0x2846, r24	; 0x802846 <__cb_250us_Timer>
    247a:	90 93 47 28 	sts	0x2847, r25	; 0x802847 <__cb_250us_Timer+0x1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:71
    __cb_fe1ms_Timer = &Frontend;
    247e:	8a e5       	ldi	r24, 0x5A	; 90
    2480:	99 e2       	ldi	r25, 0x29	; 41
    2482:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <__cb_fe1ms_Timer>
    2486:	90 93 45 28 	sts	0x2845, r25	; 0x802845 <__cb_fe1ms_Timer+0x1>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:76
 
    //This will reconfigure the pwm to 16bit mode
    
    //Every bit set to 1 will enable output on its pin
    PORTC.DIRSET = ( 1<< PIN0 );
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <__TEXT_REGION_LENGTH__+0x7f4441>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:78
        //Disable timer, keep devider
    TCA0.SPLIT.CTRLA = 0x00; //Reset default
    2490:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:80
    // PORTMUX setting for TCA -> outputs [2:5] point to PORTC pins [2:5]
    PORTMUX.TCAROUTEA  = PORTMUX_TCA0_PORTC_gc;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:82
    // Disable split mode 
    TCA0.SPLIT.CTRLD =0x00;
    249a:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:84
    // Reset all Outputs
    TCA0.SINGLE.CTRLB = 0x00; //Set register to Restvalue
    249e:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:88
    //Timer is back to 16Bit normal mode

    /* disable event counting */
    TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm); 
    24a2:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    24a6:	8e 7f       	andi	r24, 0xFE	; 254
    24a8:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:90
    
    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm            /* enable compare channel 0 */
    24ac:	83 e1       	ldi	r24, 0x13	; 19
    24ae:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:93
                        | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;    /* set dual-slope PWM mode */
    //We set 0% duty here 
    TCA0.SINGLE.PERBUF = 0x800; 
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	38 e0       	ldi	r19, 0x08	; 8
    24b6:	20 93 36 0a 	sts	0x0A36, r18	; 0x800a36 <__TEXT_REGION_LENGTH__+0x7f4a36>
    24ba:	30 93 37 0a 	sts	0x0A37, r19	; 0x800a37 <__TEXT_REGION_LENGTH__+0x7f4a37>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:94
    TCA0.SINGLE.CMP0BUF = 0x000;
    24be:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
    24c2:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:96
    //Enable Timer: PWM to ~10kHz , ~20MHz Clock
    TCA0.SINGLE.CTRLA =  TCA_SINGLE_CLKSEL_DIV1_gc        /* set clock source (sys_clk/4) */
    24c6:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:99
                        | TCA_SINGLE_ENABLE_bm;           /* start timer */
                        
    sei();
    24ca:	78 94       	sei
setup():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:81
    Station.Setup(Timer_250us_Callback);                  //Hardwaresetup for the system                                  
    Serial.begin(115200);
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	52 ec       	ldi	r21, 0xC2	; 194
    24d0:	61 e0       	ldi	r22, 0x01	; 1
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	87 ea       	ldi	r24, 0xA7	; 167
    24d6:	98 e2       	ldi	r25, 0x28	; 40
    24d8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <UartClass::begin(unsigned long)>
rotary_EncoderEnable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:490
 Output:      None
 Description: Configure pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderEnable()
{   
    RotaryEncoderLocked=0;
    24dc:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <RotaryEncoderLocked>
setup():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:83
   
    setpoint = Station.read_StoreTemperature();                 //Read previous saved temperature from EEPROM
    Station.Setup(Timer_250us_Callback);                  //Hardwaresetup for the system                                  
    Serial.begin(115200);
    rotary_EncoderEnable();                             //Pin Change interrupt setting
    powerSave_TimerReset();                             //Reset timoutcounter
    24e0:	0e 94 92 08 	call	0x1124	; 0x1124 <powerSave_TimerReset()>
Off():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/PWM_190409.cpp:38
 Discription: Turns the PWM off
**********************************************************************************************************/
void PWM_190409::Off( void ) {

  //Disable PWM
  TCA0.SINGLE.CMP0BUF=0;
    24e4:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
    24e8:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
setup():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:85
    Station.PWM.On(0);                                  //PWM On ( Zero Power ) 
    state=WELCOME_LOGO;                                 // The next state the FSM in the main loop will enter 
    24ec:	89 e0       	ldi	r24, 0x09	; 9
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    24f4:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:339
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("JBC"), (StringLen) )==0){
                                command.parameter.kw =(keyword_t)( KW_JBC );
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("HKO"), (StringLen) )==0){
                                command.parameter.kw =(keyword_t)( KW_HKO );
    24f8:	04 e0       	ldi	r16, 0x04	; 4
    24fa:	20 2e       	mov	r2, r16
    24fc:	31 2c       	mov	r3, r1
set_delay():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:475
 Output:      None
 Description: Set the delaytimer to a given value 
 *************************************************************************************************************/    
void set_delay( uint16_t ms){
  while(delay_ms!=ms){
    delay_ms=ms;
    24fe:	80 ed       	ldi	r24, 0xD0	; 208
    2500:	48 2e       	mov	r4, r24
    2502:	87 e0       	ldi	r24, 0x07	; 7
    2504:	58 2e       	mov	r5, r24
    2506:	be 01       	movw	r22, r28
    2508:	66 5f       	subi	r22, 0xF6	; 246
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	6e 8b       	std	Y+22, r22	; 0x16
    250e:	7f 8b       	std	Y+23, r23	; 0x17
SerialConsoleProcess():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:392
 Description: Processes incomming serial data
**********************************************************************************************************/
bool SerialConsoleProcess( void ){
    bool InputProcessed = false;
    if(Serial){
        if(first_con == false){
    2510:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <first_con>
    2514:	81 11       	cpse	r24, r1
    2516:	13 c0       	rjmp	.+38     	; 0x253e <main+0x47e>
SerialConsolePrintWelcome():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:154
 Output:      None 
 Description: Show the welcome banner
**********************************************************************************************************/
void SerialConsolePrintWelcome( void ){
  if(Serial){
        Serial.println(F("Elektor Solderingstation FW 1.4"));
    2518:	80 ec       	ldi	r24, 0xC0	; 192
    251a:	98 e7       	ldi	r25, 0x78	; 120
    251c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:155
        Serial.println(F("  on Hardware 190409           "));
    2520:	80 ee       	ldi	r24, 0xE0	; 224
    2522:	98 e7       	ldi	r25, 0x78	; 120
    2524:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:156
        Serial.println(F("------------------------------------------------------------------"));
    2528:	87 e8       	ldi	r24, 0x87	; 135
    252a:	9b e7       	ldi	r25, 0x7B	; 123
    252c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:157
        Serial.print(F(">"));
    2530:	8d e6       	ldi	r24, 0x6D	; 109
    2532:	9c e7       	ldi	r25, 0x7C	; 124
    2534:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
SerialConsoleProcess():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:394
bool SerialConsoleProcess( void ){
    bool InputProcessed = false;
    if(Serial){
        if(first_con == false){
            SerialConsolePrintWelcome();
            first_con=true;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <first_con>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:410
                if(msgbufferidx<sizeof(msgbuffer) ){
                    msgbuffer[msgbufferidx]=data;
                    msgbufferidx++;
                } else {
                    /* we have an overflow */
                    msgbufferidx=sizeof(msgbuffer);
    253e:	10 e4       	ldi	r17, 0x40	; 64
    2540:	61 2e       	mov	r6, r17
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:397
        if(first_con == false){
            SerialConsolePrintWelcome();
            first_con=true;
        }
        /* Grab data from interface */
        while ( ( Serial ) && (Serial.available() > 0)) {
    2542:	87 ea       	ldi	r24, 0xA7	; 167
    2544:	98 e2       	ldi	r25, 0x28	; 40
    2546:	0e 94 95 01 	call	0x32a	; 0x32a <UartClass::available()>
    254a:	18 16       	cp	r1, r24
    254c:	19 06       	cpc	r1, r25
    254e:	ec f5       	brge	.+122    	; 0x25ca <main+0x50a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:400
                InputProcessed = true;
                // read the incoming byte:
                uint8_t data = Serial.read();
    2550:	87 ea       	ldi	r24, 0xA7	; 167
    2552:	98 e2       	ldi	r25, 0x28	; 40
    2554:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UartClass::read()>
    2558:	18 2f       	mov	r17, r24
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:401
                if( (data!='\r' ) && (data!='\n')){
    255a:	8d 30       	cpi	r24, 0x0D	; 13
    255c:	09 f0       	breq	.+2      	; 0x2560 <main+0x4a0>
    255e:	53 c0       	rjmp	.+166    	; 0x2606 <main+0x546>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:405
                    Serial.write(data);
                }
            
                if(msgbufferidx<sizeof(msgbuffer) ){
    2560:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <msgbufferidx>
    2564:	80 34       	cpi	r24, 0x40	; 64
    2566:	08 f0       	brcs	.+2      	; 0x256a <main+0x4aa>
    2568:	57 c0       	rjmp	.+174    	; 0x2618 <main+0x558>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:406
                    msgbuffer[msgbufferidx]=data;
    256a:	e8 2f       	mov	r30, r24
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	e8 5b       	subi	r30, 0xB8	; 184
    2570:	f7 4d       	sbci	r31, 0xD7	; 215
    2572:	10 83       	st	Z, r17
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:407
                    msgbufferidx++;
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <msgbufferidx>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:413
                } else {
                    /* we have an overflow */
                    msgbufferidx=sizeof(msgbuffer);
                }

                if( (data=='\r' ) || (data=='\n')){   /* Time to parse data */
    257a:	1d 30       	cpi	r17, 0x0D	; 13
    257c:	11 f0       	breq	.+4      	; 0x2582 <main+0x4c2>
    257e:	1a 30       	cpi	r17, 0x0A	; 10
    2580:	01 f7       	brne	.-64     	; 0x2542 <main+0x482>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:414
                    Serial.print(F("\n\r"));
    2582:	88 ed       	ldi	r24, 0xD8	; 216
    2584:	9b e7       	ldi	r25, 0x7B	; 123
    2586:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:415
                    if( msgbufferidx == 0){
    258a:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <msgbufferidx>
    258e:	88 23       	and	r24, r24
    2590:	c1 f2       	breq	.-80     	; 0x2542 <main+0x482>
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:202
**********************************************************************************************************/
serial_command_t SerialConsoleParseInput( void ){
    serial_command_t command;
    command.cmd_dir = cmd_data_error;
    command.command = cmd_none;
    command.parameter.u32=0;
    2592:	1d 82       	std	Y+5, r1	; 0x05
    2594:	1e 82       	std	Y+6, r1	; 0x06
    2596:	1f 82       	std	Y+7, r1	; 0x07
    2598:	18 86       	std	Y+8, r1	; 0x08
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:203
    if(msgbufferidx>sizeof(msgbuffer)){
    259a:	e8 e4       	ldi	r30, 0x48	; 72
    259c:	f8 e2       	ldi	r31, 0x28	; 40
main():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:212
        }
        msgbufferidx=0;
    } else {
        uint8_t startidx = 0;
        uint8_t endidx = 0;
        for(uint8_t i=0;i<msgbufferidx;i++){
    259e:	d1 2c       	mov	r13, r1
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:203
serial_command_t SerialConsoleParseInput( void ){
    serial_command_t command;
    command.cmd_dir = cmd_data_error;
    command.command = cmd_none;
    command.parameter.u32=0;
    if(msgbufferidx>sizeof(msgbuffer)){
    25a0:	81 34       	cpi	r24, 0x41	; 65
    25a2:	08 f4       	brcc	.+2      	; 0x25a6 <main+0x4e6>
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <main+0x564>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:204
        Serial.println( F("Buffer overflow") );
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	99 e7       	ldi	r25, 0x79	; 121
    25aa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
    25ae:	e8 e4       	ldi	r30, 0x48	; 72
    25b0:	f8 e2       	ldi	r31, 0x28	; 40
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:206
        for(uint8_t i=0;i<sizeof(msgbuffer);i++){
           msgbuffer[i]=0;
    25b2:	11 92       	st	Z+, r1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:205
    command.cmd_dir = cmd_data_error;
    command.command = cmd_none;
    command.parameter.u32=0;
    if(msgbufferidx>sizeof(msgbuffer)){
        Serial.println( F("Buffer overflow") );
        for(uint8_t i=0;i<sizeof(msgbuffer);i++){
    25b4:	78 e2       	ldi	r23, 0x28	; 40
    25b6:	e8 38       	cpi	r30, 0x88	; 136
    25b8:	f7 07       	cpc	r31, r23
    25ba:	d9 f7       	brne	.-10     	; 0x25b2 <main+0x4f2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:208
           msgbuffer[i]=0;
        }
        msgbufferidx=0;
    25bc:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <msgbufferidx>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:360
                }
                StringLen++;
            }
            /* Parsing error */
            command.cmd_dir = cmd_data_error;
            command.command = cmd_none;
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:359
                    }
                }
                StringLen++;
            }
            /* Parsing error */
            command.cmd_dir = cmd_data_error;
    25c4:	f1 2c       	mov	r15, r1
    25c6:	e1 2c       	mov	r14, r1
    25c8:	4a c1       	rjmp	.+660    	; 0x285e <main+0x79e>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:101
**********************************************************************************************************/
void loop() 
{
      
        SerialConsoleProcess();
        Station.Temp.OneWireStartConversation();
    25ca:	0e 94 a1 06 	call	0xd42	; 0xd42 <TEMP_190409::OneWireStartConversation() [clone .constprop.35]>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:105
        Station.Temp.GetLastOneWireTempKelvin();
        /* This check can also return states and we can react to it */
       
        switch(state){ 
    25ce:	e0 91 22 28 	lds	r30, 0x2822	; 0x802822 <state>
    25d2:	f0 91 23 28 	lds	r31, 0x2823	; 0x802823 <state+0x1>
    25d6:	e0 31       	cpi	r30, 0x10	; 16
    25d8:	f1 05       	cpc	r31, r1
    25da:	08 f0       	brcs	.+2      	; 0x25de <main+0x51e>
    25dc:	a6 c4       	rjmp	.+2380   	; 0x2f2a <main+0xe6a>
    25de:	ed 50       	subi	r30, 0x0D	; 13
    25e0:	fd 4e       	sbci	r31, 0xED	; 237
    25e2:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <__tablejump2__>
    25e6:	db 17       	cp	r29, r27
    25e8:	90 18       	sub	r9, r0
    25ea:	9b 18       	sub	r9, r11
    25ec:	9e 18       	sub	r9, r14
    25ee:	b3 18       	sub	r11, r3
    25f0:	ca 18       	sub	r12, r10
    25f2:	ff 18       	sub	r15, r15
    25f4:	38 19       	sub	r19, r8
    25f6:	45 19       	sub	r20, r5
    25f8:	03 16       	cp	r0, r19
    25fa:	61 17       	cp	r22, r17
    25fc:	72 17       	cp	r23, r18
    25fe:	85 17       	cp	r24, r21
    2600:	98 17       	cp	r25, r24
    2602:	b4 17       	cp	r27, r20
    2604:	bd 17       	cp	r27, r29
SerialConsoleProcess():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:401
        /* Grab data from interface */
        while ( ( Serial ) && (Serial.available() > 0)) {
                InputProcessed = true;
                // read the incoming byte:
                uint8_t data = Serial.read();
                if( (data!='\r' ) && (data!='\n')){
    2606:	8a 30       	cpi	r24, 0x0A	; 10
    2608:	09 f4       	brne	.+2      	; 0x260c <main+0x54c>
    260a:	aa cf       	rjmp	.-172    	; 0x2560 <main+0x4a0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:402
                    Serial.write(data);
    260c:	68 2f       	mov	r22, r24
    260e:	87 ea       	ldi	r24, 0xA7	; 167
    2610:	98 e2       	ldi	r25, 0x28	; 40
    2612:	0e 94 37 02 	call	0x46e	; 0x46e <UartClass::write(unsigned char)>
    2616:	a4 cf       	rjmp	.-184    	; 0x2560 <main+0x4a0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:410
                if(msgbufferidx<sizeof(msgbuffer) ){
                    msgbuffer[msgbufferidx]=data;
                    msgbufferidx++;
                } else {
                    /* we have an overflow */
                    msgbufferidx=sizeof(msgbuffer);
    2618:	60 92 88 28 	sts	0x2888, r6	; 0x802888 <msgbufferidx>
    261c:	ae cf       	rjmp	.-164    	; 0x257a <main+0x4ba>
    261e:	da 2c       	mov	r13, r10
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:212
        }
        msgbufferidx=0;
    } else {
        uint8_t startidx = 0;
        uint8_t endidx = 0;
        for(uint8_t i=0;i<msgbufferidx;i++){
    2620:	8a 15       	cp	r24, r10
    2622:	e9 f1       	breq	.+122    	; 0x269e <main+0x5de>
    2624:	8f 01       	movw	r16, r30
    2626:	08 54       	subi	r16, 0x48	; 72
    2628:	18 42       	sbci	r17, 0x28	; 40
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:213
            if( ( msgbuffer[i]==' ') || (msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
    262a:	91 91       	ld	r25, Z+
    262c:	aa 24       	eor	r10, r10
    262e:	a3 94       	inc	r10
    2630:	ad 0c       	add	r10, r13
    2632:	90 32       	cpi	r25, 0x20	; 32
    2634:	21 f0       	breq	.+8      	; 0x263e <main+0x57e>
    2636:	9a 30       	cpi	r25, 0x0A	; 10
    2638:	11 f0       	breq	.+4      	; 0x263e <main+0x57e>
    263a:	9d 30       	cpi	r25, 0x0D	; 13
    263c:	81 f7       	brne	.-32     	; 0x261e <main+0x55e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:215
                /* The first token has ended, we accept only 'set', 'get' and 'help' */
                if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("set"), i)==0){
    263e:	ed 2c       	mov	r14, r13
    2640:	f1 2c       	mov	r15, r1
    2642:	a7 01       	movw	r20, r14
    2644:	6d e1       	ldi	r22, 0x1D	; 29
    2646:	71 e0       	ldi	r23, 0x01	; 1
    2648:	88 e4       	ldi	r24, 0x48	; 72
    264a:	98 e2       	ldi	r25, 0x28	; 40
    264c:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2650:	89 2b       	or	r24, r25
    2652:	09 f4       	brne	.+2      	; 0x2656 <main+0x596>
    2654:	dd c0       	rjmp	.+442    	; 0x2810 <main+0x750>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:217
                    command.cmd_dir = cmd_data_set;
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("get"), i)==0){
    2656:	a7 01       	movw	r20, r14
    2658:	69 e1       	ldi	r22, 0x19	; 25
    265a:	71 e0       	ldi	r23, 0x01	; 1
    265c:	88 e4       	ldi	r24, 0x48	; 72
    265e:	98 e2       	ldi	r25, 0x28	; 40
    2660:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2664:	89 2b       	or	r24, r25
    2666:	09 f4       	brne	.+2      	; 0x266a <main+0x5aa>
    2668:	d7 c0       	rjmp	.+430    	; 0x2818 <main+0x758>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:219
                    command.cmd_dir = cmd_data_get;
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("help"), i)==0){
    266a:	a7 01       	movw	r20, r14
    266c:	64 e1       	ldi	r22, 0x14	; 20
    266e:	71 e0       	ldi	r23, 0x01	; 1
    2670:	88 e4       	ldi	r24, 0x48	; 72
    2672:	98 e2       	ldi	r25, 0x28	; 40
    2674:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2678:	89 2b       	or	r24, r25
    267a:	09 f4       	brne	.+2      	; 0x267e <main+0x5be>
    267c:	d1 c0       	rjmp	.+418    	; 0x2820 <main+0x760>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:221
                    command.cmd_dir = cmd_data_help;
                } else if (strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("clear"), i)==0){
    267e:	a7 01       	movw	r20, r14
    2680:	6e e0       	ldi	r22, 0x0E	; 14
    2682:	71 e0       	ldi	r23, 0x01	; 1
    2684:	88 e4       	ldi	r24, 0x48	; 72
    2686:	98 e2       	ldi	r25, 0x28	; 40
    2688:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:222
                     command.cmd_dir = cmd_data_clear;
    268c:	e3 e0       	ldi	r30, 0x03	; 3
    268e:	ee 2e       	mov	r14, r30
    2690:	f1 2c       	mov	r15, r1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:221
                    command.cmd_dir = cmd_data_set;
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("get"), i)==0){
                    command.cmd_dir = cmd_data_get;
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("help"), i)==0){
                    command.cmd_dir = cmd_data_help;
                } else if (strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("clear"), i)==0){
    2692:	89 2b       	or	r24, r25
    2694:	31 f0       	breq	.+12     	; 0x26a2 <main+0x5e2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:225
                     command.cmd_dir = cmd_data_clear;
                } else {
                    command.cmd_dir = cmd_data_error;
                    PrintErrorLocation(startidx,i);
    2696:	6d 2d       	mov	r22, r13
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <PrintErrorLocation(unsigned char, unsigned char)>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:200
 Output:      serial_command_t 
 Description: Command parser, returns a struct with the parsed result
**********************************************************************************************************/
serial_command_t SerialConsoleParseInput( void ){
    serial_command_t command;
    command.cmd_dir = cmd_data_error;
    269e:	f1 2c       	mov	r15, r1
    26a0:	e1 2c       	mov	r14, r1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:235
              endidx=i;
            }
        } 

        startidx = endidx+1;
        if( (startidx<msgbufferidx) && (msgbuffer[endidx]!='\n' ) &&  (msgbuffer[endidx]!='\r') )  {
    26a2:	90 91 88 28 	lds	r25, 0x2888	; 0x802888 <msgbufferidx>
    26a6:	a9 16       	cp	r10, r25
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <main+0x5ec>
    26aa:	96 c1       	rjmp	.+812    	; 0x29d8 <main+0x918>
    26ac:	f8 01       	movw	r30, r16
    26ae:	e8 5b       	subi	r30, 0xB8	; 184
    26b0:	f7 4d       	sbci	r31, 0xD7	; 215
    26b2:	80 81       	ld	r24, Z
    26b4:	8a 30       	cpi	r24, 0x0A	; 10
    26b6:	09 f4       	brne	.+2      	; 0x26ba <main+0x5fa>
    26b8:	8f c1       	rjmp	.+798    	; 0x29d8 <main+0x918>
    26ba:	8d 30       	cpi	r24, 0x0D	; 13
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <main+0x600>
    26be:	8c c1       	rjmp	.+792    	; 0x29d8 <main+0x918>
    26c0:	0a 2d       	mov	r16, r10
    26c2:	10 e0       	ldi	r17, 0x00	; 0
    26c4:	f8 01       	movw	r30, r16
    26c6:	e8 5b       	subi	r30, 0xB8	; 184
    26c8:	f7 4d       	sbci	r31, 0xD7	; 215
    26ca:	9a 2c       	mov	r9, r10
    26cc:	9f 01       	movw	r18, r30
    26ce:	28 54       	subi	r18, 0x48	; 72
    26d0:	38 42       	sbci	r19, 0x28	; 40
    26d2:	29 8f       	std	Y+25, r18	; 0x19
    26d4:	3a 8f       	std	Y+26, r19	; 0x1a
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:243
            /* Parsing is done */
            return command;
        }

        for(uint8_t i=startidx;i<msgbufferidx;i++){
            if( ( msgbuffer[i]==' ') || (msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
    26d6:	81 91       	ld	r24, Z+
    26d8:	31 e0       	ldi	r19, 0x01	; 1
    26da:	39 0d       	add	r19, r9
    26dc:	38 8f       	std	Y+24, r19	; 0x18
    26de:	80 32       	cpi	r24, 0x20	; 32
    26e0:	29 f0       	breq	.+10     	; 0x26ec <main+0x62c>
    26e2:	8a 30       	cpi	r24, 0x0A	; 10
    26e4:	19 f0       	breq	.+6      	; 0x26ec <main+0x62c>
    26e6:	8d 30       	cpi	r24, 0x0D	; 13
    26e8:	09 f0       	breq	.+2      	; 0x26ec <main+0x62c>
    26ea:	9e c0       	rjmp	.+316    	; 0x2828 <main+0x768>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:245
                /* The second token has ended, we accept only 'setpoint' , 'temperature' and 'error' */
                       uint8_t tokenlenght = i - startidx;
    26ec:	c9 2c       	mov	r12, r9
    26ee:	ca 18       	sub	r12, r10
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:246
                if(strncmp_P(&msgbuffer[startidx] ,PSTR("setpoint"), (tokenlenght) )==0){
    26f0:	d1 2c       	mov	r13, r1
    26f2:	08 5b       	subi	r16, 0xB8	; 184
    26f4:	17 4d       	sbci	r17, 0xD7	; 215
    26f6:	a6 01       	movw	r20, r12
    26f8:	65 e0       	ldi	r22, 0x05	; 5
    26fa:	71 e0       	ldi	r23, 0x01	; 1
    26fc:	c8 01       	movw	r24, r16
    26fe:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2702:	89 2b       	or	r24, r25
    2704:	09 f4       	brne	.+2      	; 0x2708 <main+0x648>
    2706:	94 c0       	rjmp	.+296    	; 0x2830 <main+0x770>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:248
                    command.command=cmd_setpoint;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("temperature"), (tokenlenght) )==0){
    2708:	a6 01       	movw	r20, r12
    270a:	69 ef       	ldi	r22, 0xF9	; 249
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2714:	89 2b       	or	r24, r25
    2716:	09 f4       	brne	.+2      	; 0x271a <main+0x65a>
    2718:	8e c0       	rjmp	.+284    	; 0x2836 <main+0x776>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:250
                    command.command=cmd_temperatur;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("onchiptemp"), (tokenlenght) )==0){
    271a:	a6 01       	movw	r20, r12
    271c:	6e ee       	ldi	r22, 0xEE	; 238
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	c8 01       	movw	r24, r16
    2722:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2726:	89 2b       	or	r24, r25
    2728:	09 f4       	brne	.+2      	; 0x272c <main+0x66c>
    272a:	88 c0       	rjmp	.+272    	; 0x283c <main+0x77c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:252
                    command.command=cmd_onchiptemp;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("onewiretemp"), (tokenlenght) )==0){
    272c:	a6 01       	movw	r20, r12
    272e:	62 ee       	ldi	r22, 0xE2	; 226
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	c8 01       	movw	r24, r16
    2734:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2738:	89 2b       	or	r24, r25
    273a:	09 f4       	brne	.+2      	; 0x273e <main+0x67e>
    273c:	82 c0       	rjmp	.+260    	; 0x2842 <main+0x782>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:254
                    command.command=cmd_onewiretemp;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("error"), (tokenlenght) )==0){
    273e:	a6 01       	movw	r20, r12
    2740:	6c ed       	ldi	r22, 0xDC	; 220
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	c8 01       	movw	r24, r16
    2746:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    274a:	89 2b       	or	r24, r25
    274c:	09 f4       	brne	.+2      	; 0x2750 <main+0x690>
    274e:	7c c0       	rjmp	.+248    	; 0x2848 <main+0x788>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:256
                    command.command=cmd_error;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("irontype"), (tokenlenght) )==0){
    2750:	a6 01       	movw	r20, r12
    2752:	63 ed       	ldi	r22, 0xD3	; 211
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	c8 01       	movw	r24, r16
    2758:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:257
                    command.command=cmd_irontype;
    275c:	06 e0       	ldi	r16, 0x06	; 6
    275e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:256
                    command.command=cmd_onchiptemp;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("onewiretemp"), (tokenlenght) )==0){
                    command.command=cmd_onewiretemp;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("error"), (tokenlenght) )==0){
                    command.command=cmd_error;
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("irontype"), (tokenlenght) )==0){
    2760:	89 2b       	or	r24, r25
    2762:	31 f0       	breq	.+12     	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:260
                    command.command=cmd_irontype;
                } else {
                    command.command = cmd_none;
                        PrintErrorLocation(startidx,i);
    2764:	69 2d       	mov	r22, r9
    2766:	8a 2d       	mov	r24, r10
    2768:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <PrintErrorLocation(unsigned char, unsigned char)>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:201
 Description: Command parser, returns a struct with the parsed result
**********************************************************************************************************/
serial_command_t SerialConsoleParseInput( void ){
    serial_command_t command;
    command.cmd_dir = cmd_data_error;
    command.command = cmd_none;
    276c:	10 e0       	ldi	r17, 0x00	; 0
    276e:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:271
                endidx=i;
            }
        }

         startidx = endidx+1;
        if( (startidx<msgbufferidx) && (msgbuffer[endidx]!='\n' ) &&  (msgbuffer[endidx]!='\r') )  {
    2770:	60 91 88 28 	lds	r22, 0x2888	; 0x802888 <msgbufferidx>
    2774:	48 8d       	ldd	r20, Y+24	; 0x18
    2776:	46 17       	cp	r20, r22
    2778:	08 f0       	brcs	.+2      	; 0x277c <main+0x6bc>
    277a:	71 c0       	rjmp	.+226    	; 0x285e <main+0x79e>
    277c:	e9 8d       	ldd	r30, Y+25	; 0x19
    277e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2780:	e8 5b       	subi	r30, 0xB8	; 184
    2782:	f7 4d       	sbci	r31, 0xD7	; 215
    2784:	80 81       	ld	r24, Z
    2786:	8a 30       	cpi	r24, 0x0A	; 10
    2788:	09 f4       	brne	.+2      	; 0x278c <main+0x6cc>
    278a:	69 c0       	rjmp	.+210    	; 0x285e <main+0x79e>
    278c:	8d 30       	cpi	r24, 0x0D	; 13
    278e:	09 f4       	brne	.+2      	; 0x2792 <main+0x6d2>
    2790:	66 c0       	rjmp	.+204    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:273
          //We have some elements left, check if this is wanted
          if((ParamLUT[command.command]!=param_none)){
    2792:	f8 01       	movw	r30, r16
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	e0 58       	subi	r30, 0x80	; 128
    279a:	f8 48       	sbci	r31, 0x88	; 136
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	89 2b       	or	r24, r25
    27a2:	29 f4       	brne	.+10     	; 0x27ae <main+0x6ee>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:278
              //We can move on
          } else {
              //we have a syntax problem here
              command.command = cmd_none;
              PrintErrorLocation(startidx,msgbufferidx);
    27a4:	84 2f       	mov	r24, r20
    27a6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <PrintErrorLocation(unsigned char, unsigned char)>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:277
          //We have some elements left, check if this is wanted
          if((ParamLUT[command.command]!=param_none)){
              //We can move on
          } else {
              //we have a syntax problem here
              command.command = cmd_none;
    27aa:	10 e0       	ldi	r17, 0x00	; 0
    27ac:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:289
        /*  
            last is to parse the parameter here 
            we currently strings and integer ( u32 ) but need to decide what we must do
        */
        
        if( (ParamLUT[command.command]!=param_string) && (ParamLUT[command.command]!=param_keyword) ){
    27ae:	f8 01       	movw	r30, r16
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	e0 58       	subi	r30, 0x80	; 128
    27b6:	f8 48       	sbci	r31, 0x88	; 136
    27b8:	20 81       	ld	r18, Z
    27ba:	31 81       	ldd	r19, Z+1	; 0x01
    27bc:	c9 01       	movw	r24, r18
    27be:	07 97       	sbiw	r24, 0x07	; 7
    27c0:	02 97       	sbiw	r24, 0x02	; 2
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <main+0x706>
    27c4:	88 c0       	rjmp	.+272    	; 0x28d6 <main+0x816>
    27c6:	78 8c       	ldd	r7, Y+24	; 0x18
main():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:290
          uint32_t value = 0;
    27c8:	81 2c       	mov	r8, r1
    27ca:	91 2c       	mov	r9, r1
    27cc:	54 01       	movw	r10, r8
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:292
          command.param_len=0;
          for(uint8_t i=startidx;i<msgbufferidx;i++){
    27ce:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <msgbufferidx>
    27d2:	78 16       	cp	r7, r24
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <main+0x718>
    27d6:	03 c1       	rjmp	.+518    	; 0x29de <main+0x91e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:294
              
              if( (msgbuffer[i]>='0') && (msgbuffer[i]<='9') ){
    27d8:	e7 2d       	mov	r30, r7
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	e8 5b       	subi	r30, 0xB8	; 184
    27de:	f7 4d       	sbci	r31, 0xD7	; 215
    27e0:	e0 81       	ld	r30, Z
    27e2:	80 ed       	ldi	r24, 0xD0	; 208
    27e4:	8e 0f       	add	r24, r30
    27e6:	8a 30       	cpi	r24, 0x0A	; 10
    27e8:	90 f5       	brcc	.+100    	; 0x284e <main+0x78e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:295
                  value = value * 10;
    27ea:	aa e0       	ldi	r26, 0x0A	; 10
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	a5 01       	movw	r20, r10
    27f0:	94 01       	movw	r18, r8
    27f2:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:296
                  value = value + ( msgbuffer[i] -'0');
    27f6:	4e 2f       	mov	r20, r30
    27f8:	40 53       	subi	r20, 0x30	; 48
    27fa:	55 0b       	sbc	r21, r21
    27fc:	4a 01       	movw	r8, r20
    27fe:	55 0f       	add	r21, r21
    2800:	aa 08       	sbc	r10, r10
    2802:	bb 08       	sbc	r11, r11
    2804:	86 0e       	add	r8, r22
    2806:	97 1e       	adc	r9, r23
    2808:	a8 1e       	adc	r10, r24
    280a:	b9 1e       	adc	r11, r25
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:292
        */
        
        if( (ParamLUT[command.command]!=param_string) && (ParamLUT[command.command]!=param_keyword) ){
          uint32_t value = 0;
          command.param_len=0;
          for(uint8_t i=startidx;i<msgbufferidx;i++){
    280c:	73 94       	inc	r7
    280e:	df cf       	rjmp	.-66     	; 0x27ce <main+0x70e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:216
        uint8_t endidx = 0;
        for(uint8_t i=0;i<msgbufferidx;i++){
            if( ( msgbuffer[i]==' ') || (msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
                /* The first token has ended, we accept only 'set', 'get' and 'help' */
                if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("set"), i)==0){
                    command.cmd_dir = cmd_data_set;
    2810:	b2 e0       	ldi	r27, 0x02	; 2
    2812:	eb 2e       	mov	r14, r27
    2814:	f1 2c       	mov	r15, r1
    2816:	45 cf       	rjmp	.-374    	; 0x26a2 <main+0x5e2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:218
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("get"), i)==0){
                    command.cmd_dir = cmd_data_get;
    2818:	ee 24       	eor	r14, r14
    281a:	e3 94       	inc	r14
    281c:	f1 2c       	mov	r15, r1
    281e:	41 cf       	rjmp	.-382    	; 0x26a2 <main+0x5e2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:220
                } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("help"), i)==0){
                    command.cmd_dir = cmd_data_help;
    2820:	f4 e0       	ldi	r31, 0x04	; 4
    2822:	ef 2e       	mov	r14, r31
    2824:	f1 2c       	mov	r15, r1
    2826:	3d cf       	rjmp	.-390    	; 0x26a2 <main+0x5e2>
    2828:	98 8c       	ldd	r9, Y+24	; 0x18
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:242
        } else {
            /* Parsing is done */
            return command;
        }

        for(uint8_t i=startidx;i<msgbufferidx;i++){
    282a:	99 11       	cpse	r25, r9
    282c:	4f cf       	rjmp	.-354    	; 0x26cc <main+0x60c>
    282e:	9e cf       	rjmp	.-196    	; 0x276c <main+0x6ac>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:247
            if( ( msgbuffer[i]==' ') || (msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
                /* The second token has ended, we accept only 'setpoint' , 'temperature' and 'error' */
                       uint8_t tokenlenght = i - startidx;
                if(strncmp_P(&msgbuffer[startidx] ,PSTR("setpoint"), (tokenlenght) )==0){
                    command.command=cmd_setpoint;
    2830:	01 e0       	ldi	r16, 0x01	; 1
    2832:	10 e0       	ldi	r17, 0x00	; 0
    2834:	9d cf       	rjmp	.-198    	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:249
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("temperature"), (tokenlenght) )==0){
                    command.command=cmd_temperatur;
    2836:	02 e0       	ldi	r16, 0x02	; 2
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	9a cf       	rjmp	.-204    	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:251
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("onchiptemp"), (tokenlenght) )==0){
                    command.command=cmd_onchiptemp;
    283c:	03 e0       	ldi	r16, 0x03	; 3
    283e:	10 e0       	ldi	r17, 0x00	; 0
    2840:	97 cf       	rjmp	.-210    	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:253
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("onewiretemp"), (tokenlenght) )==0){
                    command.command=cmd_onewiretemp;
    2842:	04 e0       	ldi	r16, 0x04	; 4
    2844:	10 e0       	ldi	r17, 0x00	; 0
    2846:	94 cf       	rjmp	.-216    	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:255
                } else if(strncmp_P(&msgbuffer[startidx] ,PSTR("error"), (tokenlenght) )==0){
                    command.command=cmd_error;
    2848:	05 e0       	ldi	r16, 0x05	; 5
    284a:	10 e0       	ldi	r17, 0x00	; 0
    284c:	91 cf       	rjmp	.-222    	; 0x2770 <main+0x6b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:298
              
              if( (msgbuffer[i]>='0') && (msgbuffer[i]<='9') ){
                  value = value * 10;
                  value = value + ( msgbuffer[i] -'0');
              } else {
                  if( ( msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
    284e:	ea 30       	cpi	r30, 0x0A	; 10
    2850:	11 f0       	breq	.+4      	; 0x2856 <main+0x796>
    2852:	ed 30       	cpi	r30, 0x0D	; 13
    2854:	59 f5       	brne	.+86     	; 0x28ac <main+0x7ec>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:300
                      command.param_len = i;
                       command.parameter.u32 = value;
    2856:	8d 82       	std	Y+5, r8	; 0x05
    2858:	9e 82       	std	Y+6, r9	; 0x06
    285a:	af 82       	std	Y+7, r10	; 0x07
    285c:	b8 86       	std	Y+8, r11	; 0x08
    285e:	e9 82       	std	Y+1, r14	; 0x01
    2860:	fa 82       	std	Y+2, r15	; 0x02
    2862:	0b 83       	std	Y+3, r16	; 0x03
    2864:	1c 83       	std	Y+4, r17	; 0x04
    2866:	79 86       	std	Y+9, r7	; 0x09
    2868:	89 e0       	ldi	r24, 0x09	; 9
    286a:	fe 01       	movw	r30, r28
    286c:	31 96       	adiw	r30, 0x01	; 1
    286e:	de 01       	movw	r26, r28
    2870:	1d 96       	adiw	r26, 0x0d	; 13
    2872:	01 90       	ld	r0, Z+
    2874:	0d 92       	st	X+, r0
    2876:	8a 95       	dec	r24
    2878:	e1 f7       	brne	.-8      	; 0x2872 <main+0x7b2>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:454
 Input:       None
 Output:      None 
 Description: Processes decoded command
**********************************************************************************************************/
void ProcessCommand(  serial_command_t command ){
                         switch( command.cmd_dir ){
    287a:	f2 e0       	ldi	r31, 0x02	; 2
    287c:	ef 16       	cp	r14, r31
    287e:	f1 04       	cpc	r15, r1
    2880:	09 f4       	brne	.+2      	; 0x2884 <main+0x7c4>
    2882:	ee c0       	rjmp	.+476    	; 0x2a60 <main+0x9a0>
    2884:	08 f0       	brcs	.+2      	; 0x2888 <main+0x7c8>
    2886:	ad c0       	rjmp	.+346    	; 0x29e2 <main+0x922>
    2888:	ea 94       	dec	r14
    288a:	ef 28       	or	r14, r15
    288c:	09 f4       	brne	.+2      	; 0x2890 <main+0x7d0>
    288e:	41 c1       	rjmp	.+642    	; 0x2b12 <main+0xa52>
    2890:	e8 e4       	ldi	r30, 0x48	; 72
    2892:	f8 e2       	ldi	r31, 0x28	; 40
SerialConsoleProcess():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:425
                        ProcessCommand(command);
                       
                        /* we clear the buffer */

                        for (uint8_t i=0;i<sizeof(msgbuffer);i++){
                            msgbuffer[i]=0;
    2894:	11 92       	st	Z+, r1
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:424
                        serial_command_t command = SerialConsoleParseInput();
                        ProcessCommand(command);
                       
                        /* we clear the buffer */

                        for (uint8_t i=0;i<sizeof(msgbuffer);i++){
    2896:	88 e2       	ldi	r24, 0x28	; 40
    2898:	e8 38       	cpi	r30, 0x88	; 136
    289a:	f8 07       	cpc	r31, r24
    289c:	d9 f7       	brne	.-10     	; 0x2894 <main+0x7d4>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:427
                            msgbuffer[i]=0;
                        }
                        msgbufferidx = 0;
    289e:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <msgbufferidx>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:428
                        Serial.print(F("\r\n>"));
    28a2:	8b e6       	ldi	r24, 0x6B	; 107
    28a4:	9c e7       	ldi	r25, 0x7C	; 124
    28a6:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
    28aa:	4b ce       	rjmp	.-874    	; 0x2542 <main+0x482>
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:302
              } else {
                  if( ( msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
                      command.param_len = i;
                       command.parameter.u32 = value;
                      return command;
                  } else if( (msgbuffer[i]<31) || ( msgbuffer[i]>=127)){
    28ac:	ef 51       	subi	r30, 0x1F	; 31
    28ae:	e0 36       	cpi	r30, 0x60	; 96
    28b0:	08 f4       	brcc	.+2      	; 0x28b4 <main+0x7f4>
    28b2:	ac cf       	rjmp	.-168    	; 0x280c <main+0x74c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:306
                       /* Parsing error */
                  command.cmd_dir = cmd_data_error;
                  command.command = cmd_none;
                  command.parameter.u32=0;
    28b4:	1d 82       	std	Y+5, r1	; 0x05
    28b6:	1e 82       	std	Y+6, r1	; 0x06
    28b8:	1f 82       	std	Y+7, r1	; 0x07
    28ba:	18 86       	std	Y+8, r1	; 0x08
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:307
                  Serial.print(" Syntax error near:\"");
    28bc:	87 e9       	ldi	r24, 0x97	; 151
    28be:	98 e7       	ldi	r25, 0x78	; 120
    28c0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:308
                  PrintErrorLocation(startidx,i);
    28c4:	67 2d       	mov	r22, r7
    28c6:	88 8d       	ldd	r24, Y+24	; 0x18
    28c8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <PrintErrorLocation(unsigned char, unsigned char)>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:305
                       command.parameter.u32 = value;
                      return command;
                  } else if( (msgbuffer[i]<31) || ( msgbuffer[i]>=127)){
                       /* Parsing error */
                  command.cmd_dir = cmd_data_error;
                  command.command = cmd_none;
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:304
                      command.param_len = i;
                       command.parameter.u32 = value;
                      return command;
                  } else if( (msgbuffer[i]<31) || ( msgbuffer[i]>=127)){
                       /* Parsing error */
                  command.cmd_dir = cmd_data_error;
    28d0:	f1 2c       	mov	r15, r1
    28d2:	e1 2c       	mov	r14, r1
    28d4:	9b cf       	rjmp	.-202    	; 0x280c <main+0x74c>
    28d6:	40 91 88 28 	lds	r20, 0x2888	; 0x802888 <msgbufferidx>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:318
              }                
          }
        } else if( (ParamLUT[command.command]==param_string) || (ParamLUT[command.command]==param_keyword) ){
          //This will be "simple" we look if we end with \n or \r and use the rest as
          //string for command processing
          command.parameter.ch=(char*)&msgbuffer[startidx]; //String start in Buffer
    28da:	58 8d       	ldd	r21, Y+24	; 0x18
    28dc:	85 2f       	mov	r24, r21
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	bc 01       	movw	r22, r24
    28e2:	68 5b       	subi	r22, 0xB8	; 184
    28e4:	77 4d       	sbci	r23, 0xD7	; 215
    28e6:	6b 01       	movw	r12, r22
    28e8:	6d 83       	std	Y+5, r22	; 0x05
    28ea:	7e 83       	std	Y+6, r23	; 0x06
    28ec:	4b 01       	movw	r8, r22
    28ee:	fb 01       	movw	r30, r22
    28f0:	78 2e       	mov	r7, r24
    28f2:	78 8d       	ldd	r23, Y+24	; 0x18
    28f4:	77 1a       	sub	r7, r23
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:320
          uint8_t StringLen = 0;
          for(uint8_t i=startidx;i<msgbufferidx;i++){
    28f6:	84 17       	cp	r24, r20
    28f8:	08 f0       	brcs	.+2      	; 0x28fc <main+0x83c>
    28fa:	60 c0       	rjmp	.+192    	; 0x29bc <main+0x8fc>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:322
             
                if( ( msgbuffer[i]=='\n') || (msgbuffer[i]=='\r') ){
    28fc:	91 91       	ld	r25, Z+
    28fe:	9a 30       	cpi	r25, 0x0A	; 10
    2900:	19 f0       	breq	.+6      	; 0x2908 <main+0x848>
    2902:	9d 30       	cpi	r25, 0x0D	; 13
    2904:	09 f0       	breq	.+2      	; 0x2908 <main+0x848>
    2906:	58 c0       	rjmp	.+176    	; 0x29b8 <main+0x8f8>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:324
                      //If we expect a param_sting we are done
                    if(ParamLUT[command.command]==param_string){
    2908:	27 30       	cpi	r18, 0x07	; 7
    290a:	31 05       	cpc	r19, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <main+0x850>
    290e:	a7 cf       	rjmp	.-178    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:329
                        command.param_len=StringLen;
                        return command;
                    } else {
                          //We need to ckeck for supported keywords
                        if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("ON"), (StringLen) )==0){
    2910:	a7 2c       	mov	r10, r7
    2912:	b1 2c       	mov	r11, r1
    2914:	a5 01       	movw	r20, r10
    2916:	60 ed       	ldi	r22, 0xD0	; 208
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	c6 01       	movw	r24, r12
    291c:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2920:	89 2b       	or	r24, r25
    2922:	29 f4       	brne	.+10     	; 0x292e <main+0x86e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:330
                                command.parameter.kw =(keyword_t)( KW_ON );
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:342
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("HKO"), (StringLen) )==0){
                                command.parameter.kw =(keyword_t)( KW_HKO );
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("WRT"), (StringLen) )==0){
                                command.parameter.kw =(keyword_t)( KW_WRT );
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	98 cf       	rjmp	.-208    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:332
                    } else {
                          //We need to ckeck for supported keywords
                        if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("ON"), (StringLen) )==0){
                                command.parameter.kw =(keyword_t)( KW_ON );
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("OFF"), (StringLen) )==0){
    292e:	a5 01       	movw	r20, r10
    2930:	6c ec       	ldi	r22, 0xCC	; 204
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	c6 01       	movw	r24, r12
    2936:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    293a:	89 2b       	or	r24, r25
    293c:	19 f4       	brne	.+6      	; 0x2944 <main+0x884>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:333
                                command.parameter.kw =(keyword_t)( KW_OFF );
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	f2 cf       	rjmp	.-28     	; 0x2928 <main+0x868>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:335
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("JBC"), (StringLen) )==0){
    2944:	a5 01       	movw	r20, r10
    2946:	68 ec       	ldi	r22, 0xC8	; 200
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	c6 01       	movw	r24, r12
    294c:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2950:	89 2b       	or	r24, r25
    2952:	19 f4       	brne	.+6      	; 0x295a <main+0x89a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:336
                                command.parameter.kw =(keyword_t)( KW_JBC );
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	e7 cf       	rjmp	.-50     	; 0x2928 <main+0x868>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:338
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("HKO"), (StringLen) )==0){
    295a:	a5 01       	movw	r20, r10
    295c:	64 ec       	ldi	r22, 0xC4	; 196
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	c6 01       	movw	r24, r12
    2962:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    2966:	89 2b       	or	r24, r25
    2968:	19 f4       	brne	.+6      	; 0x2970 <main+0x8b0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:339
                                command.parameter.kw =(keyword_t)( KW_HKO );
    296a:	2d 82       	std	Y+5, r2	; 0x05
    296c:	3e 82       	std	Y+6, r3	; 0x06
    296e:	77 cf       	rjmp	.-274    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:341
                                 return command;
                        } else if(strncmp_P((const char*)&msgbuffer[startidx] ,PSTR("WRT"), (StringLen) )==0){
    2970:	a5 01       	movw	r20, r10
    2972:	60 ec       	ldi	r22, 0xC0	; 192
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	c6 01       	movw	r24, r12
    2978:	0e 94 65 19 	call	0x32ca	; 0x32ca <strncmp_P>
    297c:	89 2b       	or	r24, r25
    297e:	19 f4       	brne	.+6      	; 0x2986 <main+0x8c6>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:342
                                command.parameter.kw =(keyword_t)( KW_WRT );
    2980:	85 e0       	ldi	r24, 0x05	; 5
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	d1 cf       	rjmp	.-94     	; 0x2928 <main+0x868>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:346
                                 return command;
                        } else {
                            //We need to signal an parsing error
                            Serial.print("'");
    2986:	80 e1       	ldi	r24, 0x10	; 16
    2988:	99 e7       	ldi	r25, 0x79	; 121
    298a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
main():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:347
                            for( uint8_t i=0;i<StringLen;i++){
    298e:	d1 2c       	mov	r13, r1
SerialConsoleParseInput():
    2990:	d7 14       	cp	r13, r7
    2992:	49 f0       	breq	.+18     	; 0x29a6 <main+0x8e6>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:348
                                Serial.print((char)(msgbuffer[startidx+i]) );
    2994:	f4 01       	movw	r30, r8
    2996:	61 91       	ld	r22, Z+
    2998:	4f 01       	movw	r8, r30
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:74
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    299a:	87 ea       	ldi	r24, 0xA7	; 167
    299c:	98 e2       	ldi	r25, 0x28	; 40
    299e:	0e 94 37 02 	call	0x46e	; 0x46e <UartClass::write(unsigned char)>
SerialConsoleParseInput():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:347
                                command.parameter.kw =(keyword_t)( KW_WRT );
                                 return command;
                        } else {
                            //We need to signal an parsing error
                            Serial.print("'");
                            for( uint8_t i=0;i<StringLen;i++){
    29a2:	d3 94       	inc	r13
    29a4:	f5 cf       	rjmp	.-22     	; 0x2990 <main+0x8d0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:350
                                Serial.print((char)(msgbuffer[startidx+i]) );
                            }
                            Serial.println("' not recognized as keyword" );
    29a6:	82 e1       	ldi	r24, 0x12	; 18
    29a8:	99 e7       	ldi	r25, 0x79	; 121
    29aa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:351
                            command.parameter.u32 =(uint32_t)( KW_PARSE_ERROR );
    29ae:	1d 82       	std	Y+5, r1	; 0x05
    29b0:	1e 82       	std	Y+6, r1	; 0x06
    29b2:	1f 82       	std	Y+7, r1	; 0x07
    29b4:	18 86       	std	Y+8, r1	; 0x08
    29b6:	53 cf       	rjmp	.-346    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:320
        } else if( (ParamLUT[command.command]==param_string) || (ParamLUT[command.command]==param_keyword) ){
          //This will be "simple" we look if we end with \n or \r and use the rest as
          //string for command processing
          command.parameter.ch=(char*)&msgbuffer[startidx]; //String start in Buffer
          uint8_t StringLen = 0;
          for(uint8_t i=startidx;i<msgbufferidx;i++){
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	9a cf       	rjmp	.-204    	; 0x28f0 <main+0x830>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:361
                StringLen++;
            }
            /* Parsing error */
            command.cmd_dir = cmd_data_error;
            command.command = cmd_none;
            command.parameter.u32=0;
    29bc:	1d 82       	std	Y+5, r1	; 0x05
    29be:	1e 82       	std	Y+6, r1	; 0x06
    29c0:	1f 82       	std	Y+7, r1	; 0x07
    29c2:	18 86       	std	Y+8, r1	; 0x08
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:362
            Serial.print("Syntax error near:\"");
    29c4:	88 e9       	ldi	r24, 0x98	; 152
    29c6:	98 e7       	ldi	r25, 0x78	; 120
    29c8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:363
            PrintErrorLocation(startidx,msgbufferidx);
    29cc:	60 91 88 28 	lds	r22, 0x2888	; 0x802888 <msgbufferidx>
    29d0:	88 8d       	ldd	r24, Y+24	; 0x18
    29d2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <PrintErrorLocation(unsigned char, unsigned char)>
    29d6:	f4 cd       	rjmp	.-1048   	; 0x25c0 <main+0x500>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:201
 Description: Command parser, returns a struct with the parsed result
**********************************************************************************************************/
serial_command_t SerialConsoleParseInput( void ){
    serial_command_t command;
    command.cmd_dir = cmd_data_error;
    command.command = cmd_none;
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	00 e0       	ldi	r16, 0x00	; 0
    29dc:	40 cf       	rjmp	.-384    	; 0x285e <main+0x79e>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:291
            we currently strings and integer ( u32 ) but need to decide what we must do
        */
        
        if( (ParamLUT[command.command]!=param_string) && (ParamLUT[command.command]!=param_keyword) ){
          uint32_t value = 0;
          command.param_len=0;
    29de:	71 2c       	mov	r7, r1
    29e0:	3e cf       	rjmp	.-388    	; 0x285e <main+0x79e>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:454
 Input:       None
 Output:      None 
 Description: Processes decoded command
**********************************************************************************************************/
void ProcessCommand(  serial_command_t command ){
                         switch( command.cmd_dir ){
    29e2:	43 e0       	ldi	r20, 0x03	; 3
    29e4:	e4 16       	cp	r14, r20
    29e6:	f1 04       	cpc	r15, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <main+0x92c>
    29ea:	01 c1       	rjmp	.+514    	; 0x2bee <main+0xb2e>
    29ec:	54 e0       	ldi	r21, 0x04	; 4
    29ee:	e5 16       	cp	r14, r21
    29f0:	f1 04       	cpc	r15, r1
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <main+0x936>
    29f4:	4d cf       	rjmp	.-358    	; 0x2890 <main+0x7d0>
SerialCommandShowHelp():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:172
 Input:       None
 Output:      None 
 Description: Show the help
**********************************************************************************************************/
void SerialCommandShowHelp( void ){
    Serial.println(F("Supported commands"));
    29f6:	8e e2       	ldi	r24, 0x2E	; 46
    29f8:	99 e7       	ldi	r25, 0x79	; 121
    29fa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:173
    Serial.println(F("------------------------------------------------------------------"));
    29fe:	87 e8       	ldi	r24, 0x87	; 135
    2a00:	9b e7       	ldi	r25, 0x7B	; 123
    2a02:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:174
    Serial.println(F("set/get setpoint [xxx] -> This will set or get the setpoint"));
    2a06:	81 e4       	ldi	r24, 0x41	; 65
    2a08:	99 e7       	ldi	r25, 0x79	; 121
    2a0a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:175
    Serial.println(F("set/get irontype [xxx] -> This will set or get the irontype"));
    2a0e:	8d e7       	ldi	r24, 0x7D	; 125
    2a10:	99 e7       	ldi	r25, 0x79	; 121
    2a12:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:176
    Serial.println(F("                  WRT = Weller RT Tip ( 12V / Type K )  "));
    2a16:	89 eb       	ldi	r24, 0xB9	; 185
    2a18:	99 e7       	ldi	r25, 0x79	; 121
    2a1a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:177
    Serial.println(F("                  HKO = HAKKO Tip ( 24V / Type C )  "));
    2a1e:	82 ef       	ldi	r24, 0xF2	; 242
    2a20:	99 e7       	ldi	r25, 0x79	; 121
    2a22:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:178
    Serial.println(F("                  JBC = JBC Tip ( 24V / Type K )  "));
    2a26:	87 e2       	ldi	r24, 0x27	; 39
    2a28:	9a e7       	ldi	r25, 0x7A	; 122
    2a2a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:179
    Serial.println(F("get temperature        -> This will report the current temp."));
    2a2e:	8a e5       	ldi	r24, 0x5A	; 90
    2a30:	9a e7       	ldi	r25, 0x7A	; 122
    2a32:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:180
    Serial.println(F("get onchiptemp         -> This will report the onchip temp."));
    2a36:	87 e9       	ldi	r24, 0x97	; 151
    2a38:	9a e7       	ldi	r25, 0x7A	; 122
    2a3a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:181
    Serial.println(F("get onewiretemp         -> This will report the onewire temp."));
    2a3e:	83 ed       	ldi	r24, 0xD3	; 211
    2a40:	9a e7       	ldi	r25, 0x7A	; 122
    2a42:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:182
    Serial.println(F("clear error            -> If an error is shown this will clear it"));
    2a46:	81 e1       	ldi	r24, 0x11	; 17
    2a48:	9b e7       	ldi	r25, 0x7B	; 123
    2a4a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:183
    Serial.println(F("help                   -> This will show this help"));
    2a4e:	83 e5       	ldi	r24, 0x53	; 83
    2a50:	9b e7       	ldi	r25, 0x7B	; 123
    2a52:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:184
    Serial.println(F("-------------------------------------------------------------------"));
    2a56:	86 e8       	ldi	r24, 0x86	; 134
    2a58:	9b e7       	ldi	r25, 0x7B	; 123
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:573

                                switch ( command.command ){
                                    
                                    case cmd_error:{
                                        command_if_clear_error();
                                        Serial.println("OK");
    2a5a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
    2a5e:	18 cf       	rjmp	.-464    	; 0x2890 <main+0x7d0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:461
                                SerialCommandShowHelp();
                            } break;

                            case cmd_data_set:{

                                switch ( command.command ){
    2a60:	01 30       	cpi	r16, 0x01	; 1
    2a62:	11 05       	cpc	r17, r1
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <main+0x9b2>
    2a66:	06 30       	cpi	r16, 0x06	; 6
    2a68:	11 05       	cpc	r17, r1
    2a6a:	99 f1       	breq	.+102    	; 0x2ad2 <main+0xa12>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:497
                                            }
                                        }
                                    }break;

                                    default:{
                                        Serial.println("Not supported");
    2a6c:	89 ef       	ldi	r24, 0xF9	; 249
    2a6e:	9b e7       	ldi	r25, 0x7B	; 123
    2a70:	f4 cf       	rjmp	.-24     	; 0x2a5a <main+0x99a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:464
                            case cmd_data_set:{

                                switch ( command.command ){
                                    
                                    case cmd_setpoint:{
                                     if(command.parameter.u32<=UINT16_MAX){
    2a72:	89 89       	ldd	r24, Y+17	; 0x11
    2a74:	9a 89       	ldd	r25, Y+18	; 0x12
    2a76:	ab 89       	ldd	r26, Y+19	; 0x13
    2a78:	bc 89       	ldd	r27, Y+20	; 0x14
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	a6 07       	cpc	r26, r22
    2a80:	b1 05       	cpc	r27, r1
    2a82:	08 f0       	brcs	.+2      	; 0x2a86 <main+0x9c6>
    2a84:	05 cf       	rjmp	.-502    	; 0x2890 <main+0x7d0>
command_if_update_setpoint():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:360
 Description: Sets the setpoint from a command interface
 *************************************************************************************************************/   
void command_if_update_setpoint( uint16_t newsetpoint )
{
  /* saintiy check */
  if( (newsetpoint >= MIN_TEMP) && ( newsetpoint<= MAX_TEMP)){
    2a86:	9c 01       	movw	r18, r24
    2a88:	22 53       	subi	r18, 0x32	; 50
    2a8a:	31 09       	sbc	r19, r1
    2a8c:	21 39       	cpi	r18, 0x91	; 145
    2a8e:	31 40       	sbci	r19, 0x01	; 1
    2a90:	70 f4       	brcc	.+28     	; 0x2aae <main+0x9ee>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:363
  
      /* depending on the state we need to decide if we write to the setpoint or LastActiveTemp */
      switch( state ){
    2a92:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <state>
    2a96:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <state+0x1>
    2a9a:	25 30       	cpi	r18, 0x05	; 5
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <main+0x9e6>
    2aa0:	27 30       	cpi	r18, 0x07	; 7
    2aa2:	31 05       	cpc	r19, r1
    2aa4:	89 f4       	brne	.+34     	; 0x2ac8 <main+0xa08>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:366
        case SLEEP:
        case POWERSAVE:{
            LastActiveTemp = newsetpoint;
    2aa6:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <LastActiveTemp>
    2aaa:	90 93 8c 28 	sts	0x288C, r25	; 0x80288c <LastActiveTemp+0x1>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:508
                            case cmd_data_get:{

                                  switch ( command.command ){
                                    
                                    case cmd_setpoint:{
                                    Serial.print(F("Setpoint:"));
    2aae:	8a ec       	ldi	r24, 0xCA	; 202
    2ab0:	9b e7       	ldi	r25, 0x7B	; 123
    2ab2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:509
                                    Serial.print(command_if_get_setpoint());  
    2ab6:	0e 94 de 09 	call	0x13bc	; 0x13bc <command_if_get_setpoint()>
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:89
  return print((long)n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long)n, base);
    2aba:	bc 01       	movw	r22, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    2ac0:	4a e0       	ldi	r20, 0x0A	; 10
    2ac2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
    2ac6:	16 c0       	rjmp	.+44     	; 0x2af4 <main+0xa34>
command_if_update_setpoint():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:370
        } break;

        default:{
            setpoint = newsetpoint;
    2ac8:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    2acc:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
    2ad0:	ee cf       	rjmp	.-36     	; 0x2aae <main+0x9ee>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:473
                                            Serial.print(F("\n\rOK\n\r")); 
                                      }
                                    } break;

                                    case cmd_irontype:{
                                        switch(command.parameter.kw){
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad6:	84 30       	cpi	r24, 0x04	; 4
    2ad8:	91 05       	cpc	r25, r1
    2ada:	41 f0       	breq	.+16     	; 0x2aec <main+0xa2c>
    2adc:	85 30       	cpi	r24, 0x05	; 5
    2ade:	91 05       	cpc	r25, r1
    2ae0:	61 f0       	breq	.+24     	; 0x2afa <main+0xa3a>
    2ae2:	03 97       	sbiw	r24, 0x03	; 3
    2ae4:	69 f4       	brne	.+26     	; 0x2b00 <main+0xa40>
command_if_set_irontype():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:346
SolderingIronType_t command_if_get_irontype( void ){
    return Station.GetSolderingIron();
}

void command_if_set_irontype( SolderingIronType_t iron ){
  Station.SetSolderingIron(iron);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <main+0xa30>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <HW_190409::SetSolderingIron(SolderingIronType_t) [clone .constprop.62]>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:555

                                        default:{
                                            Serial.print(F("UNKNOWN"));
                                        }break;
                                    }
                                    Serial.print(F("\n\rOK\n\r")); 
    2af4:	84 ed       	ldi	r24, 0xD4	; 212
    2af6:	9b e7       	ldi	r25, 0x7B	; 123
    2af8:	09 c0       	rjmp	.+18     	; 0x2b0c <main+0xa4c>
command_if_set_irontype():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:346
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	f8 cf       	rjmp	.-16     	; 0x2af0 <main+0xa30>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:490
                                                command_if_set_irontype(IRON_WELLER_RT);
                                                 Serial.print(F("\n\rOK\n\r")); 
                                            }break;

                                            default:{
                                                Serial.println("Keyword not supported");
    2b00:	8b ed       	ldi	r24, 0xDB	; 219
    2b02:	9b e7       	ldi	r25, 0x7B	; 123
    2b04:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:491
                                                Serial.print(F("\n\rERR\n\r")); 
    2b08:	81 ef       	ldi	r24, 0xF1	; 241
    2b0a:	9b e7       	ldi	r25, 0x7B	; 123
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:555

                                        default:{
                                            Serial.print(F("UNKNOWN"));
                                        }break;
                                    }
                                    Serial.print(F("\n\rOK\n\r")); 
    2b0c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
    2b10:	bf ce       	rjmp	.-642    	; 0x2890 <main+0x7d0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:505
                       
                            }break;

                            case cmd_data_get:{

                                  switch ( command.command ){
    2b12:	03 30       	cpi	r16, 0x03	; 3
    2b14:	11 05       	cpc	r17, r1
    2b16:	61 f1       	breq	.+88     	; 0x2b70 <main+0xab0>
    2b18:	80 f4       	brcc	.+32     	; 0x2b3a <main+0xa7a>
    2b1a:	01 30       	cpi	r16, 0x01	; 1
    2b1c:	11 05       	cpc	r17, r1
    2b1e:	39 f2       	breq	.-114    	; 0x2aae <main+0x9ee>
    2b20:	02 30       	cpi	r16, 0x02	; 2
    2b22:	11 05       	cpc	r17, r1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <main+0xa68>
    2b26:	a2 cf       	rjmp	.-188    	; 0x2a6c <main+0x9ac>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:514
                                    Serial.print(command_if_get_setpoint());  
                                    Serial.print(F("\n\rOK\n\r")); 
                                    } break;

                                    case cmd_temperatur:{
                                    Serial.print(F("Temperatur:"));
    2b28:	81 e2       	ldi	r24, 0x21	; 33
    2b2a:	9c e7       	ldi	r25, 0x7C	; 124
    2b2c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:89
  return print((long)n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long)n, base);
    2b30:	60 91 99 28 	lds	r22, 0x2899	; 0x802899 <display_Temp>
    2b34:	70 91 9a 28 	lds	r23, 0x289A	; 0x80289a <display_Temp+0x1>
    2b38:	c1 cf       	rjmp	.-126    	; 0x2abc <main+0x9fc>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:505
                       
                            }break;

                            case cmd_data_get:{

                                  switch ( command.command ){
    2b3a:	05 30       	cpi	r16, 0x05	; 5
    2b3c:	11 05       	cpc	r17, r1
    2b3e:	61 f1       	breq	.+88     	; 0x2b98 <main+0xad8>
    2b40:	10 f1       	brcs	.+68     	; 0x2b86 <main+0xac6>
    2b42:	06 30       	cpi	r16, 0x06	; 6
    2b44:	11 05       	cpc	r17, r1
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <main+0xa8a>
    2b48:	91 cf       	rjmp	.-222    	; 0x2a6c <main+0x9ac>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:537
                                    Serial.print(F("Error:"));
                                    Serial.print(command_if_get_error());  
                                    Serial.print(F("\n\rOK\n\r")); 

                                    case cmd_irontype:{
                                    Serial.print(F("Irontype:"));
    2b4a:	84 e3       	ldi	r24, 0x34	; 52
    2b4c:	9c e7       	ldi	r25, 0x7C	; 124
    2b4e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
GetSolderingIron():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:323
 Input:       None
 Output:      SolderingIronType_t
 Discription: Get the currently configured iron form the station
**********************************************************************************************************/
SolderingIronType_t HW_190409::GetSolderingIron( void ){
  return read_StoreIronConfig();
    2b52:	0e 94 37 0a 	call	0x146e	; 0x146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:538
                                    switch(command_if_get_irontype() ){
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	91 05       	cpc	r25, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <main+0xa9e>
    2b5c:	42 c0       	rjmp	.+132    	; 0x2be2 <main+0xb22>
    2b5e:	83 30       	cpi	r24, 0x03	; 3
    2b60:	91 05       	cpc	r25, r1
    2b62:	d1 f1       	breq	.+116    	; 0x2bd8 <main+0xb18>
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <main+0xaaa>
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <main+0xb28>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:544
                                        case IRON_WELLER_RT:{
                                            Serial.print(F("Weller RT")); 
                                        }break;

                                        case IRON_HAKKO_FX8801:{
                                            Serial.print(F("HAKKKO FX8801"));
    2b6a:	88 e4       	ldi	r24, 0x48	; 72
    2b6c:	9c e7       	ldi	r25, 0x7C	; 124
    2b6e:	36 c0       	rjmp	.+108    	; 0x2bdc <main+0xb1c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:520
                                    Serial.print(command_if_get_temperature());  
                                    Serial.print(F("\n\rOK\n\r")); 
                                    } break;

                                    case cmd_onchiptemp:{
                                    Serial.print(F("OnChip Temperatur:"));
    2b70:	87 e0       	ldi	r24, 0x07	; 7
    2b72:	9c e7       	ldi	r25, 0x7C	; 124
    2b74:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
command_if_get_onchiptemp():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:416

}


int16_t command_if_get_onchiptemp( void ){
  int16_t Temp = Station.Temp.GetOnchipTempKelvin();
    2b78:	0e 94 bc 00 	call	0x178	; 0x178 <TEMP_190409::GetOnchipTempKelvin() [clone .constprop.45]>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:527
                                    Serial.print(F("\n\rOK\n\r"));  
                                    } break;

                                    case cmd_onewiretemp:{
                                    Serial.print(F("1-Wire Temperatur:"));
                                    Serial.print(command_if_get_onewiretemp());  
    2b7c:	81 51       	subi	r24, 0x11	; 17
    2b7e:	91 40       	sbci	r25, 0x01	; 1
    2b80:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Print::print(int, int) [clone .constprop.6]>
    2b84:	b7 cf       	rjmp	.-146    	; 0x2af4 <main+0xa34>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:526
                                    Serial.print(command_if_get_onchiptemp());  
                                    Serial.print(F("\n\rOK\n\r"));  
                                    } break;

                                    case cmd_onewiretemp:{
                                    Serial.print(F("1-Wire Temperatur:"));
    2b86:	8a e1       	ldi	r24, 0x1A	; 26
    2b88:	9c e7       	ldi	r25, 0x7C	; 124
    2b8a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
command_if_get_onewiretemp():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:424
}


int16_t command_if_get_onewiretemp( void ){
  int16_t Temp = Station.Temp.GetLastOneWireTempKelvin();
  Temp = Temp-273;
    2b8e:	80 91 6a 29 	lds	r24, 0x296A	; 0x80296a <Station+0x10>
    2b92:	90 91 6b 29 	lds	r25, 0x296B	; 0x80296b <Station+0x11>
    2b96:	f2 cf       	rjmp	.-28     	; 0x2b7c <main+0xabc>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:532
                                    Serial.print(command_if_get_onewiretemp());  
                                    Serial.print(F("\n\rOK\n\r"));  
                                    } break;

                                    case cmd_error:{
                                    Serial.print(F("Error:"));
    2b98:	8d e2       	ldi	r24, 0x2D	; 45
    2b9a:	9c e7       	ldi	r25, 0x7C	; 124
    2b9c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
command_if_get_error():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:437
 Input:       None 
 Output:      None
 Description: returns the current error to the command interface
 *************************************************************************************************************/   
uint8_t command_if_get_error( void ){
  switch(state){
    2ba0:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <state>
    2ba4:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <state+0x1>
main():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:444
    case TEMPSENS_FAIL:{
      return 0x80 + ErrNo;
    }break;

    case UNDERVOLTAGE:{
      return 0x40;
    2ba8:	60 e4       	ldi	r22, 0x40	; 64
command_if_get_error():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:437
 Input:       None 
 Output:      None
 Description: returns the current error to the command interface
 *************************************************************************************************************/   
uint8_t command_if_get_error( void ){
  switch(state){
    2baa:	82 30       	cpi	r24, 0x02	; 2
    2bac:	91 05       	cpc	r25, r1
    2bae:	49 f0       	breq	.+18     	; 0x2bc2 <main+0xb02>
    2bb0:	83 30       	cpi	r24, 0x03	; 3
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <main+0xafc>
main():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:448
    case UNDERVOLTAGE:{
      return 0x40;
    }break;

    default:{
      return 0;
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
command_if_get_error():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:437
 Input:       None 
 Output:      None
 Description: returns the current error to the command interface
 *************************************************************************************************************/   
uint8_t command_if_get_error( void ){
  switch(state){
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	19 f4       	brne	.+6      	; 0x2bc2 <main+0xb02>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:440
    case WAIT:
    case TEMPSENS_FAIL:{
      return 0x80 + ErrNo;
    2bbc:	60 91 8a 28 	lds	r22, 0x288A	; 0x80288a <ErrNo>
    2bc0:	60 58       	subi	r22, 0x80	; 128
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:79
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long)b, base);
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    2bc8:	4a e0       	ldi	r20, 0x0A	; 10
    2bca:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:534
                                    Serial.print(command_if_get_error());  
                                    Serial.print(F("\n\rOK\n\r")); 
    2bce:	84 ed       	ldi	r24, 0xD4	; 212
    2bd0:	9b e7       	ldi	r25, 0x7B	; 123
    2bd2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
    2bd6:	b9 cf       	rjmp	.-142    	; 0x2b4a <main+0xa8a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:540

                                    case cmd_irontype:{
                                    Serial.print(F("Irontype:"));
                                    switch(command_if_get_irontype() ){
                                        case IRON_WELLER_RT:{
                                            Serial.print(F("Weller RT")); 
    2bd8:	8e e3       	ldi	r24, 0x3E	; 62
    2bda:	9c e7       	ldi	r25, 0x7C	; 124
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:552
                                        case IRON_JBC_T245A:{
                                            Serial.print(F("JBC T245A"));
                                        }break;

                                        default:{
                                            Serial.print(F("UNKNOWN"));
    2bdc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
    2be0:	89 cf       	rjmp	.-238    	; 0x2af4 <main+0xa34>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:548
                                        case IRON_HAKKO_FX8801:{
                                            Serial.print(F("HAKKKO FX8801"));
                                        }break;

                                        case IRON_JBC_T245A:{
                                            Serial.print(F("JBC T245A"));
    2be2:	86 e5       	ldi	r24, 0x56	; 86
    2be4:	9c e7       	ldi	r25, 0x7C	; 124
    2be6:	fa cf       	rjmp	.-12     	; 0x2bdc <main+0xb1c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:552
                                        }break;

                                        default:{
                                            Serial.print(F("UNKNOWN"));
    2be8:	80 e6       	ldi	r24, 0x60	; 96
    2bea:	9c e7       	ldi	r25, 0x7C	; 124
    2bec:	f7 cf       	rjmp	.-18     	; 0x2bdc <main+0xb1c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:569

                            } break;

                            case cmd_data_clear:{

                                switch ( command.command ){
    2bee:	05 30       	cpi	r16, 0x05	; 5
    2bf0:	11 05       	cpc	r17, r1
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <main+0xb36>
    2bf4:	3b cf       	rjmp	.-394    	; 0x2a6c <main+0x9ac>
command_if_clear_error():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:462
 Input:       None 
 Output:      None
 Description: clears the error form a command interface
 *************************************************************************************************************/   
void command_if_clear_error( void ){
  clear_error++;
    2bf6:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <clear_error>
    2bfa:	8f 5f       	subi	r24, 0xFF	; 255
    2bfc:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <clear_error>
ProcessCommand():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/serialcli.cpp:573
                                    
                                    case cmd_error:{
                                        command_if_clear_error();
                                        Serial.println("OK");
    2c00:	88 e6       	ldi	r24, 0x68	; 104
    2c02:	9c e7       	ldi	r25, 0x7C	; 124
    2c04:	2a cf       	rjmp	.-428    	; 0x2a5a <main+0x99a>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:110
        switch(state){ 
         /*************************************************************
                               STATE WELCOME_LOGO       
          *************************************************************/
         case WELCOME_LOGO:{
           Station.Frontend.display_welcome_logo();
    2c06:	8a e5       	ldi	r24, 0x5A	; 90
    2c08:	99 e2       	ldi	r25, 0x29	; 41
    2c0a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <FE_190409::display_welcome_logo()>
SearchOneWireSensor():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:293
}


bool TEMP_190409::SearchOneWireSensor( void ){

    if(false == OneWireSensorFound ){
    2c0e:	80 91 75 29 	lds	r24, 0x2975	; 0x802975 <Station+0x1b>
    2c12:	81 11       	cpse	r24, r1
    2c14:	10 c0       	rjmp	.+32     	; 0x2c36 <main+0xb76>
search():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:439
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    2c16:	dd 24       	eor	r13, r13
    2c18:	d3 94       	inc	r13
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:386
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    2c1a:	80 91 59 29 	lds	r24, 0x2959	; 0x802959 <ds+0xd>
    2c1e:	81 11       	cpse	r24, r1
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <main+0xb6a>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:388
      // 1-Wire reset
      if (!reset()) {
    2c22:	0e 94 94 05 	call	0xb28	; 0xb28 <OneWire::reset() [clone .constprop.38]>
    2c26:	81 11       	cpse	r24, r1
    2c28:	89 c0       	rjmp	.+274    	; 0x2d3c <main+0xc7c>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:390
         // reset the search
         LastDiscrepancy = 0;
    2c2a:	10 92 57 29 	sts	0x2957, r1	; 0x802957 <ds+0xb>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:391
         LastDeviceFlag = false;
    2c2e:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <ds+0xd>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:392
         LastFamilyDiscrepancy = 0;
    2c32:	10 92 58 29 	sts	0x2958, r1	; 0x802958 <ds+0xc>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:111
               if(true == Station.Temp.SearchOneWireSensor() ){
    2c36:	80 91 75 29 	lds	r24, 0x2975	; 0x802975 <Station+0x1b>
    2c3a:	88 23       	and	r24, r24
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <main+0xb80>
    2c3e:	d0 c0       	rjmp	.+416    	; 0x2de0 <main+0xd20>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:112
                Serial.println("Read Onewire Sensor");
    2c40:	80 ee       	ldi	r24, 0xE0	; 224
    2c42:	9c e7       	ldi	r25, 0x7C	; 124
    2c44:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
GetWireTempKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:343
        
        byte present = 0;
        byte data[12];
        float celsius, fahrenheit;

        ds.reset();
    2c48:	0e 94 94 05 	call	0xb28	; 0xb28 <OneWire::reset() [clone .constprop.38]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:344
        ds.select(addr);
    2c4c:	8c e6       	ldi	r24, 0x6C	; 108
    2c4e:	99 e2       	ldi	r25, 0x29	; 41
    2c50:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OneWire::select(unsigned char const*) [clone .constprop.39]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:345
        ds.write(0x44, 1);        // start conversion, with parasite power on at the end
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	84 e4       	ldi	r24, 0x44	; 68
    2c58:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:346
        ds.reset_search();
    2c5c:	0e 94 0e 01 	call	0x21c	; 0x21c <OneWire::reset_search() [clone .constprop.43]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:348

        delay(1000);
    2c60:	68 ee       	ldi	r22, 0xE8	; 232
    2c62:	73 e0       	ldi	r23, 0x03	; 3
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <delay>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:351


        present = ds.reset();
    2c6c:	0e 94 94 05 	call	0xb28	; 0xb28 <OneWire::reset() [clone .constprop.38]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:352
        ds.select(addr);    
    2c70:	8c e6       	ldi	r24, 0x6C	; 108
    2c72:	99 e2       	ldi	r25, 0x29	; 41
    2c74:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OneWire::select(unsigned char const*) [clone .constprop.39]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:353
        ds.write(0xBE);         // Read Scratchpad
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	8e eb       	ldi	r24, 0xBE	; 190
    2c7c:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
    2c80:	8e 01       	movw	r16, r28
    2c82:	0f 5f       	subi	r16, 0xFF	; 255
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
search():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:474
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    2c86:	48 e0       	ldi	r20, 0x08	; 8
    2c88:	e4 2e       	mov	r14, r20
    2c8a:	f1 2c       	mov	r15, r1
main():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:281
//
// Read a byte
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;
    2c8c:	d1 2c       	mov	r13, r1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:283

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    2c8e:	cc 24       	eor	r12, r12
    2c90:	c3 94       	inc	r12
read():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:284
	if ( OneWire::read_bit()) r |= bitMask;
    2c92:	0e 94 e6 05 	call	0xbcc	; 0xbcc <OneWire::read_bit() [clone .constprop.37]>
    2c96:	81 11       	cpse	r24, r1
    2c98:	dc 28       	or	r13, r12
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:283
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    2c9a:	cc 0c       	add	r12, r12
    2c9c:	21 e0       	ldi	r18, 0x01	; 1
    2c9e:	e2 1a       	sub	r14, r18
    2ca0:	f1 08       	sbc	r15, r1
    2ca2:	b9 f7       	brne	.-18     	; 0x2c92 <main+0xbd2>
GetWireTempKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:356
      
        for ( i = 0; i < 9; i++) {           // we need 9 bytes
          data[i] = ds.read();
    2ca4:	f8 01       	movw	r30, r16
    2ca6:	d1 92       	st	Z+, r13
    2ca8:	8f 01       	movw	r16, r30
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:355

        present = ds.reset();
        ds.select(addr);    
        ds.write(0xBE);         // Read Scratchpad
      
        for ( i = 0; i < 9; i++) {           // we need 9 bytes
    2caa:	2e 89       	ldd	r18, Y+22	; 0x16
    2cac:	3f 89       	ldd	r19, Y+23	; 0x17
    2cae:	2e 17       	cp	r18, r30
    2cb0:	3f 07       	cpc	r19, r31
    2cb2:	49 f7       	brne	.-46     	; 0x2c86 <main+0xbc6>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:361
          data[i] = ds.read();
         
      
        }
       
       if(data[8] != OneWire::crc8(data, 8) ){
    2cb4:	19 85       	ldd	r17, Y+9	; 0x09
    2cb6:	68 e0       	ldi	r22, 0x08	; 8
    2cb8:	ce 01       	movw	r24, r28
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	0e 94 8a 06 	call	0xd14	; 0xd14 <OneWire::crc8(unsigned char const*, unsigned char)>
    2cc0:	18 17       	cp	r17, r24
    2cc2:	21 f0       	breq	.+8      	; 0x2ccc <main+0xc0c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:362
        Serial.println("OneWire CRC Error"); 
    2cc4:	84 ef       	ldi	r24, 0xF4	; 244
    2cc6:	9c e7       	ldi	r25, 0x7C	; 124
    2cc8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:369
       
        // Convert the data to actual temperature
        // because the result is a 16 bit signed integer, it should
        // be stored to an "int16_t" type, which is always 16 bits
        // even when compiled on a 32 bit processor.
        int16_t raw = (data[1] << 8) | data[0];
    2ccc:	69 81       	ldd	r22, Y+1	; 0x01
    2cce:	7a 81       	ldd	r23, Y+2	; 0x02
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:370
        if (type_s) {
    2cd0:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <Station+0x1a>
    2cd4:	88 23       	and	r24, r24
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <main+0xc1a>
    2cd8:	df c0       	rjmp	.+446    	; 0x2e98 <main+0xdd8>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:371
          raw = raw << 3; // 9 bit resolution default
    2cda:	33 e0       	ldi	r19, 0x03	; 3
    2cdc:	66 0f       	add	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	3a 95       	dec	r19
    2ce2:	e1 f7       	brne	.-8      	; 0x2cdc <main+0xc1c>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:372
          if (data[7] == 0x10) {
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	80 31       	cpi	r24, 0x10	; 16
    2ce8:	41 f4       	brne	.+16     	; 0x2cfa <main+0xc3a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:374
            // "count remain" gives full 12 bit resolution
            raw = (raw & 0xFFF0) + 12 - data[6];
    2cea:	2f 81       	ldd	r18, Y+7	; 0x07
    2cec:	8c e0       	ldi	r24, 0x0C	; 12
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	82 1b       	sub	r24, r18
    2cf2:	91 09       	sbc	r25, r1
    2cf4:	60 7f       	andi	r22, 0xF0	; 240
    2cf6:	68 0f       	add	r22, r24
    2cf8:	79 1f       	adc	r23, r25
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:384
          if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
          else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
          else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
          //// default is 12 bit resolution, 750 ms conversion time
        }
        celsius = (float)raw / 16.0;
    2cfa:	07 2e       	mov	r0, r23
    2cfc:	00 0c       	add	r0, r0
    2cfe:	88 0b       	sbc	r24, r24
    2d00:	99 0b       	sbc	r25, r25
    2d02:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatsisf>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5d e3       	ldi	r21, 0x3D	; 61
    2d0e:	0e 94 0f 1a 	call	0x341e	; 0x341e <__mulsf3>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:386
        fahrenheit = celsius * 1.8 + 32.0;
        LastTempReadKelvin=(int16_t)celsius+273; 
    2d12:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fixsfsi>
    2d16:	6f 5e       	subi	r22, 0xEF	; 239
    2d18:	7e 4f       	sbci	r23, 0xFE	; 254
    2d1a:	60 93 6a 29 	sts	0x296A, r22	; 0x80296a <Station+0x10>
    2d1e:	70 93 6b 29 	sts	0x296B, r23	; 0x80296b <Station+0x11>
set_delay():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:474
 Input:       None 
 Output:      None
 Description: Set the delaytimer to a given value 
 *************************************************************************************************************/    
void set_delay( uint16_t ms){
  while(delay_ms!=ms){
    2d22:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2d26:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2d2a:	80 3d       	cpi	r24, 0xD0	; 208
    2d2c:	97 40       	sbci	r25, 0x07	; 7
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <main+0xc72>
    2d30:	c1 c0       	rjmp	.+386    	; 0x2eb4 <main+0xdf4>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:475
    delay_ms=ms;
    2d32:	40 92 a1 28 	sts	0x28A1, r4	; 0x8028a1 <delay_ms>
    2d36:	50 92 a2 28 	sts	0x28A2, r5	; 0x8028a2 <delay_ms+0x1>
    2d3a:	f3 cf       	rjmp	.-26     	; 0x2d22 <main+0xc62>
search():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:398
         return false;
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	80 ef       	ldi	r24, 0xF0	; 240
    2d40:	0e 94 48 05 	call	0xa90	; 0xa90 <OneWire::write(unsigned char, unsigned char) [clone .constprop.40]>
    2d44:	01 e0       	ldi	r16, 0x01	; 1
    2d46:	e1 2c       	mov	r14, r1
    2d48:	c1 2c       	mov	r12, r1
    2d4a:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:407

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    2d4c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <OneWire::read_bit() [clone .constprop.37]>
    2d50:	f8 2e       	mov	r15, r24
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:408
         cmp_id_bit = read_bit();
    2d52:	0e 94 e6 05 	call	0xbcc	; 0xbcc <OneWire::read_bit() [clone .constprop.37]>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:411

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	f9 12       	cpse	r15, r25
    2d5a:	47 c0       	rjmp	.+142    	; 0x2dea <main+0xd2a>
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <main+0xca2>
    2d60:	63 c0       	rjmp	.+198    	; 0x2e28 <main+0xd68>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:461
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    2d62:	11 34       	cpi	r17, 0x41	; 65
    2d64:	08 f4       	brcc	.+2      	; 0x2d68 <main+0xca8>
    2d66:	61 cf       	rjmp	.-318    	; 0x2c2a <main+0xb6a>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:463
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    2d68:	c0 92 57 29 	sts	0x2957, r12	; 0x802957 <ds+0xb>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:466

         // check for last device
         if (LastDiscrepancy == 0) {
    2d6c:	c1 10       	cpse	r12, r1
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <main+0xcb4>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:467
            LastDeviceFlag = true;
    2d70:	d0 92 59 29 	sts	0x2959, r13	; 0x802959 <ds+0xd>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:474
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    2d74:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <ds+0x3>
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <main+0xcbe>
    2d7c:	56 cf       	rjmp	.-340    	; 0x2c2a <main+0xb6a>
    2d7e:	ef e4       	ldi	r30, 0x4F	; 79
    2d80:	f9 e2       	ldi	r31, 0x29	; 41
    2d82:	0c e6       	ldi	r16, 0x6C	; 108
    2d84:	19 e2       	ldi	r17, 0x29	; 41
    2d86:	d8 01       	movw	r26, r16
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:480
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    2d88:	81 91       	ld	r24, Z+
    2d8a:	8d 93       	st	X+, r24
    2d8c:	29 e2       	ldi	r18, 0x29	; 41
    2d8e:	e7 35       	cpi	r30, 0x57	; 87
    2d90:	f2 07       	cpc	r31, r18
    2d92:	d1 f7       	brne	.-12     	; 0x2d88 <main+0xcc8>
SearchOneWireSensor():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:296
bool TEMP_190409::SearchOneWireSensor( void ){

    if(false == OneWireSensorFound ){
          while( ds.search(addr)) {
        
              Serial.print("ROM =");
    2d94:	8f e6       	ldi	r24, 0x6F	; 111
    2d96:	9c e7       	ldi	r25, 0x7C	; 124
    2d98:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Print::print(char const*) [clone .constprop.12]>
write():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/UART.h:172
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2d9c:	60 e2       	ldi	r22, 0x20	; 32
    2d9e:	87 ea       	ldi	r24, 0xA7	; 167
    2da0:	98 e2       	ldi	r25, 0x28	; 40
    2da2:	0e 94 37 02 	call	0x46e	; 0x46e <UartClass::write(unsigned char)>
SearchOneWireSensor():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:299
              for( uint8_t i = 0; i < 8; i++) {
                Serial.write(' ');
                Serial.print(addr[i], HEX);
    2da6:	f8 01       	movw	r30, r16
    2da8:	61 91       	ld	r22, Z+
    2daa:	8f 01       	movw	r16, r30
print():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:79
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long)b, base);
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    2db2:	40 e1       	ldi	r20, 0x10	; 16
    2db4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
SearchOneWireSensor():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:297

    if(false == OneWireSensorFound ){
          while( ds.search(addr)) {
        
              Serial.print("ROM =");
              for( uint8_t i = 0; i < 8; i++) {
    2db8:	f9 e2       	ldi	r31, 0x29	; 41
    2dba:	04 37       	cpi	r16, 0x74	; 116
    2dbc:	1f 07       	cpc	r17, r31
    2dbe:	71 f7       	brne	.-36     	; 0x2d9c <main+0xcdc>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:302
                Serial.write(' ');
                Serial.print(addr[i], HEX);
              }
            
              if (OneWire::crc8(addr, 7) != addr[7]) {
    2dc0:	67 e0       	ldi	r22, 0x07	; 7
    2dc2:	8c e6       	ldi	r24, 0x6C	; 108
    2dc4:	99 e2       	ldi	r25, 0x29	; 41
    2dc6:	0e 94 8a 06 	call	0xd14	; 0xd14 <OneWire::crc8(unsigned char const*, unsigned char)>
    2dca:	90 91 73 29 	lds	r25, 0x2973	; 0x802973 <Station+0x19>
    2dce:	89 17       	cp	r24, r25
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <main+0xd14>
    2dd2:	40 c0       	rjmp	.+128    	; 0x2e54 <main+0xd94>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:303
                  Serial.println("CRC is not valid!");
    2dd4:	85 e7       	ldi	r24, 0x75	; 117
    2dd6:	9c e7       	ldi	r25, 0x7C	; 124
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:324
                case 0x22:
                  Serial.println("  Chip = DS1822");
                  type_s = 0;
                  break;
                default:
                  Serial.println("Device is not a DS18x20 family device.");
    2dd8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:325
                  OneWireSensorFound=false;
    2ddc:	10 92 75 29 	sts	0x2975, r1	; 0x802975 <Station+0x1b>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:115
           Station.Frontend.display_welcome_logo();
               if(true == Station.Temp.SearchOneWireSensor() ){
                Serial.println("Read Onewire Sensor");
                uint16_t Temp = Station.Temp.GetWireTempKelvin();
               }else{
                Serial.println("No Sensor found");
    2de0:	86 e0       	ldi	r24, 0x06	; 6
    2de2:	9d e7       	ldi	r25, 0x7D	; 125
    2de4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
    2de8:	9c cf       	rjmp	.-200    	; 0x2d22 <main+0xc62>
    2dea:	ee 2d       	mov	r30, r14
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
search():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:415
         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    2dee:	f8 12       	cpse	r15, r24
    2df0:	11 c0       	rjmp	.+34     	; 0x2e14 <main+0xd54>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:420
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    2df2:	80 91 57 29 	lds	r24, 0x2957	; 0x802957 <ds+0xb>
    2df6:	18 17       	cp	r17, r24
    2df8:	a8 f4       	brcc	.+42     	; 0x2e24 <main+0xd64>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:421
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    2dfa:	df 01       	movw	r26, r30
    2dfc:	a4 5b       	subi	r26, 0xB4	; 180
    2dfe:	b6 4d       	sbci	r27, 0xD6	; 214
    2e00:	13 96       	adiw	r26, 0x03	; 3
    2e02:	8c 91       	ld	r24, X
    2e04:	80 23       	and	r24, r16
    2e06:	81 f4       	brne	.+32     	; 0x2e28 <main+0xd68>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:424
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    2e08:	f1 2c       	mov	r15, r1
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:431
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    2e0a:	19 30       	cpi	r17, 0x09	; 9
    2e0c:	10 f4       	brcc	.+4      	; 0x2e12 <main+0xd52>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:432
                     LastFamilyDiscrepancy = last_zero;
    2e0e:	10 93 58 29 	sts	0x2958, r17	; 0x802958 <ds+0xc>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:431
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    2e12:	c1 2e       	mov	r12, r17
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:441
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    2e14:	e4 5b       	subi	r30, 0xB4	; 180
    2e16:	f6 4d       	sbci	r31, 0xD6	; 214
    2e18:	83 81       	ldd	r24, Z+3	; 0x03
    2e1a:	90 2f       	mov	r25, r16
    2e1c:	90 95       	com	r25
    2e1e:	89 23       	and	r24, r25
    2e20:	83 83       	std	Z+3, r24	; 0x03
    2e22:	0b c0       	rjmp	.+22     	; 0x2e3a <main+0xd7a>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:424
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    2e24:	81 13       	cpse	r24, r17
    2e26:	f0 cf       	rjmp	.-32     	; 0x2e08 <main+0xd48>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:439
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    2e28:	ee 2d       	mov	r30, r14
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	e4 5b       	subi	r30, 0xB4	; 180
    2e2e:	f6 4d       	sbci	r31, 0xD6	; 214
    2e30:	83 81       	ldd	r24, Z+3	; 0x03
    2e32:	80 2b       	or	r24, r16
    2e34:	83 83       	std	Z+3, r24	; 0x03
    2e36:	ff 24       	eor	r15, r15
    2e38:	f3 94       	inc	r15
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:444
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;

            // serial number search direction write bit
            write_bit(search_direction);
    2e3a:	8f 2d       	mov	r24, r15
    2e3c:	0e 94 0b 05 	call	0xa16	; 0xa16 <OneWire::write_bit(unsigned char) [clone .constprop.41]>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:448

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    2e40:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:449
            rom_byte_mask <<= 1;
    2e42:	00 0f       	add	r16, r16
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:452

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    2e44:	11 f4       	brne	.+4      	; 0x2e4a <main+0xd8a>
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:453
                rom_byte_number++;
    2e46:	e3 94       	inc	r14
main():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:454
                rom_byte_mask = 1;
    2e48:	01 e0       	ldi	r16, 0x01	; 1
search():
C:\Users\mathiasc\Documents\Arduino\libraries\OneWire/OneWire.cpp:458
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    2e4a:	e7 e0       	ldi	r30, 0x07	; 7
    2e4c:	ee 15       	cp	r30, r14
    2e4e:	08 f0       	brcs	.+2      	; 0x2e52 <main+0xd92>
    2e50:	7d cf       	rjmp	.-262    	; 0x2d4c <main+0xc8c>
    2e52:	87 cf       	rjmp	.-242    	; 0x2d62 <main+0xca2>
write():
    2e54:	84 e9       	ldi	r24, 0x94	; 148
    2e56:	98 e7       	ldi	r25, 0x78	; 120
    2e58:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Print::write(char const*) [clone .part.2] [clone .constprop.22]>
SearchOneWireSensor():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:310
                  return false;
              }
              Serial.println();
         
              // the first ROM byte indicates which chip
              switch (addr[0]) {
    2e5c:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <Station+0x12>
    2e60:	82 32       	cpi	r24, 0x22	; 34
    2e62:	a1 f0       	breq	.+40     	; 0x2e8c <main+0xdcc>
    2e64:	88 32       	cpi	r24, 0x28	; 40
    2e66:	59 f0       	breq	.+22     	; 0x2e7e <main+0xdbe>
    2e68:	80 31       	cpi	r24, 0x10	; 16
    2e6a:	99 f4       	brne	.+38     	; 0x2e92 <main+0xdd2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:312
                case 0x10:
                  Serial.println("  Chip = DS18S20");  // or old DS1820
    2e6c:	87 e8       	ldi	r24, 0x87	; 135
    2e6e:	9c e7       	ldi	r25, 0x7C	; 124
    2e70:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:313
                  type_s = 1;
    2e74:	d0 92 74 29 	sts	0x2974, r13	; 0x802974 <Station+0x1a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:329
                  Serial.println("Device is not a DS18x20 family device.");
                  OneWireSensorFound=false;
                  return false;
                  
              } 
              OneWireSensorFound=true;
    2e78:	d0 92 75 29 	sts	0x2975, r13	; 0x802975 <Station+0x1b>
    2e7c:	ce ce       	rjmp	.-612    	; 0x2c1a <main+0xb5a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:316
                case 0x10:
                  Serial.println("  Chip = DS18S20");  // or old DS1820
                  type_s = 1;
                  break;
                case 0x28:
                  Serial.println("  Chip = DS18B20");
    2e7e:	88 e9       	ldi	r24, 0x98	; 152
    2e80:	9c e7       	ldi	r25, 0x7C	; 124
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:320
                  type_s = 0;
                  break;
                case 0x22:
                  Serial.println("  Chip = DS1822");
    2e82:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Print::println(char const*) [clone .constprop.19]>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:321
                  type_s = 0;
    2e86:	10 92 74 29 	sts	0x2974, r1	; 0x802974 <Station+0x1a>
    2e8a:	f6 cf       	rjmp	.-20     	; 0x2e78 <main+0xdb8>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:320
                case 0x28:
                  Serial.println("  Chip = DS18B20");
                  type_s = 0;
                  break;
                case 0x22:
                  Serial.println("  Chip = DS1822");
    2e8c:	89 ea       	ldi	r24, 0xA9	; 169
    2e8e:	9c e7       	ldi	r25, 0x7C	; 124
    2e90:	f8 cf       	rjmp	.-16     	; 0x2e82 <main+0xdc2>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:324
                  type_s = 0;
                  break;
                default:
                  Serial.println("Device is not a DS18x20 family device.");
    2e92:	89 eb       	ldi	r24, 0xB9	; 185
    2e94:	9c e7       	ldi	r25, 0x7C	; 124
    2e96:	a0 cf       	rjmp	.-192    	; 0x2dd8 <main+0xd18>
GetWireTempKelvin():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:377
          if (data[7] == 0x10) {
            // "count remain" gives full 12 bit resolution
            raw = (raw & 0xFFF0) + 12 - data[6];
          }
        } else {
          byte cfg = (data[4] & 0x60);
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	80 76       	andi	r24, 0x60	; 96
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:379
          // at lower res, the low bits are undefined, so let's zero them
          if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    2e9c:	11 f4       	brne	.+4      	; 0x2ea2 <main+0xde2>
    2e9e:	68 7f       	andi	r22, 0xF8	; 248
    2ea0:	2c cf       	rjmp	.-424    	; 0x2cfa <main+0xc3a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:380
          else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    2ea2:	80 32       	cpi	r24, 0x20	; 32
    2ea4:	11 f4       	brne	.+4      	; 0x2eaa <main+0xdea>
    2ea6:	6c 7f       	andi	r22, 0xFC	; 252
    2ea8:	28 cf       	rjmp	.-432    	; 0x2cfa <main+0xc3a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/TEMP_190409.cpp:381
          else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    2eaa:	80 34       	cpi	r24, 0x40	; 64
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <main+0xdf0>
    2eae:	25 cf       	rjmp	.-438    	; 0x2cfa <main+0xc3a>
    2eb0:	6e 7f       	andi	r22, 0xFE	; 254
    2eb2:	23 cf       	rjmp	.-442    	; 0x2cfa <main+0xc3a>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:118
              }
           set_delay(2000);                        /* delay for the next state */
           state = WELCOME_LOGO_WAIT; 
    2eb4:	8a e0       	ldi	r24, 0x0A	; 10
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:310
          PWM_Off();
          Station.Frontend.display_dim(true);//display.dim(true); //Dim the display, if supported 
          display_Sleep();   //Show the sleep screen
          setpoint=0;           //We set the target to 0 degree, seem safe
          HeatPwr_Percent=0;
          state = SLEEP_WAIT; 
    2eb8:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    2ebc:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
    2ec0:	34 c0       	rjmp	.+104    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:125

        /*************************************************************
                              STATE WELCOME_LOGO_WAIT       
        *************************************************************/
        case WELCOME_LOGO_WAIT:{
          if(0==delay_ms){      
    2ec2:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2ec6:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2eca:	89 2b       	or	r24, r25
    2ecc:	19 f4       	brne	.+6      	; 0x2ed4 <main+0xe14>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:126
            state = WELCOME_TITLE;                  /* the next state the fsm will enter */
    2ece:	8b e0       	ldi	r24, 0x0B	; 11
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	f2 cf       	rjmp	.-28     	; 0x2eb8 <main+0xdf8>
digitalRead():
    2ed4:	84 e0       	ldi	r24, 0x04	; 4
    2ed6:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:127
          } else if( digitalRead( ROTARY_BTN ) == LOW ){         /* if the user pressed the button we will enter config mode */
    2eda:	81 11       	cpse	r24, r1
    2edc:	26 c0       	rjmp	.+76     	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:128
            state= CONIFG_MODE_WELCOME;
    2ede:	8d e0       	ldi	r24, 0x0D	; 13
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	ea cf       	rjmp	.-44     	; 0x2eb8 <main+0xdf8>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:137

        /*************************************************************
                              STATE WELCOME_TITLE       
        *************************************************************/
        case WELCOME_TITLE:{
           Station.Frontend.display_title();
    2ee4:	8a e5       	ldi	r24, 0x5A	; 90
    2ee6:	99 e2       	ldi	r25, 0x29	; 41
    2ee8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <FE_190409::display_title()>
set_delay():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:474
 Input:       None 
 Output:      None
 Description: Set the delaytimer to a given value 
 *************************************************************************************************************/    
void set_delay( uint16_t ms){
  while(delay_ms!=ms){
    2eec:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2ef0:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2ef4:	80 3d       	cpi	r24, 0xD0	; 208
    2ef6:	97 40       	sbci	r25, 0x07	; 7
    2ef8:	29 f0       	breq	.+10     	; 0x2f04 <main+0xe44>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:475
    delay_ms=ms;
    2efa:	40 92 a1 28 	sts	0x28A1, r4	; 0x8028a1 <delay_ms>
    2efe:	50 92 a2 28 	sts	0x28A2, r5	; 0x8028a2 <delay_ms+0x1>
    2f02:	f4 cf       	rjmp	.-24     	; 0x2eec <main+0xe2c>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:139
                              STATE WELCOME_TITLE       
        *************************************************************/
        case WELCOME_TITLE:{
           Station.Frontend.display_title();
           set_delay(2000);                        /* delay for the next state */
           state = WELCOME_TITLE_WAIT; 
    2f04:	8c e0       	ldi	r24, 0x0C	; 12
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	d7 cf       	rjmp	.-82     	; 0x2eb8 <main+0xdf8>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:146

        /*************************************************************
                              STATE WELCOME_TITLE_WAIT       
        *************************************************************/
        case WELCOME_TITLE_WAIT:{
          if( (0==delay_ms) || ( digitalRead( ROTARY_BTN ) == LOW ) ){ /* if the user pressed the button we skip the intro */
    2f0a:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2f0e:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2f12:	89 2b       	or	r24, r25
    2f14:	29 f4       	brne	.+10     	; 0x2f20 <main+0xe60>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:293
          Station.CheckLimits();
          if( ( digitalRead( ROTARY_BTN ) == LOW ) && ( btn_press_time < 1000 ))
          {
            setpoint = LastActiveTemp;   /* we restore the temperatur */
            rotary_EncoderEnable();  /* we setup the encoder again */
            state= NOFAULT;           /* we switch to opperating state */
    2f16:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <state>
    2f1a:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <state+0x1>
    2f1e:	05 c0       	rjmp	.+10     	; 0x2f2a <main+0xe6a>
digitalRead():
    2f20:	84 e0       	ldi	r24, 0x04	; 4
    2f22:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:146

        /*************************************************************
                              STATE WELCOME_TITLE_WAIT       
        *************************************************************/
        case WELCOME_TITLE_WAIT:{
          if( (0==delay_ms) || ( digitalRead( ROTARY_BTN ) == LOW ) ){ /* if the user pressed the button we skip the intro */
    2f26:	88 23       	and	r24, r24
    2f28:	b1 f3       	breq	.-20     	; 0x2f16 <main+0xe56>
main():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\cores\coreX-corefiles/main.cpp:43
  setup();

  for (;;)
  {
    loop();
    if (serialEventRun) serialEventRun();
    2f2a:	0e 94 aa 02 	call	0x554	; 0x554 <serialEventRun()>
    2f2e:	f0 ca       	rjmp	.-2592   	; 0x2510 <main+0x450>
set_delay():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:474
 Input:       None 
 Output:      None
 Description: Set the delaytimer to a given value 
 *************************************************************************************************************/    
void set_delay( uint16_t ms){
  while(delay_ms!=ms){
    2f30:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2f34:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2f38:	80 3d       	cpi	r24, 0xD0	; 208
    2f3a:	97 40       	sbci	r25, 0x07	; 7
    2f3c:	29 f0       	breq	.+10     	; 0x2f48 <main+0xe88>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:475
    delay_ms=ms;
    2f3e:	40 92 a1 28 	sts	0x28A1, r4	; 0x8028a1 <delay_ms>
    2f42:	50 92 a2 28 	sts	0x28A2, r5	; 0x8028a2 <delay_ms+0x1>
    2f46:	f4 cf       	rjmp	.-24     	; 0x2f30 <main+0xe70>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:154
        } break;

        case CONIFG_MODE_WELCOME:{
          //We display that we entered config mode
          set_delay(2000);                        /* delay for the next state */
          state = CONIFG_MODE_WELCOME_WAIT; 
    2f48:	6e e0       	ldi	r22, 0x0E	; 14
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	60 93 22 28 	sts	0x2822, r22	; 0x802822 <state>
    2f50:	70 93 23 28 	sts	0x2823, r23	; 0x802823 <state+0x1>
display_show_config():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:83
 Input:       None
 Output:      None
 Discription: Shows the ConF title
**********************************************************************************************************/
void FE_190409::display_show_config( void  ){
    tm1637.displayStr("CONF");
    2f54:	86 e1       	ldi	r24, 0x16	; 22
    2f56:	9d e7       	ldi	r25, 0x7D	; 125
    2f58:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>
rotary_EncoderDisable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:503
 Output:      None
 Description: Disable pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderDisable()
{   
    RotaryEncoderLocked=1;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <RotaryEncoderLocked>
rotary_EncoderMenuEnable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:516
 Output:      None
 Description: Configure pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderMenuEnable()
{   
    RotaryEncoderMenuEna=1;
    2f62:	80 93 9f 28 	sts	0x289F, r24	; 0x80289f <RotaryEncoderMenuEna>
    2f66:	e1 cf       	rjmp	.-62     	; 0x2f2a <main+0xe6a>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:162
          rotary_EncoderMenuEnable();
        }break;
        
        case CONIFG_MODE_WELCOME_WAIT:{
          //We wait a few seconds
          if( (0==delay_ms)  ){ /* if the user pressed the button we skip the intro */
    2f68:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <delay_ms>
    2f6c:	90 91 a2 28 	lds	r25, 0x28A2	; 0x8028a2 <delay_ms+0x1>
    2f70:	89 2b       	or	r24, r25
    2f72:	d9 f6       	brne	.-74     	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:163
            state=CONIFG_MODE;
    2f74:	8f e0       	ldi	r24, 0x0F	; 15
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9f cf       	rjmp	.-194    	; 0x2eb8 <main+0xdf8>
SetPWM():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:258
void HW_190409::SetPWM( uint16_t PWM_Value){
 
    if(PWM_Value>=MAX_PWM_LIMIT){
      PWM_Value = MAX_PWM_LIMIT;
    }
    PWM.On(PWM_Value);
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	8f e5       	ldi	r24, 0x5F	; 95
    2f80:	99 e2       	ldi	r25, 0x29	; 41
    2f82:	0e 94 1d 01 	call	0x23a	; 0x23a <PWM_190409::On(unsigned int)>
GetSolderingIron():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/HW_190409.cpp:323
 Input:       None
 Output:      SolderingIronType_t
 Discription: Get the currently configured iron form the station
**********************************************************************************************************/
SolderingIronType_t HW_190409::GetSolderingIron( void ){
  return read_StoreIronConfig();
    2f86:	0e 94 37 0a 	call	0x146e	; 0x146e <HW_190409::read_StoreIronConfig() [clone .constprop.61]>
display_show_current_ironmode():
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:96
 Input:       None
 Output:      None
 Discription: Shows current configured IronMode
**********************************************************************************************************/
void FE_190409::display_show_current_ironmode( SolderingIronType_t Iron){
    switch( Iron){
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	51 f0       	breq	.+20     	; 0x2fa4 <main+0xee4>
    2f90:	83 30       	cpi	r24, 0x03	; 3
    2f92:	91 05       	cpc	r25, r1
    2f94:	51 f0       	breq	.+20     	; 0x2faa <main+0xeea>
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	59 f4       	brne	.+22     	; 0x2fb0 <main+0xef0>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:98
        case IRON_HAKKO_FX8801:{
            tm1637.displayStr("0 C1"); //24V
    2f9a:	8b e1       	ldi	r24, 0x1B	; 27
    2f9c:	9d e7       	ldi	r25, 0x7D	; 125
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:106
        case IRON_JBC_T245A:{
            tm1637.displayStr("0 C2"); //24V
        }break;

        case IRON_WELLER_RT:{
            tm1637.displayStr("0 C3"); //12V
    2f9e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <TM1637::displayStr(char*, unsigned int) [clone .constprop.27]>
    2fa2:	c3 cf       	rjmp	.-122    	; 0x2f2a <main+0xe6a>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:102
        case IRON_HAKKO_FX8801:{
            tm1637.displayStr("0 C1"); //24V
        }break;

        case IRON_JBC_T245A:{
            tm1637.displayStr("0 C2"); //24V
    2fa4:	80 e2       	ldi	r24, 0x20	; 32
    2fa6:	9d e7       	ldi	r25, 0x7D	; 125
    2fa8:	fa cf       	rjmp	.-12     	; 0x2f9e <main+0xede>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:106
        }break;

        case IRON_WELLER_RT:{
            tm1637.displayStr("0 C3"); //12V
    2faa:	85 e2       	ldi	r24, 0x25	; 37
    2fac:	9d e7       	ldi	r25, 0x7D	; 125
    2fae:	f7 cf       	rjmp	.-18     	; 0x2f9e <main+0xede>
C:\Users\mathiasc\AppData\Local\Temp\arduino_build_60620\sketch/frontend_190408.cpp:110
        }break;

        default:{
            tm1637.displayStr("0 C8"); //Default 12V
    2fb0:	8a e2       	ldi	r24, 0x2A	; 42
    2fb2:	9d e7       	ldi	r25, 0x7D	; 125
    2fb4:	f4 cf       	rjmp	.-24     	; 0x2f9e <main+0xede>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:183

        /*************************************************************
                              STATE NOFAULT       
        *************************************************************/
        case NOFAULT: {
          clear_error=0;
    2fb6:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <clear_error>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:184
          Station.Frontend.display_show_Temperatur(display_Temp,HeatPwr_Percent,setpoint,state,timestamp);
    2fba:	e0 90 9c 28 	lds	r14, 0x289C	; 0x80289c <timestamp>
    2fbe:	f0 90 9d 28 	lds	r15, 0x289D	; 0x80289d <timestamp+0x1>
    2fc2:	00 91 22 28 	lds	r16, 0x2822	; 0x802822 <state>
    2fc6:	10 91 23 28 	lds	r17, 0x2823	; 0x802823 <state+0x1>
    2fca:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    2fce:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    2fd2:	40 91 9b 28 	lds	r20, 0x289B	; 0x80289b <HeatPwr_Percent>
    2fd6:	60 91 99 28 	lds	r22, 0x2899	; 0x802899 <display_Temp>
    2fda:	70 91 9a 28 	lds	r23, 0x289A	; 0x80289a <display_Temp+0x1>
    2fde:	8a e5       	ldi	r24, 0x5A	; 90
    2fe0:	99 e2       	ldi	r25, 0x29	; 41
    2fe2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:185
          Station.write_StoreTemperature(setpoint);        //store "set temperature" in eeprom
    2fe6:	00 91 20 28 	lds	r16, 0x2820	; 0x802820 <setpoint>
    2fea:	10 91 21 28 	lds	r17, 0x2821	; 0x802821 <setpoint+0x1>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	9a 83       	std	Y+2, r25	; 0x02
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    2ff6:	61 2f       	mov	r22, r17
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
_ZN5EERefC2Ei():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:50
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	9a 83       	std	Y+2, r25	; 0x02
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\mathiasc\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.0.4\libraries\EEPROM\src/EEPROM.h:133
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
  void write(int idx, uint8_t val) { (EERef(idx)) = val; }
  void update(int idx, uint8_t val) { EERef(idx).update(val); }
    3008:	60 2f       	mov	r22, r16
    300a:	ce 01       	movw	r24, r28
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	0e 94 0f 0a 	call	0x141e	; 0x141e <EERef::update(unsigned char)>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:186
          pwm_Adjust();
    3012:	0e 94 a0 08 	call	0x1140	; 0x1140 <pwm_Adjust()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:189
          Station.CheckLimits();   
          /* avg_pwr for powersave */
          avg_power= avg_power*15+HeatPwr_Percent;
    3016:	40 91 97 28 	lds	r20, 0x2897	; 0x802897 <avg_power>
    301a:	50 91 98 28 	lds	r21, 0x2898	; 0x802898 <avg_power+0x1>
    301e:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <HeatPwr_Percent>
    3022:	9f e0       	ldi	r25, 0x0F	; 15
    3024:	94 9f       	mul	r25, r20
    3026:	90 01       	movw	r18, r0
    3028:	95 9f       	mul	r25, r21
    302a:	30 0d       	add	r19, r0
    302c:	11 24       	eor	r1, r1
    302e:	82 0f       	add	r24, r18
    3030:	93 2f       	mov	r25, r19
    3032:	91 1d       	adc	r25, r1
    3034:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <avg_power>
    3038:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <avg_power+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:190
          avg_power = avg_power/16;
    303c:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <avg_power>
    3040:	90 91 98 28 	lds	r25, 0x2898	; 0x802898 <avg_power+0x1>
    3044:	24 e0       	ldi	r18, 0x04	; 4
    3046:	96 95       	lsr	r25
    3048:	87 95       	ror	r24
    304a:	2a 95       	dec	r18
    304c:	e1 f7       	brne	.-8      	; 0x3046 <main+0xf86>
    304e:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <avg_power>
    3052:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <avg_power+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:192
          /* due to rounding errors this is not accurate but serves the purpose */
          if( avg_power != (last_avg) ) { /* We are awake */
    3056:	20 91 97 28 	lds	r18, 0x2897	; 0x802897 <avg_power>
    305a:	30 91 98 28 	lds	r19, 0x2898	; 0x802898 <avg_power+0x1>
    305e:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <last_avg>
    3062:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <last_avg+0x1>
    3066:	28 17       	cp	r18, r24
    3068:	39 07       	cpc	r19, r25
    306a:	61 f1       	breq	.+88     	; 0x30c4 <main+0x1004>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:193
            if(deltacount<255){
    306c:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <deltacount>
    3070:	8f 3f       	cpi	r24, 0xFF	; 255
    3072:	29 f0       	breq	.+10     	; 0x307e <main+0xfbe>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:194
              deltacount++;
    3074:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <deltacount>
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <deltacount>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:200
            } 
          } else {
            deltacount=0;
          }

           if( (deltacount>7) || (100 == HeatPwr_Percent ) || ( ( btn_press_time>100 ) && ( btn_press_time < 2000 ) ) ) { /* if we are used we prevent sleeping */
    307e:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <deltacount>
    3082:	88 30       	cpi	r24, 0x08	; 8
    3084:	10 f5       	brcc	.+68     	; 0x30ca <main+0x100a>
    3086:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <HeatPwr_Percent>
    308a:	84 36       	cpi	r24, 0x64	; 100
    308c:	f1 f0       	breq	.+60     	; 0x30ca <main+0x100a>
    308e:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    3092:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    3096:	85 36       	cpi	r24, 0x65	; 101
    3098:	91 05       	cpc	r25, r1
    309a:	38 f0       	brcs	.+14     	; 0x30aa <main+0xfea>
    309c:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    30a0:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    30a4:	80 3d       	cpi	r24, 0xD0	; 208
    30a6:	97 40       	sbci	r25, 0x07	; 7
    30a8:	80 f0       	brcs	.+32     	; 0x30ca <main+0x100a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:202
              powerSave_TimerReset();
           } else if( powerSave_F == true){ /* we need to go in powersave */
    30aa:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <powerSave_F>
    30ae:	88 23       	and	r24, r24
    30b0:	71 f0       	breq	.+28     	; 0x30ce <main+0x100e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:203
                powerSave_TimerReset();
    30b2:	0e 94 92 08 	call	0x1124	; 0x1124 <powerSave_TimerReset()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:204
                state = POWERSAVE;
    30b6:	85 e0       	ldi	r24, 0x05	; 5
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    30be:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <main+0x100e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:197
          if( avg_power != (last_avg) ) { /* We are awake */
            if(deltacount<255){
              deltacount++;
            } 
          } else {
            deltacount=0;
    30c4:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <deltacount>
    30c8:	da cf       	rjmp	.-76     	; 0x307e <main+0xfbe>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:201
          }

           if( (deltacount>7) || (100 == HeatPwr_Percent ) || ( ( btn_press_time>100 ) && ( btn_press_time < 2000 ) ) ) { /* if we are used we prevent sleeping */
              powerSave_TimerReset();
    30ca:	0e 94 92 08 	call	0x1124	; 0x1124 <powerSave_TimerReset()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:207
           } else if( powerSave_F == true){ /* we need to go in powersave */
                powerSave_TimerReset();
                state = POWERSAVE;
           } 

          if(btn_press_time>5000){
    30ce:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    30d2:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    30d6:	89 38       	cpi	r24, 0x89	; 137
    30d8:	93 41       	sbci	r25, 0x13	; 19
    30da:	c8 f0       	brcs	.+50     	; 0x310e <main+0x104e>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:208
                current_PWM=0;
    30dc:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <current_PWM>
    30e0:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <current_PWM+0x1>
    30e4:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <current_PWM+0x2>
    30e8:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <current_PWM+0x3>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:209
                state = SLEEP;
    30ec:	87 e0       	ldi	r24, 0x07	; 7
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <state>
    30f4:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <state+0x1>
rotary_EncoderDisable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:503
 Output:      None
 Description: Disable pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderDisable()
{   
    RotaryEncoderLocked=1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <RotaryEncoderLocked>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:211

          if(btn_press_time>5000){
                current_PWM=0;
                state = SLEEP;
                rotary_EncoderDisable();              /* we disable rotary encoder  */
                LastActiveTemp=setpoint;
    30fe:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    3102:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    3106:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <LastActiveTemp>
    310a:	90 93 8c 28 	sts	0x288C, r25	; 0x80288c <LastActiveTemp+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:215
               
          }
           
          last_avg=avg_power;
    310e:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <avg_power>
    3112:	90 91 98 28 	lds	r25, 0x2898	; 0x802898 <avg_power+0x1>
    3116:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <last_avg>
    311a:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <last_avg+0x1>
    311e:	05 cf       	rjmp	.-502    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:223

       /*************************************************************
                              STATE TEMPSENS_FAIL       
        *************************************************************/   
        case TEMPSENS_FAIL:{   /* this is given by the fault monitor    */
          PWM_Off();   /* we turn off the pwm                   */
    3120:	0e 94 ce 09 	call	0x139c	; 0x139c <PWM_Off()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:224
          Station.Frontend.display_show_TempError(ErrNo); 
    3124:	60 91 8a 28 	lds	r22, 0x288A	; 0x80288a <ErrNo>
    3128:	8a e5       	ldi	r24, 0x5A	; 90
    312a:	99 e2       	ldi	r25, 0x29	; 41
    312c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <FE_190409::display_show_TempError(unsigned char)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:225
          state = WAIT;
    3130:	83 e0       	ldi	r24, 0x03	; 3
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	c1 ce       	rjmp	.-638    	; 0x2eb8 <main+0xdf8>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:232

        /*************************************************************
                              STATE TEMPSENS_FAIL       
        *************************************************************/   
        case UNDERVOLTAGE:{
            PWM_Off();
    3136:	0e 94 ce 09 	call	0x139c	; 0x139c <PWM_Off()>
    313a:	f7 ce       	rjmp	.-530    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:240
        } break;        
        /*************************************************************
                              STATE WAIT       
        *************************************************************/   
        case WAIT:{
            if(timestamp&0x0001){ /* we invert the display once a second */
    313c:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <timestamp>
    3140:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <timestamp+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:245
              Station.Frontend.display_invert(1);//display.invertDisplay(1);
            } else {
              Station.Frontend.display_invert(0);//display.invertDisplay(0);
            }
           if( (clear_error != 0) || ( digitalRead( ROTARY_BTN ) == LOW ) )  /* if the user pressed the button we try to recover */
    3144:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <clear_error>
    3148:	88 23       	and	r24, r24
    314a:	39 f0       	breq	.+14     	; 0x315a <main+0x109a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:248
           {
            Station.Frontend.display_invert(0); //display.invertDisplay(0);
            clear_error=0;
    314c:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <clear_error>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:249
            state= RECOVER;
    3150:	20 92 22 28 	sts	0x2822, r2	; 0x802822 <state>
    3154:	30 92 23 28 	sts	0x2823, r3	; 0x802823 <state+0x1>
    3158:	e8 ce       	rjmp	.-560    	; 0x2f2a <main+0xe6a>
digitalRead():
    315a:	84 e0       	ldi	r24, 0x04	; 4
    315c:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:245
            if(timestamp&0x0001){ /* we invert the display once a second */
              Station.Frontend.display_invert(1);//display.invertDisplay(1);
            } else {
              Station.Frontend.display_invert(0);//display.invertDisplay(0);
            }
           if( (clear_error != 0) || ( digitalRead( ROTARY_BTN ) == LOW ) )  /* if the user pressed the button we try to recover */
    3160:	88 23       	and	r24, r24
    3162:	a1 f3       	breq	.-24     	; 0x314c <main+0x108c>
    3164:	e2 ce       	rjmp	.-572    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:262
        *************************************************************/   
        case RECOVER:{
          /* Recovery time my be displayed
           *  
           */
           Station.Frontend.display_show_Temperatur(display_Temp,HeatPwr_Percent,setpoint,state,timestamp);    //display temperature on oled, let the PWR string blink
    3166:	e0 90 9c 28 	lds	r14, 0x289C	; 0x80289c <timestamp>
    316a:	f0 90 9d 28 	lds	r15, 0x289D	; 0x80289d <timestamp+0x1>
    316e:	00 91 22 28 	lds	r16, 0x2822	; 0x802822 <state>
    3172:	10 91 23 28 	lds	r17, 0x2823	; 0x802823 <state+0x1>
    3176:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    317a:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    317e:	40 91 9b 28 	lds	r20, 0x289B	; 0x80289b <HeatPwr_Percent>
    3182:	60 91 99 28 	lds	r22, 0x2899	; 0x802899 <display_Temp>
    3186:	70 91 9a 28 	lds	r23, 0x289A	; 0x80289a <display_Temp+0x1>
    318a:	8a e5       	ldi	r24, 0x5A	; 90
    318c:	99 e2       	ldi	r25, 0x29	; 41
    318e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)>
    3192:	cb ce       	rjmp	.-618    	; 0x2f2a <main+0xe6a>
rotary_EncoderDisable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:503
 Output:      None
 Description: Disable pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderDisable()
{   
    RotaryEncoderLocked=1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <RotaryEncoderLocked>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:272
        /*************************************************************
                              STATE POWERSAVE       
        *************************************************************/           
        case POWERSAVE:{                        /* powersave state, will be entered after 15 minutes */
          rotary_EncoderDisable();              /* we disable rotary encoder  */
          Station.Frontend.display_show_Temperatur(display_Temp,HeatPwr_Percent,setpoint,state,timestamp);       
    319a:	e0 90 9c 28 	lds	r14, 0x289C	; 0x80289c <timestamp>
    319e:	f0 90 9d 28 	lds	r15, 0x289D	; 0x80289d <timestamp+0x1>
    31a2:	00 91 22 28 	lds	r16, 0x2822	; 0x802822 <state>
    31a6:	10 91 23 28 	lds	r17, 0x2823	; 0x802823 <state+0x1>
    31aa:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    31ae:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    31b2:	40 91 9b 28 	lds	r20, 0x289B	; 0x80289b <HeatPwr_Percent>
    31b6:	60 91 99 28 	lds	r22, 0x2899	; 0x802899 <display_Temp>
    31ba:	70 91 9a 28 	lds	r23, 0x289A	; 0x80289a <display_Temp+0x1>
    31be:	8a e5       	ldi	r24, 0x5A	; 90
    31c0:	99 e2       	ldi	r25, 0x29	; 41
    31c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:273
          LastActiveTemp=setpoint;                 /* we save the current setpoint */
    31c6:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    31ca:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    31ce:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <LastActiveTemp>
    31d2:	90 93 8c 28 	sts	0x288C, r25	; 0x80288c <LastActiveTemp+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:274
          if(setpoint>100){                        /* we switch to 100 degree if the temp is currently higher */
    31d6:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <setpoint>
    31da:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <setpoint+0x1>
    31de:	85 36       	cpi	r24, 0x65	; 101
    31e0:	91 05       	cpc	r25, r1
    31e2:	30 f0       	brcs	.+12     	; 0x31f0 <main+0x1130>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:275
            setpoint = 100;
    31e4:	84 e6       	ldi	r24, 0x64	; 100
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    31ec:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:277
          }
          state= POWERSAVE_WAIT;
    31f0:	26 e0       	ldi	r18, 0x06	; 6
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	20 93 22 28 	sts	0x2822, r18	; 0x802822 <state>
    31f8:	30 93 23 28 	sts	0x2823, r19	; 0x802823 <state+0x1>
    31fc:	96 ce       	rjmp	.-724    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:286
        /*************************************************************
                              STATE POWERSAVE_WAIT       
        *************************************************************/           
        case POWERSAVE_WAIT:{
          /* If we stay for more than 5 minutes here we will completly power down */
          Station.Frontend.display_show_Temperatur(display_Temp,HeatPwr_Percent,setpoint,state,timestamp);          // power save mode after 15 min
    31fe:	e0 90 9c 28 	lds	r14, 0x289C	; 0x80289c <timestamp>
    3202:	f0 90 9d 28 	lds	r15, 0x289D	; 0x80289d <timestamp+0x1>
    3206:	00 91 22 28 	lds	r16, 0x2822	; 0x802822 <state>
    320a:	10 91 23 28 	lds	r17, 0x2823	; 0x802823 <state+0x1>
    320e:	20 91 20 28 	lds	r18, 0x2820	; 0x802820 <setpoint>
    3212:	30 91 21 28 	lds	r19, 0x2821	; 0x802821 <setpoint+0x1>
    3216:	40 91 9b 28 	lds	r20, 0x289B	; 0x80289b <HeatPwr_Percent>
    321a:	60 91 99 28 	lds	r22, 0x2899	; 0x802899 <display_Temp>
    321e:	70 91 9a 28 	lds	r23, 0x289A	; 0x80289a <display_Temp+0x1>
    3222:	8a e5       	ldi	r24, 0x5A	; 90
    3224:	99 e2       	ldi	r25, 0x29	; 41
    3226:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <FE_190409::display_show_Temperatur(unsigned int, unsigned char, unsigned int, fsmstate_t, unsigned int)>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:287
          pwm_Adjust();
    322a:	0e 94 a0 08 	call	0x1140	; 0x1140 <pwm_Adjust()>
digitalRead():
    322e:	84 e0       	ldi	r24, 0x04	; 4
    3230:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:289
          Station.CheckLimits();
          if( ( digitalRead( ROTARY_BTN ) == LOW ) && ( btn_press_time < 1000 ))
    3234:	81 11       	cpse	r24, r1
    3236:	07 c0       	rjmp	.+14     	; 0x3246 <main+0x1186>
    3238:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    323c:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    3240:	88 3e       	cpi	r24, 0xE8	; 232
    3242:	93 40       	sbci	r25, 0x03	; 3
    3244:	50 f0       	brcs	.+20     	; 0x325a <main+0x119a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:294
          {
            setpoint = LastActiveTemp;   /* we restore the temperatur */
            rotary_EncoderEnable();  /* we setup the encoder again */
            state= NOFAULT;           /* we switch to opperating state */
          } else if( true == powerSave_F ){   
    3246:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <powerSave_F>
    324a:	88 23       	and	r24, r24
    324c:	09 f4       	brne	.+2      	; 0x3250 <main+0x1190>
    324e:	6d ce       	rjmp	.-806    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:295
              powerSave_TimerReset();    /* we reset the timer */
    3250:	0e 94 92 08 	call	0x1124	; 0x1124 <powerSave_TimerReset()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:296
              state = SLEEP;          /* and we go to sleep */
    3254:	87 e0       	ldi	r24, 0x07	; 7
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	2f ce       	rjmp	.-930    	; 0x2eb8 <main+0xdf8>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:291
          Station.Frontend.display_show_Temperatur(display_Temp,HeatPwr_Percent,setpoint,state,timestamp);          // power save mode after 15 min
          pwm_Adjust();
          Station.CheckLimits();
          if( ( digitalRead( ROTARY_BTN ) == LOW ) && ( btn_press_time < 1000 ))
          {
            setpoint = LastActiveTemp;   /* we restore the temperatur */
    325a:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <LastActiveTemp>
    325e:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <LastActiveTemp+0x1>
    3262:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    3266:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
rotary_EncoderEnable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:490
 Output:      None
 Description: Configure pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderEnable()
{   
    RotaryEncoderLocked=0;
    326a:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <RotaryEncoderLocked>
    326e:	53 ce       	rjmp	.-858    	; 0x2f16 <main+0xe56>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:305

       /*************************************************************
                              STATE SLEEP       
        *************************************************************/           
        case SLEEP:{
          PWM_Off();
    3270:	0e 94 ce 09 	call	0x139c	; 0x139c <PWM_Off()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:307
          Station.Frontend.display_dim(true);//display.dim(true); //Dim the display, if supported 
          display_Sleep();   //Show the sleep screen
    3274:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <display_Sleep()>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:308
          setpoint=0;           //We set the target to 0 degree, seem safe
    3278:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <setpoint>
    327c:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <setpoint+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:309
          HeatPwr_Percent=0;
    3280:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <HeatPwr_Percent>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:310
          state = SLEEP_WAIT; 
    3284:	88 e0       	ldi	r24, 0x08	; 8
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	17 ce       	rjmp	.-978    	; 0x2eb8 <main+0xdf8>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:319
 
     /*************************************************************
                              STATE SLEEP_WAIT       
     *************************************************************/                  
        case SLEEP_WAIT:{
          display_Sleep();
    328a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <display_Sleep()>
digitalRead():
    328e:	84 e0       	ldi	r24, 0x04	; 4
    3290:	0e 94 36 04 	call	0x86c	; 0x86c <digitalRead.part.3>
loop():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:320
          if( ( digitalRead( ROTARY_BTN ) == LOW ) && ( btn_press_time < 1000 ) ) 
    3294:	81 11       	cpse	r24, r1
    3296:	49 ce       	rjmp	.-878    	; 0x2f2a <main+0xe6a>
    3298:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <btn_press_time>
    329c:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <btn_press_time+0x1>
    32a0:	88 3e       	cpi	r24, 0xE8	; 232
    32a2:	93 40       	sbci	r25, 0x03	; 3
    32a4:	08 f0       	brcs	.+2      	; 0x32a8 <main+0x11e8>
    32a6:	41 ce       	rjmp	.-894    	; 0x2f2a <main+0xe6a>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:322
           {
              state= NOFAULT;
    32a8:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <state>
    32ac:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <state+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:323
              setpoint = LastActiveTemp;
    32b0:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <LastActiveTemp>
    32b4:	90 91 8c 28 	lds	r25, 0x288C	; 0x80288c <LastActiveTemp+0x1>
    32b8:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <setpoint>
    32bc:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <setpoint+0x1>
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:325
             
              powerSave_TimerReset();    /* we reset the timer */
    32c0:	0e 94 92 08 	call	0x1124	; 0x1124 <powerSave_TimerReset()>
rotary_EncoderEnable():
L:\Projects\19xxxx\190409 soldering iron 2020\02_lab\firmware\190409-DIY_SOLDERING_IRON_2020\Soldering-Station/Soldering-Station.ino:490
 Output:      None
 Description: Configure pin change interrupts for rotary encoder pin 
 *************************************************************************************************************/    
void rotary_EncoderEnable()
{   
    RotaryEncoderLocked=0;
    32c4:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <RotaryEncoderLocked>
    32c8:	30 ce       	rjmp	.-928    	; 0x2f2a <main+0xe6a>

000032ca <strncmp_P>:
strncmp_P():
    32ca:	fb 01       	movw	r30, r22
    32cc:	dc 01       	movw	r26, r24
    32ce:	41 50       	subi	r20, 0x01	; 1
    32d0:	50 40       	sbci	r21, 0x00	; 0
    32d2:	30 f0       	brcs	.+12     	; 0x32e0 <strncmp_P+0x16>
    32d4:	8d 91       	ld	r24, X+
    32d6:	05 90       	lpm	r0, Z+
    32d8:	80 19       	sub	r24, r0
    32da:	19 f4       	brne	.+6      	; 0x32e2 <strncmp_P+0x18>
    32dc:	00 20       	and	r0, r0
    32de:	b9 f7       	brne	.-18     	; 0x32ce <strncmp_P+0x4>
    32e0:	88 1b       	sub	r24, r24
    32e2:	99 0b       	sbc	r25, r25
    32e4:	08 95       	ret

000032e6 <__fixsfsi>:
__fixsfsi():
    32e6:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__fixunssfsi>
    32ea:	68 94       	set
    32ec:	b1 11       	cpse	r27, r1
    32ee:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_szero>
    32f2:	08 95       	ret

000032f4 <__fixunssfsi>:
__fixunssfsi():
    32f4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_splitA>
    32f8:	88 f0       	brcs	.+34     	; 0x331c <__fixunssfsi+0x28>
    32fa:	9f 57       	subi	r25, 0x7F	; 127
    32fc:	98 f0       	brcs	.+38     	; 0x3324 <__fixunssfsi+0x30>
    32fe:	b9 2f       	mov	r27, r25
    3300:	99 27       	eor	r25, r25
    3302:	b7 51       	subi	r27, 0x17	; 23
    3304:	b0 f0       	brcs	.+44     	; 0x3332 <__fixunssfsi+0x3e>
    3306:	e1 f0       	breq	.+56     	; 0x3340 <__fixunssfsi+0x4c>
    3308:	66 0f       	add	r22, r22
    330a:	77 1f       	adc	r23, r23
    330c:	88 1f       	adc	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	1a f0       	brmi	.+6      	; 0x3318 <__fixunssfsi+0x24>
    3312:	ba 95       	dec	r27
    3314:	c9 f7       	brne	.-14     	; 0x3308 <__fixunssfsi+0x14>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <__fixunssfsi+0x4c>
    3318:	b1 30       	cpi	r27, 0x01	; 1
    331a:	91 f0       	breq	.+36     	; 0x3340 <__fixunssfsi+0x4c>
    331c:	0e 94 08 1a 	call	0x3410	; 0x3410 <__fp_zero>
    3320:	b1 e0       	ldi	r27, 0x01	; 1
    3322:	08 95       	ret
    3324:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__fp_zero>
    3328:	67 2f       	mov	r22, r23
    332a:	78 2f       	mov	r23, r24
    332c:	88 27       	eor	r24, r24
    332e:	b8 5f       	subi	r27, 0xF8	; 248
    3330:	39 f0       	breq	.+14     	; 0x3340 <__fixunssfsi+0x4c>
    3332:	b9 3f       	cpi	r27, 0xF9	; 249
    3334:	cc f3       	brlt	.-14     	; 0x3328 <__fixunssfsi+0x34>
    3336:	86 95       	lsr	r24
    3338:	77 95       	ror	r23
    333a:	67 95       	ror	r22
    333c:	b3 95       	inc	r27
    333e:	d9 f7       	brne	.-10     	; 0x3336 <__fixunssfsi+0x42>
    3340:	3e f4       	brtc	.+14     	; 0x3350 <__fixunssfsi+0x5c>
    3342:	90 95       	com	r25
    3344:	80 95       	com	r24
    3346:	70 95       	com	r23
    3348:	61 95       	neg	r22
    334a:	7f 4f       	sbci	r23, 0xFF	; 255
    334c:	8f 4f       	sbci	r24, 0xFF	; 255
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	08 95       	ret

00003352 <__floatunsisf>:
__floatunsisf():
    3352:	e8 94       	clt
    3354:	09 c0       	rjmp	.+18     	; 0x3368 <__floatsisf+0x12>

00003356 <__floatsisf>:
    3356:	97 fb       	bst	r25, 7
    3358:	3e f4       	brtc	.+14     	; 0x3368 <__floatsisf+0x12>
    335a:	90 95       	com	r25
    335c:	80 95       	com	r24
    335e:	70 95       	com	r23
    3360:	61 95       	neg	r22
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	8f 4f       	sbci	r24, 0xFF	; 255
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	99 23       	and	r25, r25
    336a:	a9 f0       	breq	.+42     	; 0x3396 <__floatsisf+0x40>
    336c:	f9 2f       	mov	r31, r25
    336e:	96 e9       	ldi	r25, 0x96	; 150
    3370:	bb 27       	eor	r27, r27
    3372:	93 95       	inc	r25
    3374:	f6 95       	lsr	r31
    3376:	87 95       	ror	r24
    3378:	77 95       	ror	r23
    337a:	67 95       	ror	r22
    337c:	b7 95       	ror	r27
    337e:	f1 11       	cpse	r31, r1
    3380:	f8 cf       	rjmp	.-16     	; 0x3372 <__floatsisf+0x1c>
    3382:	fa f4       	brpl	.+62     	; 0x33c2 <__floatsisf+0x6c>
    3384:	bb 0f       	add	r27, r27
    3386:	11 f4       	brne	.+4      	; 0x338c <__floatsisf+0x36>
    3388:	60 ff       	sbrs	r22, 0
    338a:	1b c0       	rjmp	.+54     	; 0x33c2 <__floatsisf+0x6c>
    338c:	6f 5f       	subi	r22, 0xFF	; 255
    338e:	7f 4f       	sbci	r23, 0xFF	; 255
    3390:	8f 4f       	sbci	r24, 0xFF	; 255
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	16 c0       	rjmp	.+44     	; 0x33c2 <__floatsisf+0x6c>
    3396:	88 23       	and	r24, r24
    3398:	11 f0       	breq	.+4      	; 0x339e <__floatsisf+0x48>
    339a:	96 e9       	ldi	r25, 0x96	; 150
    339c:	11 c0       	rjmp	.+34     	; 0x33c0 <__floatsisf+0x6a>
    339e:	77 23       	and	r23, r23
    33a0:	21 f0       	breq	.+8      	; 0x33aa <__floatsisf+0x54>
    33a2:	9e e8       	ldi	r25, 0x8E	; 142
    33a4:	87 2f       	mov	r24, r23
    33a6:	76 2f       	mov	r23, r22
    33a8:	05 c0       	rjmp	.+10     	; 0x33b4 <__floatsisf+0x5e>
    33aa:	66 23       	and	r22, r22
    33ac:	71 f0       	breq	.+28     	; 0x33ca <__floatsisf+0x74>
    33ae:	96 e8       	ldi	r25, 0x86	; 134
    33b0:	86 2f       	mov	r24, r22
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	2a f0       	brmi	.+10     	; 0x33c2 <__floatsisf+0x6c>
    33b8:	9a 95       	dec	r25
    33ba:	66 0f       	add	r22, r22
    33bc:	77 1f       	adc	r23, r23
    33be:	88 1f       	adc	r24, r24
    33c0:	da f7       	brpl	.-10     	; 0x33b8 <__floatsisf+0x62>
    33c2:	88 0f       	add	r24, r24
    33c4:	96 95       	lsr	r25
    33c6:	87 95       	ror	r24
    33c8:	97 f9       	bld	r25, 7
    33ca:	08 95       	ret

000033cc <__fp_split3>:
__fp_split3():
    33cc:	57 fd       	sbrc	r21, 7
    33ce:	90 58       	subi	r25, 0x80	; 128
    33d0:	44 0f       	add	r20, r20
    33d2:	55 1f       	adc	r21, r21
    33d4:	59 f0       	breq	.+22     	; 0x33ec <__fp_splitA+0x10>
    33d6:	5f 3f       	cpi	r21, 0xFF	; 255
    33d8:	71 f0       	breq	.+28     	; 0x33f6 <__fp_splitA+0x1a>
    33da:	47 95       	ror	r20

000033dc <__fp_splitA>:
    33dc:	88 0f       	add	r24, r24
    33de:	97 fb       	bst	r25, 7
    33e0:	99 1f       	adc	r25, r25
    33e2:	61 f0       	breq	.+24     	; 0x33fc <__fp_splitA+0x20>
    33e4:	9f 3f       	cpi	r25, 0xFF	; 255
    33e6:	79 f0       	breq	.+30     	; 0x3406 <__fp_splitA+0x2a>
    33e8:	87 95       	ror	r24
    33ea:	08 95       	ret
    33ec:	12 16       	cp	r1, r18
    33ee:	13 06       	cpc	r1, r19
    33f0:	14 06       	cpc	r1, r20
    33f2:	55 1f       	adc	r21, r21
    33f4:	f2 cf       	rjmp	.-28     	; 0x33da <__fp_split3+0xe>
    33f6:	46 95       	lsr	r20
    33f8:	f1 df       	rcall	.-30     	; 0x33dc <__fp_splitA>
    33fa:	08 c0       	rjmp	.+16     	; 0x340c <__fp_splitA+0x30>
    33fc:	16 16       	cp	r1, r22
    33fe:	17 06       	cpc	r1, r23
    3400:	18 06       	cpc	r1, r24
    3402:	99 1f       	adc	r25, r25
    3404:	f1 cf       	rjmp	.-30     	; 0x33e8 <__fp_splitA+0xc>
    3406:	86 95       	lsr	r24
    3408:	71 05       	cpc	r23, r1
    340a:	61 05       	cpc	r22, r1
    340c:	08 94       	sec
    340e:	08 95       	ret

00003410 <__fp_zero>:
__fp_zero():
    3410:	e8 94       	clt

00003412 <__fp_szero>:
    3412:	bb 27       	eor	r27, r27
    3414:	66 27       	eor	r22, r22
    3416:	77 27       	eor	r23, r23
    3418:	cb 01       	movw	r24, r22
    341a:	97 f9       	bld	r25, 7
    341c:	08 95       	ret

0000341e <__mulsf3>:
__mulsf3():
    341e:	0e 94 22 1a 	call	0x3444	; 0x3444 <__mulsf3x>
    3422:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_round>
    3426:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_pscA>
    342a:	38 f0       	brcs	.+14     	; 0x343a <__mulsf3+0x1c>
    342c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_pscB>
    3430:	20 f0       	brcs	.+8      	; 0x343a <__mulsf3+0x1c>
    3432:	95 23       	and	r25, r21
    3434:	11 f0       	breq	.+4      	; 0x343a <__mulsf3+0x1c>
    3436:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__fp_inf>
    343a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__fp_nan>
    343e:	11 24       	eor	r1, r1
    3440:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_szero>

00003444 <__mulsf3x>:
__mulsf3x():
    3444:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__fp_split3>
    3448:	70 f3       	brcs	.-36     	; 0x3426 <__mulsf3+0x8>

0000344a <__mulsf3_pse>:
    344a:	95 9f       	mul	r25, r21
    344c:	c1 f3       	breq	.-16     	; 0x343e <__mulsf3+0x20>
    344e:	95 0f       	add	r25, r21
    3450:	50 e0       	ldi	r21, 0x00	; 0
    3452:	55 1f       	adc	r21, r21
    3454:	62 9f       	mul	r22, r18
    3456:	f0 01       	movw	r30, r0
    3458:	72 9f       	mul	r23, r18
    345a:	bb 27       	eor	r27, r27
    345c:	f0 0d       	add	r31, r0
    345e:	b1 1d       	adc	r27, r1
    3460:	63 9f       	mul	r22, r19
    3462:	aa 27       	eor	r26, r26
    3464:	f0 0d       	add	r31, r0
    3466:	b1 1d       	adc	r27, r1
    3468:	aa 1f       	adc	r26, r26
    346a:	64 9f       	mul	r22, r20
    346c:	66 27       	eor	r22, r22
    346e:	b0 0d       	add	r27, r0
    3470:	a1 1d       	adc	r26, r1
    3472:	66 1f       	adc	r22, r22
    3474:	82 9f       	mul	r24, r18
    3476:	22 27       	eor	r18, r18
    3478:	b0 0d       	add	r27, r0
    347a:	a1 1d       	adc	r26, r1
    347c:	62 1f       	adc	r22, r18
    347e:	73 9f       	mul	r23, r19
    3480:	b0 0d       	add	r27, r0
    3482:	a1 1d       	adc	r26, r1
    3484:	62 1f       	adc	r22, r18
    3486:	83 9f       	mul	r24, r19
    3488:	a0 0d       	add	r26, r0
    348a:	61 1d       	adc	r22, r1
    348c:	22 1f       	adc	r18, r18
    348e:	74 9f       	mul	r23, r20
    3490:	33 27       	eor	r19, r19
    3492:	a0 0d       	add	r26, r0
    3494:	61 1d       	adc	r22, r1
    3496:	23 1f       	adc	r18, r19
    3498:	84 9f       	mul	r24, r20
    349a:	60 0d       	add	r22, r0
    349c:	21 1d       	adc	r18, r1
    349e:	82 2f       	mov	r24, r18
    34a0:	76 2f       	mov	r23, r22
    34a2:	6a 2f       	mov	r22, r26
    34a4:	11 24       	eor	r1, r1
    34a6:	9f 57       	subi	r25, 0x7F	; 127
    34a8:	50 40       	sbci	r21, 0x00	; 0
    34aa:	9a f0       	brmi	.+38     	; 0x34d2 <__mulsf3_pse+0x88>
    34ac:	f1 f0       	breq	.+60     	; 0x34ea <__mulsf3_pse+0xa0>
    34ae:	88 23       	and	r24, r24
    34b0:	4a f0       	brmi	.+18     	; 0x34c4 <__mulsf3_pse+0x7a>
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	bb 1f       	adc	r27, r27
    34b8:	66 1f       	adc	r22, r22
    34ba:	77 1f       	adc	r23, r23
    34bc:	88 1f       	adc	r24, r24
    34be:	91 50       	subi	r25, 0x01	; 1
    34c0:	50 40       	sbci	r21, 0x00	; 0
    34c2:	a9 f7       	brne	.-22     	; 0x34ae <__mulsf3_pse+0x64>
    34c4:	9e 3f       	cpi	r25, 0xFE	; 254
    34c6:	51 05       	cpc	r21, r1
    34c8:	80 f0       	brcs	.+32     	; 0x34ea <__mulsf3_pse+0xa0>
    34ca:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__fp_inf>
    34ce:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_szero>
    34d2:	5f 3f       	cpi	r21, 0xFF	; 255
    34d4:	e4 f3       	brlt	.-8      	; 0x34ce <__mulsf3_pse+0x84>
    34d6:	98 3e       	cpi	r25, 0xE8	; 232
    34d8:	d4 f3       	brlt	.-12     	; 0x34ce <__mulsf3_pse+0x84>
    34da:	86 95       	lsr	r24
    34dc:	77 95       	ror	r23
    34de:	67 95       	ror	r22
    34e0:	b7 95       	ror	r27
    34e2:	f7 95       	ror	r31
    34e4:	e7 95       	ror	r30
    34e6:	9f 5f       	subi	r25, 0xFF	; 255
    34e8:	c1 f7       	brne	.-16     	; 0x34da <__mulsf3_pse+0x90>
    34ea:	fe 2b       	or	r31, r30
    34ec:	88 0f       	add	r24, r24
    34ee:	91 1d       	adc	r25, r1
    34f0:	96 95       	lsr	r25
    34f2:	87 95       	ror	r24
    34f4:	97 f9       	bld	r25, 7
    34f6:	08 95       	ret

000034f8 <round>:
    34f8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_splitA>
    34fc:	e8 f0       	brcs	.+58     	; 0x3538 <round+0x40>
    34fe:	9e 37       	cpi	r25, 0x7E	; 126
    3500:	e8 f0       	brcs	.+58     	; 0x353c <round+0x44>
    3502:	96 39       	cpi	r25, 0x96	; 150
    3504:	b8 f4       	brcc	.+46     	; 0x3534 <round+0x3c>
    3506:	9e 38       	cpi	r25, 0x8E	; 142
    3508:	48 f4       	brcc	.+18     	; 0x351c <round+0x24>
    350a:	67 2f       	mov	r22, r23
    350c:	78 2f       	mov	r23, r24
    350e:	88 27       	eor	r24, r24
    3510:	98 5f       	subi	r25, 0xF8	; 248
    3512:	f9 cf       	rjmp	.-14     	; 0x3506 <round+0xe>
    3514:	86 95       	lsr	r24
round():
    3516:	77 95       	ror	r23
    3518:	67 95       	ror	r22
    351a:	93 95       	inc	r25
    351c:	95 39       	cpi	r25, 0x95	; 149
    351e:	d0 f3       	brcs	.-12     	; 0x3514 <round+0x1c>
    3520:	b6 2f       	mov	r27, r22
    3522:	b1 70       	andi	r27, 0x01	; 1
    3524:	6b 0f       	add	r22, r27
    3526:	71 1d       	adc	r23, r1
    3528:	81 1d       	adc	r24, r1
    352a:	20 f4       	brcc	.+8      	; 0x3534 <round+0x3c>
    352c:	87 95       	ror	r24
    352e:	77 95       	ror	r23
    3530:	67 95       	ror	r22
    3532:	93 95       	inc	r25
    3534:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__fp_mintl>
    3538:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_mpack>
    353c:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_szero>

00003540 <__fp_inf>:
__fp_inf():
    3540:	97 f9       	bld	r25, 7
    3542:	9f 67       	ori	r25, 0x7F	; 127
    3544:	80 e8       	ldi	r24, 0x80	; 128
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	08 95       	ret

0000354c <__fp_mintl>:
__fp_mintl():
    354c:	88 23       	and	r24, r24
    354e:	71 f4       	brne	.+28     	; 0x356c <__fp_mintl+0x20>
    3550:	77 23       	and	r23, r23
    3552:	21 f0       	breq	.+8      	; 0x355c <__fp_mintl+0x10>
    3554:	98 50       	subi	r25, 0x08	; 8
    3556:	87 2b       	or	r24, r23
    3558:	76 2f       	mov	r23, r22
    355a:	07 c0       	rjmp	.+14     	; 0x356a <__fp_mintl+0x1e>
    355c:	66 23       	and	r22, r22
    355e:	11 f4       	brne	.+4      	; 0x3564 <__fp_mintl+0x18>
    3560:	99 27       	eor	r25, r25
    3562:	0d c0       	rjmp	.+26     	; 0x357e <__fp_mintl+0x32>
    3564:	90 51       	subi	r25, 0x10	; 16
    3566:	86 2b       	or	r24, r22
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	2a f0       	brmi	.+10     	; 0x3578 <__fp_mintl+0x2c>
    356e:	9a 95       	dec	r25
    3570:	66 0f       	add	r22, r22
    3572:	77 1f       	adc	r23, r23
    3574:	88 1f       	adc	r24, r24
    3576:	da f7       	brpl	.-10     	; 0x356e <__fp_mintl+0x22>
    3578:	88 0f       	add	r24, r24
    357a:	96 95       	lsr	r25
    357c:	87 95       	ror	r24
    357e:	97 f9       	bld	r25, 7
    3580:	08 95       	ret

00003582 <__fp_mpack>:
__fp_mpack():
    3582:	9f 3f       	cpi	r25, 0xFF	; 255
    3584:	31 f0       	breq	.+12     	; 0x3592 <__fp_mpack_finite+0xc>

00003586 <__fp_mpack_finite>:
    3586:	91 50       	subi	r25, 0x01	; 1
    3588:	20 f4       	brcc	.+8      	; 0x3592 <__fp_mpack_finite+0xc>
    358a:	87 95       	ror	r24
    358c:	77 95       	ror	r23
    358e:	67 95       	ror	r22
    3590:	b7 95       	ror	r27
    3592:	88 0f       	add	r24, r24
    3594:	91 1d       	adc	r25, r1
    3596:	96 95       	lsr	r25
    3598:	87 95       	ror	r24
    359a:	97 f9       	bld	r25, 7
    359c:	08 95       	ret

0000359e <__fp_nan>:
__fp_nan():
    359e:	9f ef       	ldi	r25, 0xFF	; 255
    35a0:	80 ec       	ldi	r24, 0xC0	; 192
    35a2:	08 95       	ret

000035a4 <__fp_pscA>:
__fp_pscA():
    35a4:	00 24       	eor	r0, r0
    35a6:	0a 94       	dec	r0
    35a8:	16 16       	cp	r1, r22
    35aa:	17 06       	cpc	r1, r23
    35ac:	18 06       	cpc	r1, r24
    35ae:	09 06       	cpc	r0, r25
    35b0:	08 95       	ret

000035b2 <__fp_pscB>:
__fp_pscB():
    35b2:	00 24       	eor	r0, r0
    35b4:	0a 94       	dec	r0
    35b6:	12 16       	cp	r1, r18
    35b8:	13 06       	cpc	r1, r19
    35ba:	14 06       	cpc	r1, r20
    35bc:	05 06       	cpc	r0, r21
    35be:	08 95       	ret

000035c0 <__fp_round>:
__fp_round():
    35c0:	09 2e       	mov	r0, r25
    35c2:	03 94       	inc	r0
    35c4:	00 0c       	add	r0, r0
    35c6:	11 f4       	brne	.+4      	; 0x35cc <__fp_round+0xc>
    35c8:	88 23       	and	r24, r24
    35ca:	52 f0       	brmi	.+20     	; 0x35e0 <__fp_round+0x20>
    35cc:	bb 0f       	add	r27, r27
    35ce:	40 f4       	brcc	.+16     	; 0x35e0 <__fp_round+0x20>
    35d0:	bf 2b       	or	r27, r31
    35d2:	11 f4       	brne	.+4      	; 0x35d8 <__fp_round+0x18>
    35d4:	60 ff       	sbrs	r22, 0
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <__fp_round+0x20>
    35d8:	6f 5f       	subi	r22, 0xFF	; 255
    35da:	7f 4f       	sbci	r23, 0xFF	; 255
    35dc:	8f 4f       	sbci	r24, 0xFF	; 255
    35de:	9f 4f       	sbci	r25, 0xFF	; 255
    35e0:	08 95       	ret

000035e2 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    35e2:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    35e4:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <__udivmodqi4_ep>

000035e8 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    35e8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    35ea:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    35ec:	08 f0       	brcs	.+2      	; 0x35f0 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    35ee:	96 1b       	sub	r25, r22

000035f0 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    35f0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    35f2:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    35f4:	c9 f7       	brne	.-14     	; 0x35e8 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    35f6:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    35f8:	08 95       	ret

000035fa <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    35fa:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    35fc:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    35fe:	16 f4       	brtc	.+4      	; 0x3604 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    3600:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    3602:	07 d0       	rcall	.+14     	; 0x3612 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    3604:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    3606:	09 d0       	rcall	.+18     	; 0x361a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    3608:	0e 94 81 1b 	call	0x3702	; 0x3702 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    360c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    360e:	05 d0       	rcall	.+10     	; 0x361a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    3610:	3e f4       	brtc	.+14     	; 0x3620 <__divmodhi4_exit>

00003612 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    3612:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    3614:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    3616:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    3618:	08 95       	ret

0000361a <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    361a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    361c:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    361e:	7f 4f       	sbci	r23, 0xFF	; 255

00003620 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    3620:	08 95       	ret

00003622 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3622:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3624:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3626:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3628:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    362a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    362c:	0d c0       	rjmp	.+26     	; 0x3648 <__udivmodsi4_ep>

0000362e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    362e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3630:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3632:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3634:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3636:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3638:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    363a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    363c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    363e:	20 f0       	brcs	.+8      	; 0x3648 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3640:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3642:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3644:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3646:	f5 0b       	sbc	r31, r21

00003648 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3648:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    364a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    364c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    364e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3650:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3652:	69 f7       	brne	.-38     	; 0x362e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3654:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3656:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3658:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    365a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    365c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    365e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3660:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3662:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3664:	08 95       	ret

00003666 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3666:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3668:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    366a:	1e f4       	brtc	.+6      	; 0x3672 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    366c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    366e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3672:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3674:	07 d0       	rcall	.+14     	; 0x3684 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3676:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    367a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    367c:	03 d0       	rcall	.+6      	; 0x3684 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    367e:	4e f4       	brtc	.+18     	; 0x3692 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3680:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__negsi2>

00003684 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3684:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3686:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3688:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    368a:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    368e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3690:	5f 4f       	sbci	r21, 0xFF	; 255

00003692 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3692:	08 95       	ret

00003694 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3694:	90 95       	com	r25
    3696:	80 95       	com	r24
    3698:	70 95       	com	r23
    369a:	61 95       	neg	r22
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	8f 4f       	sbci	r24, 0xFF	; 255
    36a0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    36a2:	08 95       	ret

000036a4 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    36a4:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    36a6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    36a8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    36aa:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    36ac:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    36ae:	09 94       	ijmp

000036b0 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    36b0:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    36b2:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    36b4:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    36b6:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    36b8:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    36ba:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    36bc:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    36be:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    36c0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    36c2:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    36c4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    36c6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    36c8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    36ca:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    36cc:	08 95       	ret

000036ce <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    36ce:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__umulhisi3>

000036d2 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    36d2:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    36d4:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    36d6:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    36d8:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    36da:	08 95       	ret

000036dc <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    36dc:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    36e0:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    36e2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    36e4:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    36e6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    36e8:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    36ea:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    36ec:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    36ee:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    36f0:	08 95       	ret

000036f2 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    36f2:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    36f4:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__muluhisi3>

000036f8 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    36f8:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    36fc:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    36fe:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    3700:	08 95       	ret

00003702 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    3702:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3704:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3706:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <__udivmodhi4_ep>

0000370a <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    370a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    370c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    370e:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    3710:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    3712:	10 f0       	brcs	.+4      	; 0x3718 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3714:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3716:	b7 0b       	sbc	r27, r23

00003718 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3718:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    371a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    371c:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    371e:	a9 f7       	brne	.-22     	; 0x370a <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    3720:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    3722:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3724:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3726:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3728:	08 95       	ret

0000372a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    372a:	f8 94       	cli

0000372c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    372c:	ff cf       	rjmp	.-2      	; 0x372c <__stop_program>
